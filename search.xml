<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习笔记_Java中级_日期</title>
      <link href="/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E4%B8%AD%E7%BA%A7_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E4%B8%AD%E7%BA%A7_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到中级啦!<br>异常处理</center><a id="more"></a><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p>异常定义:</p><p>导致程序的正常流程被中断得事件.</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_日期</title>
      <link href="/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%97%A5%E6%9C%9F/"/>
      <url>/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>日期</center><a id="more"></a><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date类:</p><p><strong>注意:</strong>是java.util.Date,</p><p>而非java.sql.Date,这个类是给数据库访问的时候用的.</p><h4 id="时间原点概念"><a href="#时间原点概念" class="headerlink" title="时间原点概念"></a>时间原点概念</h4><blockquote><p> 所有的数据类型，无论是整数，布尔，浮点数还是字符串，最后都需要以数字的形式表现出来。</p><p>日期类型也不例外，换句话说，一个日期，比如2020年10月1日，在计算机里，会用一个数字来代替。</p><p>那么最特殊的一个数字，就是零. 零这个数字，就代表Java中的时间原点，其对应的日期是1970年1月1日 8点0分0秒 。 (为什么是8点，因为中国的太平洋时区是UTC-8，刚好和格林威治时间差8个小时)</p><p>为什么对应1970年呢？ 因为1969年发布了第一个 UNIX 版本：AT&amp;T，综合考虑，当时就把1970年当做了时间原点。</p><p>所有的日期，都是以为这个0点为基准，每过一毫秒，就+1。  </p></blockquote><h4 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"当前时间:"</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 从1970年1月1日 早上8点0分0秒 开始经历的毫秒数</span></span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">"从1970年1月1日 早上8点0分0秒 开始经历了5秒的时间"</span>);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date now= <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//打印当前时间</span></span><br><span class="line">        System.out.println(<span class="string">"当前时间:"</span>+now.toString());</span><br><span class="line">        <span class="comment">//getTime() 得到一个long型的整数</span></span><br><span class="line">        <span class="comment">//这个整数代表 1970.1.1 08:00:00:000，每经历一毫秒，增加1</span></span><br><span class="line">        System.out.println(<span class="string">"当前时间getTime()返回的值是："</span>+now.getTime());</span><br><span class="line">          </span><br><span class="line">        Date zero = <span class="keyword">new</span> Date(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"用0作为构造方法，得到的日期是:"</span>+zero);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis()"></a>System.currentTimeMillis()</h4><p>当前日期的毫秒数<br>new Date().getTime() 和 System.currentTimeMillis() 是一样的<br>不过由于机器性能的原因，可能会相差几十毫秒，毕竟每执行一行代码，都是需要时间的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date now= <span class="keyword">new</span> Date();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//当前日期的毫秒数</span></span><br><span class="line">        System.out.println(<span class="string">"Date.getTime() \t\t\t返回值: "</span>+now.getTime());</span><br><span class="line">        <span class="comment">//通过System.currentTimeMillis()获取当前日期的毫秒数</span></span><br><span class="line">        System.out.println(<span class="string">"System.currentTimeMillis() \t返回值: "</span>+System.currentTimeMillis());      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><p>SimpleDateFormat 日期格式化类</p><h4 id="日期装字符串"><a href="#日期装字符串" class="headerlink" title="日期装字符串"></a>日期装字符串</h4><table><thead><tr><th align="center">字母</th><th align="center">时间单位</th></tr></thead><tbody><tr><td align="center">y</td><td align="center">代表年</td></tr><tr><td align="center">M</td><td align="center">代表月</td></tr><tr><td align="center">d</td><td align="center">代表日</td></tr><tr><td align="center">H</td><td align="center">代表24小时制时间</td></tr><tr><td align="center">h</td><td align="center">代表12小时制时间</td></tr><tr><td align="center">m</td><td align="center">代表分钟</td></tr><tr><td align="center">s</td><td align="center">代表秒</td></tr><tr><td align="center">S</td><td align="center">代表毫秒</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span> );</span><br><span class="line">        Date d= <span class="keyword">new</span> Date();</span><br><span class="line">        String str = sdf.format(d);</span><br><span class="line">        System.out.println(<span class="string">"当前时间通过 yyyy-MM-dd HH:mm:ss SSS 格式化后的输出: "</span>+str);</span><br><span class="line">         </span><br><span class="line">        SimpleDateFormat sdf1 =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span> );</span><br><span class="line">        Date d1= <span class="keyword">new</span> Date();</span><br><span class="line">        String str1 = sdf1.format(d1);</span><br><span class="line">        System.out.println(<span class="string">"当前时间通过 yyyy-MM-dd 格式化后的输出: "</span>+str1);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h4><p>模式（yyyy/MM/dd HH:mm:ss）需要和字符串格式保持一致，如果不一样就会抛出解析异常ParseException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span> );</span><br><span class="line">  </span><br><span class="line">        String str = <span class="string">"2016/1/5 12:12:12"</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date d = sdf.parse(str);</span><br><span class="line">            System.out.printf(<span class="string">"字符串 %s 通过格式  yyyy/MM/dd HH:mm:ss %n转换为日期对象: %s"</span>,str,d.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>Calendar类即日历类，常用于进行“翻日历”，比如<strong>下个月的今天是多久</strong>.</p><h4 id="Calendar与Date进行转换"><a href="#Calendar与Date进行转换" class="headerlink" title="Calendar与Date进行转换"></a>Calendar与Date进行转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//采用单例模式获取日历对象Calendar.getInstance();</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//通过日历对象得到日期对象</span></span><br><span class="line">        Date d = c.getTime();</span><br><span class="line">  </span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">0</span>);</span><br><span class="line">        c.setTime(d2); <span class="comment">//把这个日历，调成日期 : 1970.1.1 08:00:00</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="翻日历"><a href="#翻日历" class="headerlink" title="翻日历"></a>翻日历</h4><p>add方法，在原日期上增加年/月/日<br>set方法，直接设置年/月/日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        Date now = c.getTime();</span><br><span class="line">        <span class="comment">// 当前日期</span></span><br><span class="line">        System.out.println(<span class="string">"当前日期：\t"</span> + format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 下个月的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"下个月的今天:\t"</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 去年的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.YEAR, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"去年的今天:\t"</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 上个月的第三天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, -<span class="number">1</span>);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"上个月的第三天:\t"</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 日期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_数字与字符串</title>
      <link href="/2019/08/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2.md/"/>
      <url>/2019/08/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2.md/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>数字与字符串</center><a id="more"></a><h3 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h3><h4 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h4><p>所有的<strong>基本类型</strong>,都有对应的<strong>类类型</strong>.</p><p>比如int对应的类是Integer</p><p>这种类就叫做封装类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//把一个基本类型的变量,转换为Integer对象</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">        <span class="comment">//把一个Integer对象，转换为一个基本类型的int</span></span><br><span class="line">        <span class="keyword">int</span> i2 = it.intValue();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h4><p>数字封装类有Byte,Short,Integer,Long,Float,Double,这些类都是Number抽象类的子类.</p><h4 id="基本类型装封装类"><a href="#基本类型装封装类" class="headerlink" title="基本类型装封装类"></a>基本类型装封装类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>; </span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装类装基本类型"><a href="#封装类装基本类型" class="headerlink" title="封装类装基本类型"></a>封装类装基本类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">        <span class="keyword">int</span> i2 = it.intValue();       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h4><p>不需要调用构造方法，<strong>通过=符号自动</strong>把 基本类型 转换为 类类型 就叫装箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫装箱</span></span><br><span class="line">        Integer it2 = i;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h4><p>不需要调用Integer的intValue方法，通过=就自动转换成int类型，就叫拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">        <span class="keyword">int</span> i2 = it.intValue();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫拆箱</span></span><br><span class="line">        <span class="keyword">int</span> i3 = it;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="int的最大值和最小值"><a href="#int的最大值和最小值" class="headerlink" title="int的最大值和最小值"></a>int的最大值和最小值</h4><p>int的最大值可以通过其对应的封装类Integer.MAX_VALUE获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE<span class="comment">//最大值</span></span><br><span class="line">Integer.MIN_VALUE<span class="comment">//最小值</span></span><br></pre></td></tr></table></figure><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h4><ul><li>方法一:使用String类的静态方法valueOf</li><li>方法二:先把基本类型封装为对象,然后调用对象的toString</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法1</span></span><br><span class="line">        String str = String.valueOf(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法2</span></span><br><span class="line">        Integer it = i;</span><br><span class="line">        String str2 = it.toString();      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h4><p>调用Integer的静态方法parseInt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"999"</span>;</span><br><span class="line">        <span class="keyword">int</span> i= Integer.parseInt(str);</span><br><span class="line">        System.out.println(i);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h3><p>java.lang.Math提供了一些常用的数学运算方法,并且都是以静态方法的形式存在的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">5.4f</span>;</span><br><span class="line">        <span class="keyword">float</span> f2 = <span class="number">5.5f</span>;</span><br><span class="line">        <span class="comment">//5.4四舍五入即5</span></span><br><span class="line">        System.out.println(Math.round(f1));</span><br><span class="line">        <span class="comment">//5.5四舍五入即6</span></span><br><span class="line">        System.out.println(Math.round(f2));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-1之间的随机浮点数（取不到1）</span></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-10之间的随机整数 （取不到10）</span></span><br><span class="line">        System.out.println((<span class="keyword">int</span>)( Math.random()*<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//开方</span></span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">9</span>));</span><br><span class="line">        <span class="comment">//次方（2的4次方）</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//π</span></span><br><span class="line">        System.out.println(Math.PI);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自然常数</span></span><br><span class="line">        System.out.println(Math.E);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><h4 id="格式化输出-1"><a href="#格式化输出-1" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>  如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用格式化输出，就可以简洁明了</p><p>%s 表示字符串<br>%d 表示数字<br>%n 表示换行  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String name =<span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="keyword">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">"超神"</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差</span></span><br><span class="line">        String sentence = name+ <span class="string">" 在进行了连续 "</span> + kill + <span class="string">" 次击杀后，获得了 "</span> + title +<span class="string">" 的称号"</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(sentence);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//使用格式化输出</span></span><br><span class="line">        <span class="comment">//%s表示字符串，%d表示数字,%n表示换行</span></span><br><span class="line">        String sentenceFormat =<span class="string">"%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n"</span>;</span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="printf和format"><a href="#printf和format" class="headerlink" title="printf和format"></a>printf和format</h4><p>printf和format能够达到一模一样的效果，通过查看java源代码可以看到，在printf中直接调用了format</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String format,Object ... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> format(format,args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String name =<span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="keyword">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">"超神"</span>;</span><br><span class="line">         </span><br><span class="line">        String sentenceFormat =<span class="string">"%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n"</span>;</span><br><span class="line">        <span class="comment">//使用printf格式化输出</span></span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">        <span class="comment">//使用format格式化输出</span></span><br><span class="line">        System.out.format(sentenceFormat,name,kill,title);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p><strong>换行符</strong>就是另起一行 — ‘\n’ 换行（newline）<br><strong>回车符</strong>就是回到一行的开头 — ‘\r’ 回车（return）<br>在eclipse里敲一个回车，实际上是<strong>回车换行符</strong><br>Java是跨平台的编程语言，同样的代码，可以在不同的平台使用，比如Windows,Linux,Mac<br>然而在不同的操作系统，换行符是不一样的<br>（1）在DOS和Windows中，每行结尾是 “\r\n”；<br>（2）Linux系统里，每行结尾只有 “\n”；<br>（3）Mac系统里，每行结尾是只有 “\r”。<br>为了使得同一个java程序的换行符在所有的操作系统中都有一样的表现，使用%n，就可以做到平台无关的换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"这是换行符%n"</span>);</span><br><span class="line">        System.out.printf(<span class="string">"这是换行符%n"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达"><a href="#总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达" class="headerlink" title="总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达"></a>总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = <span class="number">2020</span>;</span><br><span class="line">        <span class="comment">//总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//直接打印数字</span></span><br><span class="line">        System.out.format(<span class="string">"%d%n"</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,默认右对齐</span></span><br><span class="line">        System.out.format(<span class="string">"%8d%n"</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,左对齐</span></span><br><span class="line">        System.out.format(<span class="string">"%-8d%n"</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,不够补0</span></span><br><span class="line">        System.out.format(<span class="string">"%08d%n"</span>,year);</span><br><span class="line">        <span class="comment">//千位分隔符</span></span><br><span class="line">        System.out.format(<span class="string">"%,8d%n"</span>,year*<span class="number">10000</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//小数点位数</span></span><br><span class="line">        System.out.format(<span class="string">"%.2f%n"</span>,Math.PI);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//不同国家的千位分隔符</span></span><br><span class="line">        System.out.format(Locale.FRANCE,<span class="string">"%,.2f%n"</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.US,<span class="string">"%,.2f%n"</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.UK,<span class="string">"%,.2f%n"</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><h4 id="保留一个字符的时候使用char"><a href="#保留一个字符的时候使用char" class="headerlink" title="保留一个字符的时候使用char"></a>保留一个字符的时候使用char</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">'1'</span>;<span class="comment">//字符1,而非数字1</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">'中'</span>;<span class="comment">//汉字字符</span></span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">'ab'</span>; <span class="comment">//只能放一个字符        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="char对应的封装类"><a href="#char对应的封装类" class="headerlink" title="char对应的封装类"></a>char对应的封装类</h4><p>char对应的封装类是Character.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line">        Character c = c1; <span class="comment">//自动装箱</span></span><br><span class="line">        c1 = c;<span class="comment">//自动拆箱   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Character常用方法"><a href="#Character常用方法" class="headerlink" title="Character常用方法"></a>Character常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.isLetter(<span class="string">'a'</span>));<span class="comment">//判断是否为字母</span></span><br><span class="line">        System.out.println(Character.isDigit(<span class="string">'a'</span>)); <span class="comment">//判断是否为数字</span></span><br><span class="line">        System.out.println(Character.isWhitespace(<span class="string">' '</span>)); <span class="comment">//是否是空白</span></span><br><span class="line">        System.out.println(Character.isUpperCase(<span class="string">'a'</span>)); <span class="comment">//是否是大写</span></span><br><span class="line">        System.out.println(Character.isLowerCase(<span class="string">'a'</span>)); <span class="comment">//是否是小写</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.toUpperCase(<span class="string">'a'</span>)); <span class="comment">//转换为大写</span></span><br><span class="line">        System.out.println(Character.toLowerCase(<span class="string">'A'</span>)); <span class="comment">//转换为小写</span></span><br><span class="line"> </span><br><span class="line">        String a = <span class="string">'a'</span>; <span class="comment">//不能够直接把一个字符转换成字符串</span></span><br><span class="line">        String a2 = Character.toString(<span class="string">'a'</span>); <span class="comment">//转换为字符串</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见转义"><a href="#常见转义" class="headerlink" title="常见转义"></a>常见转义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用空格无法达到对齐的效果"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ab def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a def"</span>);</span><br><span class="line">          </span><br><span class="line">        System.out.println(<span class="string">"使用\\t制表符可以达到对齐的效果"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\tdef"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ab\tdef"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a\tdef"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"一个\\t制表符长度是8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"12345678def"</span>);</span><br><span class="line">          </span><br><span class="line">        System.out.println(<span class="string">"换行符 \\n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\ndef"</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"单引号 \\'"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\'def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"双引号 \\\""</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\"def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"反斜杠本身 \\"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\\def"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h4><p>字符串即字符的组合，在Java中，字符串是一个类，所以我们见到的字符串都是对象<br>常见创建字符串手段： </p><ol><li><p>每当有一个<strong>字面值</strong>出现的时候，虚拟机就会创建一个字符串 </p></li><li><p>调用String的构造方法创建一个字符串对象 </p></li><li><p>通过+加号进行字符串拼接也会创建新的字符串对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String garen =<span class="string">"盖伦"</span>; <span class="comment">//字面值,虚拟机碰到字面值就会创建一个字符串对象</span></span><br><span class="line">        String teemo = <span class="keyword">new</span> String(<span class="string">"提莫"</span>); <span class="comment">//创建了两个字符串对象 </span></span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'崔'</span>,<span class="string">'斯'</span>,<span class="string">'特'</span>&#125;; </span><br><span class="line">        String hero = <span class="keyword">new</span> String(cs);<span class="comment">//  通过字符数组创建一个字符串对象 </span></span><br><span class="line">        String hero3 = garen + teemo;<span class="comment">//  通过+加号进行字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>String被修饰为final,所以是不能被继承的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyString str = <span class="keyword">new</span> MyString();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/*这里会报错，因为String不能被继承*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyString</span> <span class="keyword">extends</span> <span class="title">String</span></span>&#123;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h4><p>immutable 是指不可改变的<br>比如创建了一个字符串对象<br>String garen =”盖伦”;<br><strong>不可改变</strong>的具体含义是指：</p><ul><li>不能增加长度</li><li>不能减少长度</li><li>不能插入字符</li><li>不能删除字符</li><li>不能修改字符</li><li>一旦创建好这个字符串，里面的内容 <strong>永远</strong> 不能改变</li></ul><p>String 的表现就像是一个<strong>常量</strong>  </p><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>如果不使用字符串格式化，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用<strong>字符串格式化</strong>，就可以<strong>简洁明了</strong> </p><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><p>length方法返回当前字符串的长度<br>可以有长度为0的字符串,即空字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串名.length();</span><br></pre></td></tr></table></figure><h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><table><thead><tr><th align="center">关键字</th><th align="center">简介</th><th align="center">示例代码</th></tr></thead><tbody><tr><td align="center">charAt</td><td align="center">获取指定位置字符</td><td align="center">字符串.charAt(下标);</td></tr><tr><td align="center">toCharArray</td><td align="center">获取对应的字符数组</td><td align="center">字符串.toCharArray();</td></tr><tr><td align="center">subString</td><td align="center">截取子字符串</td><td align="center">字符串.subString(3);//截取从第3个开始的字符串<br>字符串.subString(3,5)////截取从第3个开始,到5-1结束的字符串</td></tr><tr><td align="center">split</td><td align="center">分隔</td><td align="center">字符串.split(“分隔符”);</td></tr><tr><td align="center">trim</td><td align="center">去掉首尾空格</td><td align="center">字符串.trim();</td></tr><tr><td align="center">toLowerCase<br>toUpperCase</td><td align="center">大小写</td><td align="center">字符串.toLowerCase()<br>字符串.toUpperCase()</td></tr><tr><td align="center">indexOf<br>lastIndexOf<br>contains</td><td align="center">定位</td><td align="center">字符串.indexOf(‘8’); //字符第一次出现的位置<br>字符串.lastIndexOf(“了”); //字符串最后出现的位置<br>字符串.indexOf(‘,’,5)); //从位置5开始，出现的第一次,的位置<br>字符串.contains(“击杀”); //是否包含字符串”击杀”</td></tr><tr><td align="center">replaceAll<br>replaceFirst</td><td align="center">替换</td><td align="center">字符串.replaceAll(“击杀”, “被击杀”); //替换所有的<br>字符串.replaceFirst(“,”,””);//只替换第一个</td></tr></tbody></table><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><h4 id="是否是同一个对象"><a href="#是否是同一个对象" class="headerlink" title="是否是同一个对象"></a>是否是同一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String str1 = <span class="string">"the light"</span>;</span><br><span class="line">        String str3 = <span class="string">"the light"</span>;</span><br><span class="line">        <span class="comment">/*一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象</span></span><br><span class="line"><span class="comment">  所以在str1会创建了一个新的字符串"the light"</span></span><br><span class="line"><span class="comment">  但是在str3，编译器发现已经存在现成的"the light"，那么就直接拿来使用，而没有进行重复创建</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        System.out.println( str1  ==  str3); </span><br><span class="line">        </span><br><span class="line">        String str2 = <span class="keyword">new</span> String(str1);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象,str1和str2的内容是一样的,但并不是同一个字符串对象.</span></span><br><span class="line">        System.out.println( str1  ==  str2);        </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内容是否相同"><a href="#内容是否相同" class="headerlink" title="内容是否相同"></a>内容是否相同</h4><p>使用equals进行字符串内容的比较，必须大小写一致<br>equalsIgnoreCase，忽略大小写判断内容是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"the light"</span>;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(str1);</span><br><span class="line">        String str3 = str1.toUpperCase();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象</span></span><br><span class="line">        System.out.println( str1  ==  str2);</span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//完全一样返回true</span></span><br><span class="line">        System.out.println(str1.equals(str3));<span class="comment">//大小写不一样，返回false</span></span><br><span class="line">        System.out.println(str1.equalsIgnoreCase(str3));<span class="comment">//忽略大小写的比较，返回true    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="是否以子字符串开始或者结束"><a href="#是否以子字符串开始或者结束" class="headerlink" title="是否以子字符串开始或者结束"></a>是否以子字符串开始或者结束</h4><p><code>startsWith //以...开始</code></p><p><code>endsWith //以...结束</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"the light"</span>;       </span><br><span class="line">        String start = <span class="string">"the"</span>;</span><br><span class="line">        String end = <span class="string">"Ight"</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(str1.startsWith(start));<span class="comment">//以...开始</span></span><br><span class="line">        System.out.println(str1.endsWith(end));<span class="comment">//以...结束         </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p>StringBuffer是可变长的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"let there "</span>;</span><br><span class="line"> </span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(str1); <span class="comment">//根据str1创建一个StringBuffer对象</span></span><br><span class="line">        sb.append(<span class="string">"be light"</span>); <span class="comment">//在最后追加  </span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        sb.delete(<span class="number">4</span>, <span class="number">10</span>);<span class="comment">//删除4-10之间的字符  </span></span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.insert(<span class="number">4</span>, <span class="string">"there "</span>);<span class="comment">//在4这个位置插入 there    </span></span><br><span class="line">        System.out.println(sb);       </span><br><span class="line">        sb.reverse(); <span class="comment">//反转     </span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="长度和容量"><a href="#长度和容量" class="headerlink" title="长度和容量"></a>长度和容量</h4><blockquote><p>为什么StringBuffer可以变长？<br>和String<strong>内部是一个字符数组</strong>一样，StringBuffer也维护了一个字符数组。 但是，这个字符数组，<strong>留有冗余长度</strong><br>比如说new StringBuffer(“the”)，其内部的字符数组的长度，是19，而不是3，这样调用插入和追加，在现成的数组的基础上就可以完成了。<br>如果追加的长度超过了19，就会分配一个新的数组，长度比原来多一些，把原来的数据复制到新的数组中，<strong>看上去</strong> 数组长度就变长了<br>length: “the”的长度 3<br>capacity: 分配的总空间 19</p><p><strong>注：</strong> 19这个数量，不同的JDK数量是不一样的</p></blockquote><p><strong>注：</strong> 19这个数量，不同的JDK数量是不一样的</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数字与字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_接口与继承</title>
      <link href="/2019/07/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/07/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>接口与继承</center><a id="more"></a><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在设计LOL的时候，进攻类英雄有两种，一种是进行物理系攻击，一种是进行魔法系攻击 </p><p>这时候，就可以使用<strong>接口</strong>来实现这个效果。 </p><p><strong>接口就像是一种约定</strong>，我们约定某些英雄是物理系英雄，那么他们就一定能够进行物理攻击。  </p><h4 id="物理攻击接口"><a href="#物理攻击接口" class="headerlink" title="物理攻击接口"></a>物理攻击接口</h4><p>创建一个接口 File-&gt;New-&gt;Interface<br>AD ，声明一个方法 physicAttack 物理攻击，但是没有方法体，是一个“<strong>空</strong>”方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">        <span class="comment">//物理伤害</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计一类英雄，能够使用物理攻击"><a href="#设计一类英雄，能够使用物理攻击" class="headerlink" title="设计一类英雄，能够使用物理攻击"></a>设计一类英雄，能够使用物理攻击</h4><p>  设计一类英雄，能够使用物理攻击，这类英雄在LOL中被叫做AD<br>类：ADHero<br>继承了Hero 类，所以继承了name,hp,armor等属性</p><p><strong>实现某个接口，就相当于承诺了某种约定</strong></p><p>所以，<strong>实现</strong>了<strong>AD</strong>这个接口，就<strong>必须</strong>提供AD接口中声明的方法<strong>physicAttack()</strong><br><strong>实现</strong>在语法上使用关键字 <strong>implements</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>魔法英雄同理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AP</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计一类英雄，既能进行物理攻击，又能进行魔法攻击"><a href="#设计一类英雄，既能进行物理攻击，又能进行魔法攻击" class="headerlink" title="设计一类英雄，既能进行物理攻击，又能进行魔法攻击"></a>设计一类英雄，既能进行物理攻击，又能进行魔法攻击</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//同时能进行物理和魔法伤害的英雄</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADAPHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span>,<span class="title">AP</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h3><h4 id="明确引用类型与对象类型的概念"><a href="#明确引用类型与对象类型的概念" class="headerlink" title="明确引用类型与对象类型的概念"></a>明确引用类型与对象类型的概念</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">        <span class="comment">/*这里引用(ad)的类型是ADHero,对象(new ADHero())的类型也是ADHero</span></span><br><span class="line"><span class="comment">          通常情况下,引用类型和对象类型一致*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子类转父类-向上转型"><a href="#子类转父类-向上转型" class="headerlink" title="子类转父类(向上转型)"></a>子类转父类(向上转型)</h4><p>所谓的转型，是指当<strong>引用类型</strong>和<strong>对象类型</strong>不一致的时候，才需要进行类型转换<br>类型转换有时候会成功，有时候会失败</p><p>到底能否转换成功？ 教大家一个很简单的判别办法<br><strong>把右边的当做左边来用</strong>，看说得通不</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hero h  = <span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">h = ad;</span><br></pre></td></tr></table></figure><p>左边的引用是<strong>英雄</strong>,右边的引用是<strong>物理英雄</strong></p><p>物理英雄是英雄么?是,所以能转</p><h4 id="父类转子类-向下转型"><a href="#父类转子类-向下转型" class="headerlink" title="父类转子类(向下转型)"></a>父类转子类(向下转型)</h4><p>父类转子类，有的时候行，有的时候不行，所以必须进行强制转换。<br>强制转换的意思就是 转换有风险，风险自担。</p><p><strong>可以强转的情况:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hero h =<span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">h = ad;</span><br><span class="line">ad = (ADHero)h;</span><br></pre></td></tr></table></figure><p>第3行，是子类转父类，一定可以的<br>第4行，就是父类转子类，所以要进行强转。<br>h这个引用，所指向的对象是ADHero, 所以第4行，就会把ADHero转换为ADHero，就能转换成功。</p><p><strong>不能强转的情况:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hero h =<span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">Support s =<span class="keyword">new</span> Support();</span><br><span class="line">h = s;</span><br><span class="line">ad = (ADHero)h;</span><br></pre></td></tr></table></figure><p>第4行，是子类转父类，是可以转换成功的<br>第5行，是把h引用所指向的对象 Support，转换为ad引用的类型ADHero。 从语义上讲，把物理攻击英雄，当成辅助英雄来用，说不通，所以会强制转换失败，并且抛<strong>异常</strong>.</p><h4 id="没有继承关系的两个类-互相转换"><a href="#没有继承关系的两个类-互相转换" class="headerlink" title="没有继承关系的两个类,互相转换"></a>没有继承关系的两个类,互相转换</h4><p>没有继承关系的两个类，互相转换，一定会失败<br>虽然ADHero和APHero都继承了Hero，但是彼此没有互相继承关系<br>“<strong>把魔法英雄当做物理英雄来用</strong>“,在语义上也是说不通的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">        APHero ap = <span class="keyword">new</span> APHero();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 没有继承关系的类型进行互相转换一定会失败，所以会出现编译错误</span></span><br><span class="line">        ad = (ADHero) ap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现了转换成接口-向上转型"><a href="#实现了转换成接口-向上转型" class="headerlink" title="实现了转换成接口(向上转型)"></a><strong>实现了转换成接口</strong>(向上转型)</h4><p>引用ad指向的对象是ADHero类型，这个类型实现了AD接口<br>10行： 把一个ADHero类型转换为AD接口<br>从语义上来讲，把一个ADHero当做AD来使用，而AD接口只有一个physicAttack方法，这就意味着转换后就有可能要调用physicAttack方法，而ADHero一定是有physicAttack方法的，所以转换是能成功的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">          </span><br><span class="line">        AD adi = ad;     </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口转换成实体类-向下转型"><a href="#接口转换成实体类-向下转型" class="headerlink" title="接口转换成实体类(向下转型)"></a>接口转换成实体类(向下转型)</h4><p>10行： ad引用指向ADHero， 而adi引用是接口类型：AD，实现类转换为接口，是向上转型，所以无需强制转换，并且一定能成功<br>12行: adi实际上是指向一个ADHero的，所以能够转换成功<br>14行： adi引用所指向的对象是一个ADHero，要转换为ADAPHero就会失败。 </p><p><strong>假设能够转换成功</strong>，那么就可以使用<strong>magicAttack</strong>方法，而adi引用所指向的对象<strong>ADHero是没有magicAttack</strong>方法的。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">         </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">            </span><br><span class="line">        AD adi = ad;</span><br><span class="line">   </span><br><span class="line">        ADHero adHero = (ADHero) adi;</span><br><span class="line">            </span><br><span class="line">        ADAPHero adapHero = (ADAPHero) adi;</span><br><span class="line">        adapHero.magicAttack();</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instanceof Hero判断一个引用所指的对象,是否是Hero类型,或者Hero的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">        APHero ap = <span class="keyword">new</span> APHero();</span><br><span class="line">         </span><br><span class="line">        Hero h1= ad;</span><br><span class="line">        Hero h2= ap;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//判断引用h1指向的对象，是否是ADHero类型</span></span><br><span class="line">        System.out.println(h1 <span class="keyword">instanceof</span> ADHero);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//判断引用h2指向的对象，是否是APHero类型</span></span><br><span class="line">        System.out.println(h2 <span class="keyword">instanceof</span> APHero);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//判断引用h1指向的对象，是否是Hero的子类型</span></span><br><span class="line">        System.out.println(h1 <span class="keyword">instanceof</span> Hero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>子类可以继承父类的方法</p><p>在继承后,重复提供该方法,就叫做仓发的重写,又叫覆盖overrride</p><p>写个父类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"购买"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品使用后，可以有效果"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个子类继承上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifePotion</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;<span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">"血瓶使用后，可以回血"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用重写的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Item i = <span class="keyword">new</span> Item();</span><br><span class="line">        i.effect();<span class="comment">//输出"物品使用后，可以有效果"</span></span><br><span class="line">         </span><br><span class="line">        LifePotion lp =<span class="keyword">new</span> LifePotion();</span><br><span class="line">        lp.effect();<span class="comment">//输出"血瓶使用后，可以回血"</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>操作符的多态</strong>:+可以作为算术运算符,也可以作为字符串连接</p><p><strong>类的多态</strong>:父类引用指向子类</p><h4 id="操作符的多态"><a href="#操作符的多态" class="headerlink" title="操作符的多态"></a>操作符的多态</h4><p>同一个操作符在不同情境下，具备不同的作用<br>如果+号两侧都是整型，那么<strong>+代表 数字相加</strong><br>如果+号两侧，任意一个是字符串，那么<strong>+代表字符串连接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> k = i+j; <span class="comment">//如果+号两侧都是整型，那么+代表 数字相加</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(k);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        String b = <span class="string">"5"</span>;</span><br><span class="line">         </span><br><span class="line">        String c = a+b; <span class="comment">//如果+号两侧，任意一个是字符串，那么+代表字符串连接</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">         </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h4><p>要实现类的多态,需要如下条件:</p><ol><li>父类(接口)引用指向子类对象</li><li>调用的方法有重写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"购买"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品使用后，可以有效果 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Item i1= <span class="keyword">new</span> LifePotion();</span><br><span class="line">        Item i2 = <span class="keyword">new</span> MagicPotion();</span><br><span class="line">        System.out.print(<span class="string">"i1  是Item类型，执行effect打印:"</span>);</span><br><span class="line">        i1.effect();</span><br><span class="line">        System.out.print(<span class="string">"i2也是Item类型，执行effect打印:"</span>);</span><br><span class="line">        i2.effect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifePotion</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"血瓶使用后，可以回血"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicPotion</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"蓝瓶使用后，可以回魔法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h4><p>当一个函数的参数为某个类型时,你可以直接将声明好的子类向上转型,传父类进去,而不必为每个子类重写函数.</p><h3 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h3><p>与<strong>重写</strong>类似,方法的重写是子类覆盖父类的<strong>对象方法</strong></p><p><strong>隐藏</strong>是子类覆盖对象的<strong>类方法</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//类方法，静态方法</span></span><br><span class="line">    <span class="comment">//通过类就可以直接调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hero battle win"</span>);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//隐藏父类的battleWin方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ad hero battle win"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero.battleWin();</span><br><span class="line">        ADHero.battleWin();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>super是<strong>指向父类的引用</strong>，如果构造方法没有显示地调用父类的构造方法，那么编译器会自动为它加上一个默认的super()方法调用。如果父类由没有默认的无参构造方法，编译器就会报错，super()语句必须是构造方法的第一个子句。</p><p>构造方法入栈的顺序是:子类–&gt;父类–&gt;父类的父类……</p><p>所以方法的调用是从最初的父类不断向下调用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用父类的有参构造方法</span></span><br><span class="line"><span class="keyword">super</span>(参数);</span><br><span class="line"><span class="comment">//调用父类属性</span></span><br><span class="line"><span class="keyword">super</span>.父类属性</span><br><span class="line"><span class="comment">//调用父类方法</span></span><br><span class="line"><span class="keyword">super</span>.fatherClassMethod()</span><br></pre></td></tr></table></figure><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>所有类的父类……</p><ul><li>声明一个类时默认继承了Object类</li><li><strong>toString()</strong>       转字符串</li><li><strong>finallize()</strong>       垃圾回收方法,不是开发人与主动调用,而是由虚拟机JVM调用.</li><li><strong>equals()</strong>          用于判断<strong>两个对象内容是否相同</strong></li><li><strong>==</strong>                     用于判断<strong>两个对象是否相同</strong>,更准确的讲,用于判断两个引用是否指向同一个对象.</li><li><strong>hashCode()</strong>    用于返回一个对象的额哈希值</li><li><strong>getClass()</strong>       用于获取一个对象的类对象.</li><li>线程同步相关方法<ul><li><strong>wait()</strong></li><li><strong>notify()</strong></li><li><strong>notifyAll()</strong></li></ul></li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final修饰类，方法，基本类型变量，引用的时候分别有不同的意思。</p><h4 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h4><p>当类被final被final修饰时,表示该类不能被继承.</p><p>其子类会出想编译错误.</p><h4 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h4><p>当方法被final修饰后,该方法在其子类中不能被重写.</p><h4 id="final修饰基本类型变量"><a href="#final修饰基本类型变量" class="headerlink" title="final修饰基本类型变量"></a>final修饰基本类型变量</h4><p>当基本变量类型被final修饰时,表示改变了只能被赋值一次.</p><h4 id="final修饰引用"><a href="#final修饰引用" class="headerlink" title="final修饰引用"></a>final修饰引用</h4><p>引用被final修饰表示,该引用只有一次指向对象的机会</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>在类中声明一个方法,这个方法没有实体,是一个”空”方法</p><p>这样的方法叫抽象方法,用修饰符”abstract”</p><p>当一个类有抽象方法时,该类必须被声明为抽象类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;</span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法attack</span></span><br><span class="line">    <span class="comment">// Hero的子类会被要求实现attack方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        physicAttack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注:当父类为抽象类,且有抽象方法时,<strong>子类必须提供</strong>不一样的attack方法实现.</p></blockquote><h4 id="抽象类可以没有抽象方法"><a href="#抽象类可以没有抽象方法" class="headerlink" title="抽象类可以没有抽象方法"></a>抽象类可以没有抽象方法</h4><p>类可以在不提供抽象方法的前提下，声明为抽象类<br>一旦一个类被声明为抽象类，就不能够被直接实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;     </span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//虽然没有抽象方法，但是一旦被声明为了抽象类，就不能够直接被实例化</span></span><br><span class="line">        Hero h= <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><p>区别1：<br>子类只能继承一个抽象类，不能继承多个<br>子类可以实现<strong>多个</strong>接口<br>区别2：<br>抽象类可以定义<br>public,protected,package,private<br>静态和非静态属性<br>final和非final属性<br>但是接口中声明的属性，只能是<br>public<br>静态<br>final的<br>即便没有显式的声明<br><strong>注:</strong> 抽象类和接口都可以有实体方法。 接口中的实体方法，叫做默认方法</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类分为四种:</p><ul><li>非静态内部类</li><li>静态内部类</li><li>匿名类</li><li>本地类</li></ul><h4 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h4><blockquote><p><strong>定义:</strong>可以直接在一个类里面定义.</p><p><strong>语法:</strong>new 外部类().new 内部类()</p><p><strong>注意:</strong>非静态内部类,可以直接访问其父类的private属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名 </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span></span><br><span class="line">    <span class="comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BattleScore</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> kill;</span><br><span class="line">        <span class="keyword">int</span> die;</span><br><span class="line">        <span class="keyword">int</span> assit;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">legendary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (kill &gt;= <span class="number">8</span>)</span><br><span class="line">                System.out.println(name + <span class="string">"超神！"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(name + <span class="string">"尚未超神！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen = <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="comment">// 实例化内部类</span></span><br><span class="line">        <span class="comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">        <span class="comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span></span><br><span class="line">        BattleScore score = garen.new BattleScore();</span><br><span class="line">        score.kill = <span class="number">9</span>;</span><br><span class="line">        score.legendary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><blockquote><p><strong>声明:</strong>静态内部类的实例化,不需要外部类的实例为基础.</p><p><strong>语法:</strong>new 外部类.静态内部类()</p><p><strong>注意:</strong>因为没有一个外部类的实例，所以在静态内部类里面<strong>不可以访问外部类的实例属性和方法</strong><br>除了可以访问外部类的<strong>私有静态成员外</strong>，静态内部类和普通类没什么大的区别</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"battle win"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//敌方的水晶</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnemyCrystal</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hp=<span class="number">5000</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果水晶的血量为0，则宣布胜利</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkIfVictory</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(hp==<span class="number">0</span>)&#123;</span><br><span class="line">                Hero.battleWin();</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">//静态内部类不能直接访问外部类的对象属性</span></span><br><span class="line">                System.out.println(name + <span class="string">" win this game"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化静态内部类</span></span><br><span class="line">        Hero.EnemyCrystal crystal = <span class="keyword">new</span> Hero.EnemyCrystal();</span><br><span class="line">        crystal.checkIfVictory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h4><blockquote><p>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练<br>通常情况下，要使用一个接口或者抽象类，都必须创建一个子类</p><p>有的时候，为了快速使用，直接实例化一个抽象类，并“<strong>当场</strong>”实现其抽象方法。<br>既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。<br>这样的类，叫做匿名类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        ADHero adh=<span class="keyword">new</span> ADHero();</span><br><span class="line">        <span class="comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span></span><br><span class="line">        adh.attack();</span><br><span class="line">        System.out.println(adh);</span><br><span class="line">          </span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero()&#123;</span><br><span class="line">            <span class="comment">//当场实现attack方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"新的进攻手段"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        h.attack();</span><br><span class="line">        <span class="comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名     </span></span><br><span class="line">        System.out.println(h);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地类"><a href="#本地类" class="headerlink" title="本地类"></a><strong>本地类</strong></h4><p>本地类可以理解为有名字的匿名类<br>内部类与匿名类不一样的是，内部类必须声明在成员的位置，即与属性和方法平等的位置。<br>本地类和匿名类一样，直接声明在代码块里面，可以是主方法，for循环里等等地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名    </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量  </span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲   </span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//与匿名类的区别在于，本地类有了自定义的类名</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">SomeHero</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println( name+ <span class="string">" 新的进攻手段"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        SomeHero h  =<span class="keyword">new</span> SomeHero();</span><br><span class="line">        h.name =<span class="string">"地卜师"</span>;</span><br><span class="line">        h.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在匿名类中使用外部的局部变量"><a href="#在匿名类中使用外部的局部变量" class="headerlink" title="在匿名类中使用外部的局部变量"></a>在匿名类中使用外部的局部变量</h4><p>在匿名类中使用外部的局部变量，外部的局部变量必须修饰为final</p><p>为什么要声明为final，其机制比较复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//在匿名类中使用外部的局部变量damage 必须修饰为final</span></span><br><span class="line">        <span class="keyword">int</span> damage = <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//这里使用本地类AnonymousHero来模拟匿名类的隐藏属性机制</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//事实上的匿名类，会在匿名类里声明一个damage属性，并且使用构造方法初始化该属性的值</span></span><br><span class="line">        <span class="comment">//在attack中使用的damage，真正使用的是这个内部damage，而非外部damage</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//假设外部属性不需要声明为final</span></span><br><span class="line">        <span class="comment">//那么在attack中修改damage的值，就会被暗示为修改了外部变量damage的值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//但是他们俩是不同的变量，是不可能修改外部变量damage的</span></span><br><span class="line">        <span class="comment">//所以为了避免产生误导，外部的damage必须声明为final,"看上去"就不能修改了</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AnonymousHero</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> damage;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">AnonymousHero</span><span class="params">(<span class="keyword">int</span> damage)</span></span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.damage = damage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                damage = <span class="number">10</span>;</span><br><span class="line">                System.out.printf(<span class="string">"新的进攻手段，造成%d点伤害"</span>,<span class="keyword">this</span>.damage );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        Hero h = <span class="keyword">new</span> AnonymousHero(damage);       </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>在jdk8中，已经不需要强制修饰成final了，如果没有写final，不会报错，因为编译器<strong>偷偷的</strong>帮你加上了看不见的final  </p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><h4 id="什么是默认方法"><a href="#什么是默认方法" class="headerlink" title="什么是默认方法"></a>什么是默认方法</h4><p>  默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法</p><p>Mortal 这个接口，增加了一个<strong>默认方法</strong> revive，这个方法有实现体，并且被声明为了<strong>default</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mortal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">die</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"本英雄复活了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么会有默认方法"><a href="#为什么会有默认方法" class="headerlink" title="为什么会有默认方法"></a>为什么会有默认方法</h4><p>假设没有默认方法这种机制，那么如果要为Mortal增加一个新的方法revive,那么所有实现了Mortal接口的类，都需要做改动。</p><p>但是引入了默认方法后，原来的类，不需要做任何改动，并且还能<strong>得到</strong>这个默认方法</p><p>通过这种手段，就能够很好的扩展新的类，并且做到不影响原来的类</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 继承与接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_类和对象</title>
      <link href="/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>类和对象</center><a id="more"></a><p><strong>引用:</strong>如果一个变量类型是类类型,而非基本数据类型,那么该变量又叫做引用.</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="引用和指向"><a href="#引用和指向" class="headerlink" title="引用和指向"></a>引用和指向</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Hero();</span><br></pre></td></tr></table></figure><p>代表<strong>创建</strong>了一个Hero对象<br>但是也仅仅是创建了一个对象，没有办法访问它<br>为了访问这个对象，会使用<strong>引用</strong>来<strong>代表</strong>这个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hero h = <span class="keyword">new</span> Hero();</span><br></pre></td></tr></table></figure><p>h这个变量是Hero类型，又叫做引用<br>=的意思指的h这个引用<strong>代表</strong>右侧创建的对象<br>“<strong>代表</strong>” 在面向对象里，又叫做“<strong>指向</strong>”</p><h4 id="多个引用-一个对象"><a href="#多个引用-一个对象" class="headerlink" title="多个引用,一个对象"></a>多个引用,一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用一个引用来指向这个对象</span></span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        Hero h2 = h1;  <span class="comment">//h2指向h1所指向的对象</span></span><br><span class="line">        Hero h3 = h1;</span><br><span class="line">        Hero h4 = h1;</span><br><span class="line">        Hero h5 = h4;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//h1,h2,h3,h4,h5 五个引用，都指向同一个对象     </span></span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用有多个，但是对象只有一个。<br>在这个例子里，所有引用都指向了同一个对象。<br>对象就像 “房产”， 引用就像”房产证”<br>房产证的复印件可以有多张，但是真正的”房产” 只有这么一处</p><h4 id="一个引用-多个对象"><a href="#一个引用-多个对象" class="headerlink" title="一个引用,多个对象"></a>一个引用,多个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           Hero garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">           garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个引用只能指向一个对象,当这个引用指向其他对象,且没有新的引用指向该对象时,就无法访问该对象,那么该对象就变得没有意义.</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在LOL中，武器是物品的一种，也是有名称和价格的<br>所以在设计类的时候，可以让武器继承物品，从而继承名称和价格属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//物品类(父类)</span></span><br><span class="line"><span class="comment">//物品类Item有属性name,price</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//武器类Weapon(不继承)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">int</span> damage;<span class="comment">//攻击力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承(虽然Weapon1自己没有设计name和price,但是通过继承Item类，也具备了name和price属性</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon1</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> damage; <span class="comment">//攻击力</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weapon infinityEdge = <span class="keyword">new</span> Weapon();</span><br><span class="line">        infinityEdge.damage = <span class="number">65</span>; <span class="comment">//damage属性在类Weapon中新设计的</span></span><br><span class="line">         </span><br><span class="line">        infinityEdge.name = <span class="string">"无尽之刃"</span>;<span class="comment">//name属性，是从Item中继承来的，就不需要重复设计了</span></span><br><span class="line">        infinityEdge.price = <span class="number">3600</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p><strong>方法重载:</strong>指的是方法名一样,但参数类型不一样</p><p>如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 进行了一次攻击 ，但是不确定打中谁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"对"</span> + h1.name + <span class="string">"进行了一次攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"同时对"</span> + h1.name + <span class="string">"和"</span> + h2.name + <span class="string">"进行了攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero bh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        bh.name = <span class="string">"赏金猎人"</span>;</span><br><span class="line"> </span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        Hero h2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h2.name = <span class="string">"提莫"</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法名是一样的，但是参数类型不一样<br>在调用方法attack的时候，会根据传递的参数类型以及数量，自动调用对应的方法</p><h4 id="可变数量的参数"><a href="#可变数量的参数" class="headerlink" title="可变数量的参数"></a>可变数量的参数</h4><p>采用可变数量参数,<strong>只需要设计一个方法</strong>,在方法里,使用操作数组的方式操作参数heros即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 进行了一次攻击 ，但是不确定打中谁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 可变数量的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero... heros)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heros.length; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" 攻击了 "</span> + heros[i].name);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero bh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        bh.name = <span class="string">"赏金猎人"</span>;</span><br><span class="line"> </span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        Hero h2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h2.name = <span class="string">"提莫"</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>通过一个类构造一个对象,这个过程叫做<strong>实例化</strong></p><p>实例化是通过调用<strong>构造方法</strong>(又叫做<strong>构造器</strong>)实现的</p><h4 id="什么是构造方法"><a href="#什么是构造方法" class="headerlink" title="什么是构造方法"></a>什么是构造方法</h4><p>方法名和类名一样（包括大小写）<br><strong>没有返回类型</strong><br>实例化一个对象的时候，必然调用构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;</span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 方法名和类名一样（包括大小写）</span></span><br><span class="line">    <span class="comment">// 没有返回类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实例化一个对象的时候，必然调用构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化一个对象的时候，必然调用构造方法</span></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式构造方法"><a href="#隐式构造方法" class="headerlink" title="隐式构造方法"></a>隐式构造方法</h4><p>如果创建类是不写构造方法,则默认创建一个无参构造方法.</p><h4 id="提供有参构造方法"><a href="#提供有参构造方法" class="headerlink" title="提供有参构造方法"></a>提供有参构造方法</h4><p>一旦提供了一个有参的构造方法<br>同时又<strong>没有显式</strong>的提供一个无参的构造方法<br>那么默认的无参的构造方法，就“木有了“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//有参的构造方法</span></span><br><span class="line">    <span class="comment">//默认的无参的构造方法就失效了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String heroname)</span></span>&#123; </span><br><span class="line">        name = heroname;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>);    </span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(); <span class="comment">//无参的构造方法“木有了”</span></span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造方法重载"><a href="#构造方法重载" class="headerlink" title="构造方法重载"></a>构造方法重载</h4><p>和普通方法一样，构造方法也可以重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲  </span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">       </span><br><span class="line">    <span class="comment">//带一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String heroname)</span></span>&#123; </span><br><span class="line">        name = heroname;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//带两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String heroname,<span class="keyword">float</span> herohp)</span></span>&#123; </span><br><span class="line">        name = heroname;</span><br><span class="line">        hp = herohp;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>); </span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><strong>this</strong>这个关键字，相当于普通话里的“<strong>我</strong>” <strong>this即代表当前对象</strong></p><h4 id="通过this访问属性"><a href="#通过this访问属性" class="headerlink" title="通过this访问属性"></a>通过this访问属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名  </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//参数名和属性名一样</span></span><br><span class="line">    <span class="comment">//在方法体中，只能访问到参数name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName1</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//为了避免setName1中的问题，参数名不得不使用其他变量名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName2</span><span class="params">(String heroName)</span></span>&#123;</span><br><span class="line">        name = heroName;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//通过this访问属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName3</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//name代表的是参数name</span></span><br><span class="line">        <span class="comment">//this.name代表的是属性name</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero  h =<span class="keyword">new</span> Hero();</span><br><span class="line">         </span><br><span class="line">        h.setName1(<span class="string">"teemo"</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">         </span><br><span class="line">        h.setName2(<span class="string">"garen"</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">         </span><br><span class="line">        h.setName3(<span class="string">"死歌"</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过this调用其他构造方法"><a href="#通过this调用其他构造方法" class="headerlink" title="通过this调用其他构造方法"></a>通过this调用其他构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名  </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量   </span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//带一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个参数的构造方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//带两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">        System.out.println(<span class="string">"两个参数的构造方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">        System.out.println(teemo.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>因为变量分为<strong>基本类型</strong>和<strong>类类型</strong></p><p>参数也是变量，所以传参分为<br><strong>基本类型传参</strong><br><strong>类类型传参</strong></p><h4 id="基本类型传参"><a href="#基本类型传参" class="headerlink" title="基本类型传参"></a>基本类型传参</h4><p>在方法内，无法修改方法外的基本类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;      </span><br><span class="line">    String name; <span class="comment">//姓名    </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量   </span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲   </span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">huixue</span><span class="params">(<span class="keyword">int</span> xp)</span></span>&#123;</span><br><span class="line">        hp = hp + xp;</span><br><span class="line">        <span class="comment">//回血完毕后，血瓶=0</span></span><br><span class="line">        xp=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">        <span class="comment">//血瓶，其值是100</span></span><br><span class="line">        <span class="keyword">int</span> xueping = <span class="number">100</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//提莫通过这个血瓶回血        </span></span><br><span class="line">        teemo.huixue(xueping);         </span><br><span class="line">        System.out.println(xueping);         </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用与"><a href="#引用与" class="headerlink" title="引用与="></a>引用与=</h4><p>如果一个变量是基本类型,比如 int hp = 50;,我们就直接管hp叫变量,<strong>=表示赋值的意思</strong>。如果一个变量是类类型,比如 Hero h = new Hero();,我们就管h叫做<strong>引用</strong>。<strong>=不再是赋值的意思</strong>,<strong>=表示指向的意思</strong><br>比如 Hero h = new Hero();<br>这句话的意思是:引用h，指向一个Hero对象</p><h4 id="类类型传参"><a href="#类类型传参" class="headerlink" title="类类型传参"></a>类类型传参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">float</span> hp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 攻击一个英雄，并让他掉damage点血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero hero, <span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        hero.hp = hero.hp - damage;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo = <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>, <span class="number">383</span>);</span><br><span class="line">        Hero garen = <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>, <span class="number">616</span>);</span><br><span class="line">        garen.attack(teemo, <span class="number">100</span>);</span><br><span class="line">        System.out.println(teemo.hp);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包:package</p><p>把比较接近的类,规划在一个包下.</p><h4 id="使用其他包下的类-必须使用import"><a href="#使用其他包下的类-必须使用import" class="headerlink" title="使用其他包下的类,必须使用import"></a>使用其他包下的类,必须使用import</h4><p>使用同一个包下的其他类，直接使用即可<br>但是要使用其他包下的类，必须import</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Weapon类在其他包里，使用必须进行import</span></span><br><span class="line"><span class="keyword">import</span> property.Weapon;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//装备一把武器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equip</span><span class="params">(Weapon w)</span></span>&#123;    </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>成员变量有四种修饰符:</p><p><strong>private</strong> 私有的<br><strong>package</strong>/friendly/default 不写<br><strong>protected</strong> 受保护的<br><strong>public</strong> 公共的</p><h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><p><strong>自身：</strong>指的是Hero自己<br><strong>同包子类：</strong>ADHero这个类是Hero的子类，并且和Hero处于<strong>同一个包下</strong><br><strong>不同包子类：</strong>Support这个类是Hero的子类，但是在<strong>另一个包下</strong><br><strong>同包类：</strong> GiantDragon 这个类和Hero是<strong>同一个包</strong>，但是彼此<strong>没有继承关系</strong><br><strong>其他类：</strong>Item这个类，<strong>在不同包</strong>，也没有继承关系的类</p><h4 id="访问修饰符修饰后的关系"><a href="#访问修饰符修饰后的关系" class="headerlink" title="访问修饰符修饰后的关系"></a>访问修饰符修饰后的关系</h4><table><thead><tr><th></th><th align="center">自身</th><th align="center">同包子类</th><th align="center">不同包子类</th><th align="center">同包类</th><th align="center">其他类</th></tr></thead><tbody><tr><td><strong>private 私有类</strong></td><td align="center">可访问</td><td align="center">不继承</td><td align="center">不继承</td><td align="center">不可访问</td><td align="center">不可访问</td></tr><tr><td><strong>package/friendly/default 不写</strong></td><td align="center">可访问</td><td align="center">继承</td><td align="center">不继承</td><td align="center">可访问</td><td align="center">不可访问</td></tr><tr><td><strong>protected 受保护的</strong></td><td align="center">可访问</td><td align="center">继承</td><td align="center">继承</td><td align="center">可访问</td><td align="center">不可访问</td></tr><tr><td><strong>public 公共的</strong></td><td align="center">可访问</td><td align="center">继承</td><td align="center">继承</td><td align="center">可访问</td><td align="center">可访问</td></tr></tbody></table><h4 id="什么情况使用修饰符"><a href="#什么情况使用修饰符" class="headerlink" title="什么情况使用修饰符?"></a>什么情况使用修饰符?</h4><p>  从作用域来看，public能够使用所有的情况。 但是大家在工作的时候，又不会真正全部都使用public,那么到底什么情况该用什么修饰符呢？</p><ol><li>属性通常使用private封装起来</li><li>方法一般使用public用于被调用</li><li>会被子类继承的方法，通常使用protected</li><li>package用的不多，一般新手会用package,因为还不知道有修饰符这个东西</li></ol><p>再就是<strong>作用范围最小原则</strong><br>简单说，能用private就用private，不行就放大一级，用package,再不行就用protected，最后用public。 这样就能把数据尽量的封装起来，没有必要<strong>露出来的</strong>，就不用<strong>露出来</strong>了  </p><h3 id="类属型"><a href="#类属型" class="headerlink" title="类属型"></a>类属型</h3><p>当一个属性被<strong>static</strong>修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong><br>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong><br><strong>与对象属性对比：</strong><br>不同对象的 对象属性 的值都可能不一样。<br>但是所有对象的类属性的值，都是一样的</p><h4 id="访问类属型"><a href="#访问类属型" class="headerlink" title="访问类属型"></a>访问类属型</h4><ol><li><p>对象.类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temmo.copyright</span><br></pre></td></tr></table></figure></li><li><p>类.类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hero.copyright</span><br></pre></td></tr></table></figure></li></ol><p>#### </p><h4 id="什么时候使用对象属性-什么时候使用类属型"><a href="#什么时候使用对象属性-什么时候使用类属型" class="headerlink" title="什么时候使用对象属性,什么时候使用类属型"></a>什么时候使用对象属性,什么时候使用类属型</h4><p>  如果一个属性，每个对象都不一样，比如name，这样的属性就应该设计为对象属性，因为它是<strong>跟着对象走的</strong>，每个对象的name都是不同的</p><p>如果一个属性，<strong>所有的对象都共享</strong>，都是一样的，那么就应该设计为类属性。比如血量上限，所有的英雄的血量上限都是 9999，不会因为英雄不同，而取不同的值。 这样的属性，就适合设计为类属性</p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p><strong>类方法：</strong> 又叫做静态方法 </p><p><strong>对象方法：</strong> 又叫实例方法，非静态方法 </p><p>访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上<br>访问类方法，<strong>不需要对象</strong>的存在，直接就访问  </p><h4 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h4><ol><li><p>对象.类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temmo.battleWin();</span><br></pre></td></tr></table></figure></li><li><p>类.类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hero.battleWin();</span><br></pre></td></tr></table></figure></li></ol><h4 id="什么时候设计对象方法-什么时候设计类方法"><a href="#什么时候设计对象方法-什么时候设计类方法" class="headerlink" title="什么时候设计对象方法,什么时候设计类方法"></a>什么时候设计对象方法,什么时候设计类方法</h4><p>如果在某一个方法里，调用了对象属性，比如</p><p>如果一个方法，没有调用任何对象属性，那么就可以考虑设计为类方法，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name属性是对象属性，只有存在一个具体对象的时候，name才有意义。 如果方法里访问了对象属性，那么这个方法，就必须设计为对象方法</p><p>如果一个方法，没有调用任何对象属性，那么就可以考虑设计为类方法，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGameDuration</span><span class="params">()</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"已经玩了10分50秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printGameDuration 打印当前玩了多长时间了，不和某一个具体的英雄关联起来，所有的英雄都是一样的。 这样的方法，更带有色彩就像取随机数一样，random()是一个功能用途的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.random()</span><br></pre></td></tr></table></figure><h3 id="属性初始化"><a href="#属性初始化" class="headerlink" title="属性初始化"></a>属性初始化</h3><h4 id="对象属性初始化"><a href="#对象属性初始化" class="headerlink" title="对象属性初始化"></a>对象属性初始化</h4><p>对象属性初始化有3种</p><ol><li><p>声明该属性的时候初始化 </p></li><li><p>构造方法中初始化</p></li><li><p>初始化块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"some hero"</span>; <span class="comment">//声明该属性的时候初始化</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> maxHP;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        maxHP = <span class="number">200</span>; <span class="comment">//初始化块</span></span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hp = <span class="number">100</span>; <span class="comment">//构造方法中初始化    </span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="类属型初始化"><a href="#类属型初始化" class="headerlink" title="类属型初始化"></a>类属型初始化</h4><p>类属性初始化有2种</p><ol><li>声明该属性的时候初始化</li><li>静态初始化块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> maxHP;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//物品栏的容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> itemCapacity=<span class="number">8</span>; <span class="comment">//声明的时候 初始化</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        itemCapacity = <span class="number">6</span>;<span class="comment">//静态初始化块 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;   </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Hero.itemCapacity);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>当一个类只能被实例化一次时,就要用单例模式.</p><h4 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式又叫做 Singleton模式，指的是一个类，在一个JVM里，只有一个实例存在。</p><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h4><p>大龙应该只有一只，通过私有化其构造方法，使得外部无法通过new得到新的实例。<br>大龙提供了一个public static的getInstance方法，外部调用者通过该方法获取12行定义的对象，而且每一次都是获取同一个对象。 从而达到单例的目的。<br>这种单例模式又叫做<strong>饿汉式</strong>单例模式，无论如何都会创建一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取12行定义的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//GiantDragon g = new GiantDragon();</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象   </span></span><br><span class="line">        GiantDragon g1 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g2 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g3 = GiantDragon.getInstance();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h4><p><strong>懒汉式</strong>单例模式与<strong>饿汉式</strong>单例模式不同，只有在调用getInstance的时候，才会创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//public static 方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回 instance指向的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//      GiantDragon g = new GiantDragon();</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象</span></span><br><span class="line">         </span><br><span class="line">        GiantDragon g1 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g2 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g3 = GiantDragon.getInstance();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两种模式的适应情况"><a href="#两种模式的适应情况" class="headerlink" title="两种模式的适应情况"></a>两种模式的适应情况</h4><p>  <strong>饿汉式</strong>是立即加载的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p><strong>懒汉式</strong>，是延迟加载的方式，只有使用的时候才会加载。 并且有线程安全的考量<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式  </p><h4 id="单例模式三元素"><a href="#单例模式三元素" class="headerlink" title="单例模式三元素"></a>单例模式三元素</h4><p><strong>面试考点</strong>:什么是单例模式?</p><p>回答的时候要答到:</p><ol><li>构造方法私有化</li><li>静态属性指向实例</li><li>public static的 getInstance方法，返回第二步的静态属性</li></ol><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><h4 id="预先定义的常量"><a href="#预先定义的常量" class="headerlink" title="预先定义的常量"></a>预先定义的常量</h4><p>枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常量<br>比如设计一个枚举类型 季节，里面有4种常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season&#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用枚举变量的好处"><a href="#使用枚举变量的好处" class="headerlink" title="使用枚举变量的好处"></a>使用枚举变量的好处</h4><p>假设在使用switch的时候，不是使用枚举，而是使用int，而int的取值范围就不只是1-4，有可能取一个超出1-4之间的值，这样判断结果就似是而非了。（因为只有4个季节）</p><p>但是使用枚举，就能把范围死死的限定在这四个当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> season = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"春天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">"夏天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">"秋天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">"冬天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历枚举"><a href="#遍历枚举" class="headerlink" title="遍历枚举"></a>遍历枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Season s : Season.values()) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_数组</title>
      <link href="/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%95%B0%E7%BB%84/"/>
      <url>/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>数组</center><a id="more"></a><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p><strong>数组</strong>:数组是一个固定长度的,包含了相同类型数据的容器.</p><h4 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>int[] a;</strong>         声明了一个数组变量。<br><strong>[]</strong>                  表示该变量是一个数组<br><strong>int</strong>                表示数组里的每一个元素都是一个整数<br><strong>a</strong>                  是变量名<br>但是，仅仅是这一句<strong>声明，不会创建数组</strong></p><p>有时候也会写成int a[]; 没有任何区别，就是你看哪种顺眼的问题</p><h4 id="创建数组-1"><a href="#创建数组-1" class="headerlink" title="创建数组"></a>创建数组</h4><p>创建数组的时候，要指明数组的长度。<br><strong>new int[5]</strong><br><strong>引用概念：</strong><br>如果变量代表一个数组，比如a,我们把a叫做<strong>引用</strong><br>与基本类型不同<br>int c = 5; 这叫给c<strong>赋值</strong>为5<br>声明一个引用 int[] a;<br>a = new int[5];<br>让a这个引用，<strong>指向</strong>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个引用</span></span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">        <span class="comment">//创建一个长度是5的数组，并且使用引用a指向该数组</span></span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">//声明的同时，指向一个数组        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h4><p>数组下标<strong>基0</strong>    下标0，代表数组里的第一个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">         </span><br><span class="line">        a[<span class="number">0</span>]= <span class="number">1</span>;  <span class="comment">//下标0，代表数组里的第一个数</span></span><br><span class="line">        a[<span class="number">1</span>]= <span class="number">2</span>;</span><br><span class="line">        a[<span class="number">2</span>]= <span class="number">3</span>;</span><br><span class="line">        a[<span class="number">3</span>]= <span class="number">4</span>;</span><br><span class="line">        a[<span class="number">4</span>]= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">         </span><br><span class="line">        System.out.println(a.length); <span class="comment">//打印数组的长度</span></span><br><span class="line">         </span><br><span class="line">        a[<span class="number">4</span>]=<span class="number">100</span>; <span class="comment">//下标4，实质上是“第5个”，即最后一个</span></span><br><span class="line">        a[<span class="number">5</span>]=<span class="number">101</span>; <span class="comment">//下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异常</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>.length属性</strong>用于访问一个数组的长度<br>数组访问下标范围是0到长度-1<br>一旦超过这个范围,就会产生数组下标越界异常</p><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><h4 id="分配空间与赋值分配进行"><a href="#分配空间与赋值分配进行" class="headerlink" title="分配空间与赋值分配进行"></a>分配空间与赋值分配进行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">//分配了长度是5的数组，但是没有赋值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//没有赋值，那么就会使用默认值</span></span><br><span class="line">        <span class="comment">//作为int类型的数组，默认值是0</span></span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//进行赋值</span></span><br><span class="line">     </span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">101</span>;</span><br><span class="line">        a[<span class="number">2</span>] = <span class="number">103</span>;</span><br><span class="line">        a[<span class="number">3</span>] = <span class="number">120</span>;</span><br><span class="line">        a[<span class="number">4</span>] = <span class="number">140</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分配空间-同时赋值"><a href="#分配空间-同时赋值" class="headerlink" title="分配空间,同时赋值"></a>分配空间,同时赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//写法一： 分配空间同时赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写法二： 省略了new int[],效果一样</span></span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//写法三：同时分配空间，和指定内容</span></span><br><span class="line">        <span class="comment">//在这个例子里，长度是3，内容是5个，产生矛盾了</span></span><br><span class="line">        <span class="comment">//所以如果指定了数组的内容，就不能同时设置数组的长度</span></span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><blockquote><p> <strong>选择法排序的思路：</strong> </p><p><strong>把第一位</strong>和其他所有的进行比较，只要比第一位小的，就换到第一个位置来<br>比较完后，<strong>第一位就是最小的</strong><br>然后再从<strong>第二位</strong>和剩余的其他所有进行比较，只要比第二位小，就换到第二个位置来<br>比较完后，<strong>第二位就是第二小的</strong> </p></blockquote><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">//选择法排序</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">//第一步： 把第一位和其他所有位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现其他位置的数据比第一位小，就进行交换</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">0</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[<span class="number">0</span>];</span><br><span class="line">                a[<span class="number">0</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最小的一个数，到了最前面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二步： 把第二位的和剩下的所有位进行比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[<span class="number">1</span>];</span><br><span class="line">                a[<span class="number">1</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二小的数，到了第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//移动的位置是从0 逐渐增加的</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j+<span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;a[j])&#123;  </span><br><span class="line">                    <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                    a[j] = a[i];</span><br><span class="line">                    a[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><blockquote><p><strong>冒泡法排序的思路：</strong><br>第一步：从第一位开始，把相邻两位进行比较<br>如果发现前面的比后面的大，就把大的数据交换在后面，循环比较完毕后，<strong>最后一位就是最大的</strong><br>第二步： 再来一次，只不过不用比较最后一位 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">//冒泡法排序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//第一步：从第一位开始，把相邻两位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现前面的比后面的大，就把大的数据交换在后面</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最大的到了最后面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//第二步： 再来一次，只不过不用比较最后一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二大的到了倒数第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//后边界在收缩</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-j-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                    a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                    a[i+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>增强型for循环在遍历一个数组的时候会更加快捷.</p><blockquote><p>注:增强for循环只能用来取值,却不能修改数组里的值.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> values [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//常规遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> each = values[i];</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//增强型for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> each : values) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>数组的长度是不可变的,一旦分配好空间,是多长,就多长,不能增加也不能减少.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(src,srcPos,dest,destPos,length)</span><br></pre></td></tr></table></figure><p>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//分配了长度是3的空间，但是没有赋值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//通过数组赋值把，a数组的前3位赋值到b数组</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法一： for循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二: System.arraycopy(src, srcPos, dest, destPos, length)</span></span><br><span class="line">        <span class="comment">//src: 源数组</span></span><br><span class="line">        <span class="comment">//srcPos: 从源数组复制数据的起始位置</span></span><br><span class="line">        <span class="comment">//dest: 目标数组</span></span><br><span class="line">        <span class="comment">//destPos: 复制到目标数组的启始位置</span></span><br><span class="line">        <span class="comment">//length: 复制的长度       </span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">   &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">   &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">   &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//初始化二维数组，</span></span><br><span class="line">       <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">//有两个一维数组，每个一维数组的长度是3</span></span><br><span class="line">       a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">5</span>;  <span class="comment">//可以直接访问一维数组，因为已经分配了空间</span></span><br><span class="line">          </span><br><span class="line">       <span class="comment">//只分配了二维数组</span></span><br><span class="line">       <span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][]; <span class="comment">//有两个一维数组，每个一维数组的长度暂未分配</span></span><br><span class="line">       b[<span class="number">0</span>]  =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">//必须事先分配长度，才可以访问</span></span><br><span class="line">       b[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//指定内容的同时，分配空间</span></span><br><span class="line">       <span class="keyword">int</span>[][] c = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">               &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">               &#123;<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">               &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">       &#125;;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>Arrays是针对数组的工具类，可以进行 排序，查找，复制填充等功能。 大大提高了开发人员的工作效率。</p><table><thead><tr><th align="center">关键词</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">copyOfRange</td><td align="center">数组赋值</td></tr><tr><td align="center">toString()</td><td align="center">转为字符串</td></tr><tr><td align="center">sort</td><td align="center">排序</td></tr><tr><td align="center">binarySearch</td><td align="center">搜索</td></tr><tr><td align="center">equals</td><td align="center">判断是否相同</td></tr><tr><td align="center">fill</td><td align="center">填充</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_控制流程</title>
      <link href="/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>控制流程</center><a id="more"></a><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>条件判断</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;<span class="comment">//如果表达式1的值是true,就执行表达式2</span></span><br><span class="line">表达式<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//如果成立就打印yes</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多表达式与一个表达式"><a href="#多表达式与一个表达式" class="headerlink" title="多表达式与一个表达式"></a>多表达式与一个表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//如果有多个表达式，必须用大括弧包括起来</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes2"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//否则表达式2 3 无论b是否为true都会执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes2"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只有一个表达式可以不用写括弧，看上去会简约一些</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if使用过程中可能遇到的坑"><a href="#if使用过程中可能遇到的坑" class="headerlink" title="if使用过程中可能遇到的坑"></a>if使用过程中可能遇到的坑</h4><p>if后面有一个分号; 而分号也是一个完整的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b);</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);<span class="comment">//输出yes</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p>else代表了不成立的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b)</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="else-if"><a href="#else-if" class="headerlink" title="else if"></a>else if</h4><p>else if 实现了多条件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只使用 if,会执行4次判断</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果使用else if, 一旦在18行，判断成立， 20行和22行的判断就不会执行了，节约了运算资源</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch语句相当于if else的另一种表达方式.</p><p>switch可以使用byte,short,int,char,String,enum</p><blockquote><p><strong>注:</strong> 每个表达式结束，都应该有一个break;<br><strong>注:</strong> String在Java1.7之前是不支持的, Java从1.7开始支持switch用String的，编译后是把String转化为hash值，其实还是整数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果使用if else</span></span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (day==<span class="number">1</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">2</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">3</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">4</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">5</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">6</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">7</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期天"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"这个是什么鬼？"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果使用switch</span></span><br><span class="line">        <span class="keyword">switch</span>(day)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期天"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"这个是什么鬼？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>关键词:</p><table><thead><tr><th align="center">关键词</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">while</td><td align="center">条件为 true时,重复执行</td></tr><tr><td align="center">do-while</td><td align="center">条件为true时,重复执行,至少会执行一次</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//打印0到4    </span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;<span class="comment">//条件为true时,重复执行</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印0到4</span></span><br><span class="line">        <span class="comment">//与while的区别是，无论是否成立，先执行一次，再进行判断</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;           </span><br><span class="line">        &#125; <span class="keyword">while</span>(i&lt;<span class="number">5</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           </span><br><span class="line">        <span class="comment">//使用while打印0到4    </span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"while循环输出的"</span>+i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//使用for打印0到4    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"for  循环输出的"</span>+j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue    继续下一次循环</p><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是双数,后面的代码不执行,直接进行下一次循环.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">//如果是双数，后面的代码不执行，直接进行下一次循环</span></span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 直接结束当前循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//如果是双数，直接结束循环</span></span><br><span class="line">             </span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结束外部循环"><a href="#结束外部循环" class="headerlink" title="结束外部循环"></a>结束外部循环</h3><h4 id="使用boolean变量结束外部循环"><a href="#使用boolean变量结束外部循环" class="headerlink" title="使用boolean变量结束外部循环"></a>使用boolean变量结束外部循环</h4><p>借助boolean变量结束外部循环<br>需要在内部循环中修改这个变量值<br>每次内部循环结束后，都要在外部循环中判断，这个变量的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> breakout = <span class="keyword">false</span>; <span class="comment">//是否终止外部循环的标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">":"</span> + j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == j % <span class="number">2</span>) &#123;</span><br><span class="line">                    breakout = <span class="keyword">true</span>; <span class="comment">//终止外部循环的标记设置为true</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (breakout) <span class="comment">//判断是否终止外部循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用标签结束外部循环"><a href="#使用标签结束外部循环" class="headerlink" title="使用标签结束外部循环"></a>使用标签结束外部循环</h4><p>在外部循环的前一行，加上标签<br>在break的时候使用该标签<br>即能达到结束外部循环的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        outloop: <span class="comment">//outloop这个标示是可以自定义的比如outloop1,ol2,out5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i+<span class="string">":"</span>+j);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                    <span class="keyword">break</span> outloop; <span class="comment">//如果是双数，结束外部循环</span></span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 控制流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_操作符</title>
      <link href="/2019/07/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2019/07/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>操作符</center><a id="more"></a><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符:"></a><strong>算数操作符:</strong></h3><p> <strong>基本操作符:</strong>+-*/%</p><p><strong>自增自减:</strong>++–</p><h4 id="任意运算单元的长度超过int"><a href="#任意运算单元的长度超过int" class="headerlink" title="任意运算单元的长度超过int"></a>任意运算单元的长度超过int</h4><p>如果有任何运算单元的长度超过int,那么运算结果就按照最长的长度计算<br>比如<br>int a = 5;<br>long b = 6;<br>a+b -&gt; 结果类型是long</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">long</span> b = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> c = (<span class="keyword">int</span>) (a+b); <span class="comment">//a+b的运算结果是long型，所以要进行强制转换</span></span><br><span class="line">        <span class="keyword">long</span> d = a+b;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任意运算单元的长度超过int-1"><a href="#任意运算单元的长度超过int-1" class="headerlink" title="任意运算单元的长度超过int"></a>任意运算单元的长度超过int</h4><p>如果任何运算单元的长度都不超过int,那么运算结果就按照int来计算<br>byte a = 1;<br>byte b= 2;<br>a+b -&gt; int 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> b= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">byte</span> c = (<span class="keyword">byte</span>) (a+b); <span class="comment">//虽然a b都是byte类型，但是运算结果是int类型，需要进行强制转换</span></span><br><span class="line">        <span class="keyword">int</span> d = a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取模"><a href="#取模" class="headerlink" title="%取模"></a>%取模</h4><p>%取余数,又叫取模</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">        System.out.println(i%j); <span class="comment">//输出为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h4><p>++</p><p>–</p><p><strong>自增自减操作符前置后置的区别</strong></p><p>i++;    <strong>先取值,在运算</strong></p><p>++i;    <strong>先运算,再取值.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        System.out.println(i++); <span class="comment">//输出5</span></span><br><span class="line">        System.out.println(i);   <span class="comment">//输出6</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">        System.out.println(++j); <span class="comment">//输出6</span></span><br><span class="line">        System.out.println(j);   <span class="comment">//输出6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><blockquote><p>&gt; 大于<br>&gt;= 大于或等于<br>&lt; 小于<br>&lt;= 小于或等于<br>== 是否相等<br>!= 是否不等 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">6</span>;</span><br><span class="line">       <span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">       System.out.println(a&gt;b);  <span class="comment">//返回 false</span></span><br><span class="line">       System.out.println(a&gt;=c);  <span class="comment">//返回 true</span></span><br><span class="line">        </span><br><span class="line">       System.out.println(a==b); <span class="comment">//返回false</span></span><br><span class="line">       System.out.println(a!=b);<span class="comment">//返回true</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th align="center">关键词</th><th align="center">简介</th><th align="center">逻辑</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">长路与</td><td align="center">两边的运算单元都是布尔值<br>都为真时，才为真<br>任意为假，就为假<br>两侧，都会被运算</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">两边的运算单元都是布尔值<br>都为真时，才为真<br>任意为假，就为假<br>只要第一个是false，第二个就不进行运算了</td></tr><tr><td align="center">|</td><td align="center">长路或</td><td align="center">两边的运算单元都是布尔值<br>都为假时，才为假<br>任意为真，就为真<br>两侧都会被运算</td></tr><tr><td align="center">||</td><td align="center">短路或</td><td align="center">两边的运算单元都是布尔值<br>都为假时，才为假<br>任意为真，就为真<br>只要第一个是true的，第二个就不进行运算了</td></tr><tr><td align="center">!</td><td align="center">取反</td><td align="center">真变为假 <br>假变为真</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">不同，返回真 <br>相同，返回假</td></tr></tbody></table><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>听说用处不大,暂时不补,有需要以后更新.</p><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><pre><code>&gt; =                    赋值操作                                顺序从右到左</code></pre><blockquote><p>+=                  对本身进行运算,并赋值        自加,下面类似 i+=2;  ===   i=i+2;</p><p>-=</p><p>*=</p><p>/=</p><p>%=</p><p>&amp;=</p><p>|=</p><p>^=</p><p>&lt;&lt;=</p><p>&gt;&gt;=</p><p>&gt;&gt;&gt;=</p></blockquote><h3 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h3><p>?:</p><p>表达式1?值1:值2</p><p>如果表达式为真    返回值1</p><p>如果表达式为假    返回值2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> k = i &lt; j ? <span class="number">99</span> : <span class="number">88</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 相当于</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            k = <span class="number">99</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            k = <span class="number">88</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(k);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>Scanner类用于读取数据.</p><p>在使用Scanner类时,需要在最前面加上:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><h4 id="使用Scanner读取整数"><a href="#使用Scanner读取整数" class="headerlink" title="使用Scanner读取整数"></a>使用Scanner读取整数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第一个整数："</span>+a);</span><br><span class="line">        <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第二个整数："</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Scanner读取浮点数"><a href="#使用Scanner读取浮点数" class="headerlink" title="使用Scanner读取浮点数"></a>使用Scanner读取浮点数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">float</span> a = s.nextFloat();</span><br><span class="line">        System.out.println(<span class="string">"读取的浮点数的值是："</span>+a);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Scanner读取字符串"><a href="#使用Scanner读取字符串" class="headerlink" title="使用Scanner读取字符串"></a>使用Scanner读取字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String a = s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"读取的字符串是："</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取了整数后-接着读取字符串"><a href="#读取了整数后-接着读取字符串" class="headerlink" title="读取了整数后,接着读取字符串"></a>读取了整数后,接着读取字符串</h4><p>  需要注意的是，如果在通过nextInt()读取了整数后，再接着读取字符串，读出来的是回车换行:”\r\n”,因为nextInt仅仅读取数字信息，而不会<strong>读取</strong>回车换行”\r\n”.</p><p>所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该连续执行两次nextLine()，第一次是取走回车换行，第二次才是读取真正的字符串  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"读取的整数是"</span>+ i);</span><br><span class="line">        String rn = s.nextLine();</span><br><span class="line">        String a = s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"读取的字符串是："</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_变量</title>
      <link href="/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E5%8F%98%E9%87%8F/"/>
      <url>/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>变量</center><a id="more"></a><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p><strong>变量的定义:</strong>用来命名的一个数据标识符.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year  = <span class="number">1849</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>int</strong> 是数据类型，表示是整数<br><strong>year</strong> 是一个标识符<br><strong>=</strong> 是赋值操作符<br><strong>1949</strong> 是一个数字类型的值<br><strong>;</strong> 表示该行结束</p><p>year 这个标识符就是一个变量，它代表1949这个值  </p></blockquote><h3 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h3><p>Java中有八种基本类型，都是Java语言预先定义好的，并且是关键字。 </p><blockquote><p>分别是:</p><p>​    整型 （4种）<br>​    字符型 （1种）<br>​    浮点型 （2种）<br>​    布尔型（1种）</p></blockquote><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>整型变量用于存放整数</p><ul><li><p>byte</p></li><li><p>short</p></li><li><p>int</p></li><li><p>long</p></li></ul><p>区别在于不同类型的整型，最大值，最小值不一样<br>如果试图给byte类型的变量赋予超出其范围的值，就会产生编译错误，这个时候就需要进行<strong>类型转换</strong>.</p><p>整型数据类型长度</p><table><thead><tr><th align="center">类型</th><th align="center">缺省值</th><th align="center">长度</th><th align="center">数值范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">0</td><td align="center">8位</td><td align="center">-128~127</td></tr><tr><td align="center">short</td><td align="center">0</td><td align="center">16位</td><td align="center">-32,768~32,767</td></tr><tr><td align="center">int</td><td align="center">0</td><td align="center">32位</td><td align="center">-2,147,483,648~2,147,483,647</td></tr><tr><td align="center">long</td><td align="center">0</td><td align="center">64位</td><td align="center">-9,223,372,036,854,775,808~9,223,372,036,854,775,807</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">short</span> s = <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">300</span>;</span><br><span class="line">  <span class="keyword">long</span> l = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*如果试图给byte类型的变量赋予超出其范围的值，就会产生编译错误*/</span></span><br><span class="line">  <span class="keyword">byte</span> b2 = <span class="number">200</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>char类型用于存放一个字符，值用单引号’表示 (双引号表示字符串)<br>其长度和short一样，也是16位的<br><strong>只能存放一个字符</strong>，超过一个字符就会产生编译错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c = <span class="string">'中'</span>;</span><br><span class="line">  <span class="comment">//char 只能存放一个字符，超过一个字符就会产生编译错误</span></span><br><span class="line">  <span class="keyword">char</span> c2 = <span class="string">'中国'</span>; <span class="comment">//报错</span></span><br><span class="line">  <span class="keyword">char</span> c3 = <span class="string">'ab'</span>; <span class="comment">//报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><blockquote><ul><li>float    长度32位</li><li>double   长度64位</li></ul></blockquote><p><strong>注意： 默认的小数值是double类型的</strong><br>所以 float f = 54.321会出现编译错误，因为54.321的默认类型是 double，其类型 长度为64，超过了float的长度32<br>在数字后面<strong>加一个字母f</strong>，直接把该数字声明成float类型<br>float f2 = 54.321<strong>f</strong>, 这样就不会出错了</p><p>浮点型数据类型</p><table><thead><tr><th align="center">类型</th><th align="center">缺省值</th><th align="center">长度</th><th align="center">数的范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">0.0</td><td align="center">32位</td><td align="center">3.4E-038~3.4E+038</td></tr><tr><td align="center">double</td><td align="center">0.0</td><td align="center">64位</td><td align="center">1.7E-308~1.7E+308</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">double</span> d = <span class="number">123.45</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//该行会出现编译错误，因为54.321是double型的</span></span><br><span class="line">      <span class="keyword">float</span> f = <span class="number">54.321</span>;      </span><br><span class="line">      <span class="keyword">float</span> f2 = <span class="number">54.321f</span>;     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>用于表示真假,长度为1</p><blockquote><p>虽然布尔型真正存放的数据是0(false) 1(true)<br>但是，不能直接使用0 1 进行赋值</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">缺省值</th><th align="center">长度</th><th align="center">数的范围</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">false</td><td align="center">1位</td><td align="center">false,true</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然布尔型真正存放的数据是0(false) 1(true)</span></span><br><span class="line"><span class="comment">// 但是，不能直接使用0 1 进行赋值</span></span><br><span class="line"><span class="keyword">boolean</span> b3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>String类型其实<strong>并不是基本类型</strong>，但是它是如此广泛的被使用，常常被误以为是一种基本类型。<br>String类型是Immutable的，一旦创建就不能够被改变.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello Java"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><p>创建一个Hero对象会用到new关键字，但是给一个基本类型变量赋值却不是用new. 因为基本类型是Java语言里的一种内置的特殊数据类型，并不是某个类的对象。<br>给基本类型的变量赋值的方式叫做<strong>字面值</strong> .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> hp = <span class="number">3.2f</span>;</span><br></pre></td></tr></table></figure><h4 id="整数字面值"><a href="#整数字面值" class="headerlink" title="整数字面值"></a>整数字面值</h4><p>当以l或者L结尾的时候，一个整数字面值是long类型，否则就是int类型。 建议使用大写的L而非小写的l，因为容易和1混淆。<br>byte,short,int和long的值都可以通过int类型的字面值来创建。整数的字面值可以用如下四种进制来表示：<br>十进制: 基 10, 包含从0-9的数字，平常用的就是这种<br>十六进制: 基 16, 包含从0-9的数字，和从A-F的字母。<br>八进制: 基 8, 包含从0-7的数字<br>二进制: 基 2, 包含0和1。（从 JAVA7开始就可以创建 二进制的字面值了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> val = <span class="number">26L</span>; <span class="comment">//以L结尾的字面值表示long型</span></span><br><span class="line">        <span class="keyword">int</span> decVal = <span class="number">26</span>; <span class="comment">//默认就是int型</span></span><br><span class="line">        <span class="keyword">int</span> hexVal = <span class="number">0x1a</span>; <span class="comment">//16进制</span></span><br><span class="line">        <span class="keyword">int</span> oxVal = <span class="number">032</span>; <span class="comment">//8进制</span></span><br><span class="line">        <span class="keyword">int</span> binVal = <span class="number">0b11010</span>; <span class="comment">//2进制</span></span><br><span class="line">        System.out.println(oxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浮点数字面值"><a href="#浮点数字面值" class="headerlink" title="浮点数字面值"></a>浮点数字面值</h4><p>当以f或者F结尾的时候，就表示一个float类型的浮点数，否则就是double类型（以d或者D结尾，写不写都可以）。<br>浮点数还可以用E或者e表示（科学计数法）<br>e2表示10的二次方，即100<br>1.234e2 = 1.234x100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">123.4F</span>;<span class="comment">// 以F结尾的字面值表示float类型</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.4</span>;<span class="comment">// 默认就是double类型</span></span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">1.234e2</span>;<span class="comment">// 科学计数法表示double</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符和字符串字面值"><a href="#字符和字符串字面值" class="headerlink" title="字符和字符串字面值"></a>字符和字符串字面值</h4><p>字符的字面值放在单引号中<br>字符串的字面值放在双引号中<br>需要注意的是，<strong>\表示转义</strong>，比如需要表示制表符，回车换行，双引号等就需要用 \t \r \n &quot; 的方式进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="keyword">char</span> a= <span class="string">'c'</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//以下是转义字符</span></span><br><span class="line">        <span class="keyword">char</span> tab = <span class="string">'\t'</span>; <span class="comment">//制表符</span></span><br><span class="line">        <span class="keyword">char</span> carriageReturn = <span class="string">'\r'</span>; <span class="comment">//回车</span></span><br><span class="line">        <span class="keyword">char</span> newLine = <span class="string">'\n'</span>; <span class="comment">//换行</span></span><br><span class="line">        <span class="keyword">char</span> doubleQuote = <span class="string">'\"'</span>; <span class="comment">//双引号</span></span><br><span class="line">        <span class="keyword">char</span> singleQuote = <span class="string">'\''</span>; <span class="comment">//单引号</span></span><br><span class="line">        <span class="keyword">char</span> backslash = <span class="string">'\\'</span>; <span class="comment">//反斜杠</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><p><strong>规则</strong>:从小到大自动转,从大到小强制转.</p><p>强制转可能会造成数据<strong>溢出</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte b = 5;</span><br><span class="line">int i1 = 10;</span><br><span class="line">int i2 = 300;</span><br><span class="line">b = i1;//i1的值在byte的范围内,所以强转不会有数据损失.</span><br><span class="line">b = i2; //i2的值超出了byte的范围,编译器会提示错误,会损失数据.</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong>虽然short和char都是16位的，长度是一样的 但是彼此之间，依然需要进行强制转换</p></blockquote><p>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p><p>​            强转</p><p>​        -&gt; char -&gt;</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><h4 id="命名规则-1"><a href="#命名规则-1" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li><p>变量命名只能使用<strong>字母 数字 $ _</strong></p></li><li><p>变量第一个字符 只能使用 字母 $ _</p></li><li><p>变量第一个字符 不能使用数字</p></li></ul><blockquote><p>注：_ 是下划线，不是-减号或者—— 破折号</p></blockquote><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a_12= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> $a43= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a434= <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//第一个是数字，是不行的</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">34</span>a= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="使用完整的单词命名-而非缩写"><a href="#使用完整的单词命名-而非缩写" class="headerlink" title="使用完整的单词命名,而非缩写"></a>使用完整的单词命名,而非缩写</h4><p>​    在命名的时候，尽量使用完整的单词进行命名，比如name,moveSpeed，而不是使用缩写 n,m,这样有助于理解.</p><h4 id="不能只使用关键字，但是可以包含关键字"><a href="#不能只使用关键字，但是可以包含关键字" class="headerlink" title="不能只使用关键字，但是可以包含关键字"></a>不能只使用关键字，但是可以包含关键字</h4><p>​    <strong>什么是关键词:</strong>比如int, short, class 这些单词已经被java 赋予了特殊的含义，这些就是关键字。</p><p>​    关键词不能直接用来作为变量名,但可以包含关键字,比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> class5 = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="中文也可以用来命名"><a href="#中文也可以用来命名" class="headerlink" title="中文也可以用来命名"></a>中文也可以用来命名</h4><p>但是……别用.</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>变量处于不同位置时,有不同的名称:</p><blockquote><p>字段,属性</p><p>参数</p><p>局部变量</p></blockquote><p>不同名称的变量,其作用有也有所不同.</p><h4 id="字段-属性-Field"><a href="#字段-属性-Field" class="headerlink" title="字段,属性,Field"></a>字段,属性,Field</h4><p>当一个变量被声明在类下面<br>变量就叫做<strong>字段</strong> 或者<strong>属性</strong>、<strong>成员变量</strong>、<strong>Field</strong><br>比如变量i,就是一个属性。<br>那么从第2行这个变量声明的位置开始，整个类都可以访问得到<br>所以其作用域就是从其声明的位置开始的整个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i;  <span class="comment">//其他的属性可以访问i</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(i); <span class="comment">//方法1里可以访问i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(i); <span class="comment">//方法2里可以访问i</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>如果一个变量，是声明在一个方法上的，就叫做<strong>参数</strong><br>参数的作用域即为该方法内的所有代码<br>其他方法不能访问该参数<br>类里面也不能访问该参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; <span class="comment">//参数i的作用域即方法method1</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123; </span><br><span class="line">System.out.println(i); <span class="comment">//method2 不能访问参数i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = i;  <span class="comment">//类里面也不能访问参数i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>声明在方法内的变量，叫做<strong>局部变量</strong><br>其作用域在声明开始的位置，到其所处于的块结束位置</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p> 当一个变量被final修饰的时候，该变量<strong>只有一次赋值的机会</strong></p><p>final 除了修饰变量，还可以修饰类，修饰方法</p><p>也就是Java中的常量定义.</p><h4 id="在声明的时候赋值"><a href="#在声明的时候赋值" class="headerlink" title="在声明的时候赋值"></a>在声明的时候赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        i = <span class="number">10</span>; <span class="comment">//i在第4行已经被赋值过了，所以这里会出现编译错误    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在声明的时候没有赋值"><a href="#在声明的时候没有赋值" class="headerlink" title="在声明的时候没有赋值"></a>在声明的时候没有赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i;        </span><br><span class="line">        i = <span class="number">10</span>; <span class="comment">//i在第4行，只是被声明，但是没有被赋值，所以在这里可以进行第一次赋值       </span></span><br><span class="line">        i = <span class="number">11</span>; <span class="comment">//i在第6行已经被赋值过了，所以这里会出现编译错误         </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        j = <span class="number">5</span>; <span class="comment">//这个能否执行？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>答:不能执行<br>是语法错误，过不了编译。所以不能执行。<br>受final修饰的变量仅能被赋值一次。<br>public void method1(final int j)的代码块中，j（调用前仅可被赋值一次的int类型变量j）代表实际参数，已经赋值了。<br>而j=5;是赋值操作。存在语法错误。<br>与new没有关系。与是否调用也没有关系。</p></blockquote><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>以;结尾的的一段代码,即为一个表达式.</p><p>一个;也是一个表达式.</p><h3 id="块"><a href="#块" class="headerlink" title="块"></a>块</h3><p>从{开始 到对应的}结束,即一个块.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; <span class="comment">//类对应的块</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">//主方法对应的块</span></span><br><span class="line">        System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_面向对象</title>
      <link href="/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>Java是一门面向对象的编程语言<br>引入面向对象概念(但不深入讲解)</center><a id="more"></a><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>以LOL为例了解面向对象编程.</p><p>英雄有很多共通的属性,如血量,姓名等等.</p><p>所以我们可以定义一种东西代表”英雄”这种事物.</p><p>这种东西叫做类.</p><h4 id="如何定义一个类"><a href="#如何定义一个类" class="headerlink" title="如何定义一个类?"></a>如何定义一个类?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">float</span> hp;<span class="comment">//血量</span></span><br><span class="line"><span class="keyword">float</span> armor:<span class="comment">//护甲</span></span><br><span class="line"><span class="keyword">float</span> moveSpeed;<span class="comment">//移动速度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就定义好了一个类.</p><p>有了类,就像有了英雄模板,这样就可以创建一个具体的英雄了:</p><h4 id="如何定义一个具体的英雄"><a href="#如何定义一个具体的英雄" class="headerlink" title="如何定义一个具体的英雄:"></a>如何定义一个具体的英雄:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero();<span class="comment">//定义一个新英雄</span></span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        garen.hp = <span class="number">616.28f</span>;</span><br><span class="line">        garen.armor = <span class="number">27.536f</span>;</span><br><span class="line">        garen.moveSpeed = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">"提莫"</span>;</span><br><span class="line">        teemo.hp = <span class="number">383f</span>;</span><br><span class="line">        teemo.armor = <span class="number">14f</span>;</span><br><span class="line">        teemo.moveSpeed = <span class="number">330</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要定义一个具体的英雄,我们需要用定义好的类去创建一个叫做<strong>对象</strong>的东西.</p><blockquote><p><strong>注意:类的第一个字母大写</strong></p><p>这样可以让代码看上去更已读,容易维护.</p></blockquote><h2 id="Java类的属性"><a href="#Java类的属性" class="headerlink" title="Java类的属性"></a>Java类的属性</h2><p>在英雄类里声明的血量,护甲等等状态</p><p>这些状态就叫做类的<strong>属性</strong></p><h4 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h4><p>属性的类型可以是<strong>基本类型</strong>，比如int整数，float 浮点数<br>也可以是<strong>类类型</strong>，比如String 字符串</p><h4 id="属性名称"><a href="#属性名称" class="headerlink" title="属性名称"></a>属性名称</h4><p>属性名称一般来说，都是小写<br>比如name<br>如果有多个单词组成，后面的单词的第一个字母大写<br>比如 moveSpeed<br>属性也是变量，所以需要满足变量的命名规则</p><h3 id="Java类的方法"><a href="#Java类的方法" class="headerlink" title="Java类的方法"></a>Java类的方法</h3><h4 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法?"></a>什么是方法?</h4><p>方法就是函数,就像你在LOL中的一个移动,一个平A.</p><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">   String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//坑队友</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keng</span><span class="params">()</span></span>&#123;<span class="comment">//这就是一个方法</span></span><br><span class="line">        System.out.println(<span class="string">"坑队友！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h4><p>方法是一个类的动作行为，所以一般都是<strong>以动词开头</strong>的，比如 <strong>keng …</strong><br>如果有多个单词，后面的每个单词的第一个字母使用大写<br>比如 addSpeed</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_HelloWorld</title>
      <link href="/2019/07/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80._helloworld/"/>
      <url>/2019/07/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Java%E5%9F%BA%E7%A1%80._helloworld/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>运行第一个程序HelloWorld</center><a id="more"></a><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h4 id="首先看配置成功后的效果"><a href="#首先看配置成功后的效果" class="headerlink" title="首先看配置成功后的效果"></a>首先看配置成功后的效果</h4><p>点WIN键-&gt;运行（或者使用win+r)<br>输入cmd命令<br>输入java -version</p><blockquote><p> <strong>注：</strong> -version是小写，不能使用大写，java后面有一个空格</p></blockquote><p>配置成功后，会出现版本信息 <strong>java version “1.8.0_65”</strong></p><p><strong>注:</strong> <strong>这是配置完成后的效果</strong>，在配置完成之前是看不到这个效果的</p><p><img src="https://i.loli.net/2019/07/23/5d36e557153e219556.jpg" alt="QQ截图20190723184341.jpg"></p><h4 id="下载安装JDK"><a href="#下载安装JDK" class="headerlink" title="下载安装JDK"></a>下载安装JDK</h4><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p>右键我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统变量</p><blockquote><p><strong>注意</strong>：是下面的<strong>系统变量</strong>，不是上面的用户变量  </p></blockquote><p> 新建变量名** JAVA_HOME<strong>，变量值 **E:\JDK</strong><br> 修改变量 Path ，在最前面加上 <strong>%JAVA_HOME%\bin;</strong></p><blockquote><p><strong>注意</strong>：”Path”是<strong>首字母大写</strong>，<strong>不要改成”PATH”</strong> bin后面要有<strong>分号</strong>;<strong>注意</strong>：系统变量上面的用户变量里，不要有这两个，如果有应该去掉，以避免被干扰。<br><strong>注意</strong>：Win10 下PATH的配置有所不同，按照下个步骤配置即可</p></blockquote><h4 id="WIN10下环境变量Path的配置"><a href="#WIN10下环境变量Path的配置" class="headerlink" title="WIN10下环境变量Path的配置"></a>WIN10下环境变量Path的配置</h4><p>右键我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统变量</p><p>新建一个环境变量,内容和上面一样</p><p>然后,放在最上面,即可</p><h4 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h4><p>点击确认关闭刚才的配置页面，这一步一定要做，否则刚才的配置不能生效</p><p>点WIN键-&gt;运行（或者使用win+r)<br>输入cmd命令<br>输入java -version<br>如果出现版本信息，表明配置成功<br>如果失败了，调整前面的配置，然后要<strong>重新启动cmd命令</strong>，而不是在原有的cmd里面输入 java -version  </p><h3 id="命令行运行HelloWorld"><a href="#命令行运行HelloWorld" class="headerlink" title="命令行运行HelloWorld"></a>命令行运行HelloWorld</h3><p><strong>创建第一个java源文件</strong></p><p>虽然一般都用编译器来写,但是,还是有必要了解一下命令行执行java.</p><p>创建第一个java 源文件<br>在屏幕空白位置，点击鼠标右键-&gt;新建-&gt;文本文件 得到一个文件”新建 文本文档.txt“<br>右键该文件-&gt;重命名为 HelloWorld.java<br>在该文件中敲入如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;<span class="comment">//表示类的名字是HelloWorld</span></span><br><span class="line"><span class="comment">//这是主方法，所有代码的入口,如果你学过c语言 ，相当于 _main 程序入口</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);表示在控制台（黑屏幕）**输出一个字符串**“hello world”</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为java 是<strong>面向对象</strong>的编程语言，所以我们实际上是在<strong>创建一个个的类</strong></p><p><strong>显示扩展名</strong></p><p>有时候系统会默认把扩展名隐藏掉，可以通过如下方式显示扩展名，以便于把.txt修改为.java<br>打开我的电脑-&gt; F10显示菜单栏-&gt;工具-&gt;文件夹选项-&gt;查看-&gt; 去掉 <strong>隐藏已知文件类型的扩展名</strong> 上的勾选</p><p><strong>编译</strong></p><p>.java 文件是java的源文件，但是<strong>不能直接运行</strong>，必须先被编译成为.class文件 才能够执行<br>java 使用 javac命令进行编译</p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac filename.java</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong>必须跟上.java 后缀名</p></blockquote><p> 执行如下命令：<br> 运行 win+r,输入 cmd 进入控制台界面<br> e: 切换盘符为e盘(这里选你的java文件所在的盘)<br> cd e:\project\j2se\src 切换目录到源文件目录<br> javac HelloWorld.java 编译命令 javac 文件名大小写必须一致<br> <strong>如果得到一行空白，就表示成功了</strong>，并且得到一个class文件： HelloWorld.class<br> <strong>注：</strong> 第一行切换盘符的<strong>e:</strong>不要忘记了</p><p><strong>运行</strong><br>java的运行命令:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java classname</span><br></pre></td></tr></table></figure><p>运行 win+r,输入 cmd 进入<strong>控制台界面</strong></p><p><strong>e: 切换盘符为e盘</strong><br><strong>cd e:\project\j2se\src 切换目录到源文件目录***java HelloWorld</strong><br>注意大小写需要一致，并且<strong>没有后缀名.class</strong><br>运行成功后会看到字符串 “hello world”</p><p><strong>关于类</strong></p><p>java所有的代码都是运行在类里面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br></pre></td></tr></table></figure><p><strong>public</strong> 表示这是一个可以公开访问的类</p><p> <strong>class</strong>表示这是一个类</p><p><strong>HelloWorld</strong>表示类的名字，每个单词的首字母大写</p><p><strong>主方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>你会写很多代码，总有第一行执行的代码，这就是主方法<br><strong>args</strong> 表示运行参数，在本例中没有使用到。</p><p><strong>控制台输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><p>会在控制台输出字符串<br><strong>println</strong> 表示打印数据到控制台，并且换行</p><h3 id="Eclipse快捷键"><a href="#Eclipse快捷键" class="headerlink" title="Eclipse快捷键"></a>Eclipse快捷键</h3><p><strong>批量修改</strong><br>ALT+SHIFT+R</p><p><strong>快速输入主方法</strong></p><ol><li><p>敲入main </p></li><li><p>alt+/</p></li></ol><p><strong>快速输入System.out.println</strong></p><ol><li><p>敲入syso </p></li><li><p>alt+/</p></li></ol><p><strong>快速输入for</strong></p><ol><li><p>敲入for </p></li><li><p>alt+/</p></li></ol><p><strong>查看java源代码</strong><br>JDK里提供的类，比如String,Integer,System都是开源的，免费提供其源代码<br>可以很简便的通过eclipse就查看源码</p><ol><li><p>先选中想要查看的方法，比如System.out.println()的 println</p></li><li><p>敲键F3</p></li></ol><p><strong>代码格式化</strong><br>ctrl+shift+f<br><strong>注意：</strong> 这个快捷键和搜狗输入法的切换简繁冲突。 所以最好把搜狗的切换简繁取消掉。</p><p><strong>快速助手</strong><br>ctrl+shift+o<br>import 类<br>去掉未使用的类 等等都可以使用</p><p><strong>快速注释</strong><br>选中一行或者多行代码 ctrl+shift+c</p><p><strong>大小写转换</strong><br>ctrl+shift+x 选中的转换为大写<br>ctrl+shift+y 选中的转换为小写</p><p><strong>快速解决办法提示</strong><br>在出错误的行，使用ctrl+1。 比如忘记导入类了，就可以用这个解决</p><p><strong>toString getter setter 构造方法的快速生成</strong></p><ol><li>通过菜单-&gt; Source 就可以看到快速生成的选项</li><li>直接使用快捷键 shift+alt+s也可以弹出这个选项</li></ol>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> helloworld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora食用指南</title>
      <link href="/2019/07/23/Typora%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/07/23/Typora%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<center>之前写markdow一直在用vsc<br>但是由于神奇的问题解决不掉<br>我弃坑了!<br>就这么干脆!<br>听说这个不错<br>学着用用<br>markdown里有的这里就不写了</center><a id="more"></a><p><strong>这里是下载地址~</strong></p><p><a href="https://www.typora.io/#download" target="_blank" rel="noopener">https://www.typora.io/#download</a></p><p><strong><em>开始</em></strong></p><p>神说:天大地大,快捷键最大.</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>加粗： <code>Ctrl/Cmd + B</code></li><li>标题： <code>Ctrl/Cmd + H</code></li><li>插入链接： <code>Ctrl/Cmd + K</code></li><li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li><li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li><li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li><li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li><li>撤销： <code>Ctrl/Cmd + Z</code></li><li>一级标题：快捷键为Crtl + 1，以此类推</li></ul><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p>在markdown中，段落由多个空格分隔。在Typora中，只需回车即可创建新段落。</p><h4 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h4><blockquote><p># 一级标题， 快捷键为Crtl + 1<br>## 二级标题，快捷键为Crtl + 2<br>###### 六级标题，快捷键为Crtl + 6</p></blockquote><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>输入<code>| 表头1 | 表头2 |</code>并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下：</p><table><thead><tr><th align="left">First Header</th><th align="left">Second Header</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td></tr></tbody></table><hr><h4 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h4><p>Typora支持<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="noopener">YAML Front Matter</a>， 在文章开头输入<code>---</code>，然后按回车即可。</p><h4 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h4><p>输入<code>[toc]</code>然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><h3 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h3><p>跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。</p><p><a href="https://www.simon96.online/2018/10/18/Typora入门（中文版）/" target="_blank" rel="noopener">https://www.simon96.online/2018/10/18/Typora入门（中文版）/</a>)</p><hr><p><strong>总结:</strong></p><ol><li>建议打开大纲视图（快捷键ctrl + shift + 1）。</li><li>插入表格需要顶格写，不然显示不出来。</li><li>以上语法不用刻意记，在Typora中的右键菜单都有， 常用功能基本上都有快捷键。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Typora食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typora </tag>
            
            <tag> markdown </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度云编程资源(过期无补)</title>
      <link href="/2019/07/18/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90(%E8%BF%87%E6%9C%9F%E6%97%A0%E8%A1%A5)/"/>
      <url>/2019/07/18/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90(%E8%BF%87%E6%9C%9F%E6%97%A0%E8%A1%A5)/</url>
      
        <content type="html"><![CDATA[<center><p>喵~<br><br>发一些学习的资源,需要自提,过期无补<br><br>我只是个么的感情的搬运工<br><br>不包邮<br><br>就是这样</p></center><a id="more"></a><p><strong>进入大数据 Spark SQL 的世界</strong></p><p>链接：<a href="https://pan.baidu.com/s/1_AINgCN8KaQEbnJRkWnKdw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_AINgCN8KaQEbnJRkWnKdw</a> </p><p>提取码：7j85</p><p><strong>Java深入微服务原理改造房产销售平台</strong></p><p>链接：<a href="https://pan.baidu.com/s/1O7VE9AOB8AKaYYp0d1HOrw" target="_blank" rel="noopener">https://pan.baidu.com/s/1O7VE9AOB8AKaYYp0d1HOrw</a> </p><p>提取码：2f9i </p><p><strong>表白神器链接：</strong></p><p><a href="https://pan.baidu.com/s/1EXK0BYqX-gXuhZGOWWB8zg" target="_blank" rel="noopener">https://pan.baidu.com/s/1EXK0BYqX-gXuhZGOWWB8zg</a></p><p> 密码：m3ih</p><p><strong>超实用前端资料链接</strong>：</p><p><a href="https://pan.baidu.com/s/1dzMNAgTWpmCDezHptpg_ig" target="_blank" rel="noopener">https://pan.baidu.com/s/1dzMNAgTWpmCDezHptpg_ig</a>  </p><p>提取码：7hcj </p><p><strong>JS设计模式全解链接</strong>：</p><p><a href="https://pan.baidu.com/s/1G4jMHzWmVG_AioqN7I0rFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1G4jMHzWmVG_AioqN7I0rFQ</a> </p><p>提取码：uti9 </p><p><strong>疑难问题解决方案链接：</strong></p><p><a href="https://pan.baidu.com/s/1cHivqaloYo0l4UL6ZHEP2w" target="_blank" rel="noopener">https://pan.baidu.com/s/1cHivqaloYo0l4UL6ZHEP2w</a> </p><p>提取码：2lof</p><p><strong>玩转算法</strong></p><p>链接：<a href="https://pan.baidu.com/s/1gTGwVegBWmMntr7TJZMbyw" target="_blank" rel="noopener">https://pan.baidu.com/s/1gTGwVegBWmMntr7TJZMbyw</a> </p><p>提取码：pywv </p><p><strong>大数据视频和资料：</strong>       </p><p>链接: <a href="https://pan.baidu.com/s/1bqUXYKf" target="_blank" rel="noopener">https://pan.baidu.com/s/1bqUXYKf</a> </p><p>密码: k38w</p><p><strong>React Native项目实战</strong></p><p>链接：<a href="https://pan.baidu.com/s/15-hC110OoVTQOiBczsb_WA" target="_blank" rel="noopener">https://pan.baidu.com/s/15-hC110OoVTQOiBczsb_WA</a> </p><p>提取码：8mk7 </p><p><strong>React 贯穿全栈开发APP</strong></p><p>链接：<a href="https://pan.baidu.com/s/1JgcdhfguEvYhlVFsgkzIEA" target="_blank" rel="noopener">https://pan.baidu.com/s/1JgcdhfguEvYhlVFsgkzIEA</a> </p><p>提取码：a3yf</p><p><strong>Java并发编程</strong></p><p>链接：<a href="https://pan.baidu.com/s/1VKAN7wTnpKo7PN3QXywa5A" target="_blank" rel="noopener">https://pan.baidu.com/s/1VKAN7wTnpKo7PN3QXywa5A</a> </p><p>提取码：hznr </p><p><strong>前端视频和资料：</strong></p><p> 链接: <a href="https://pan.baidu.com/s/1gfjxHL5" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfjxHL5</a> </p><p>密码: hjua</p><p><strong>Python高级编程技巧</strong></p><p>链接：<a href="https://pan.baidu.com/s/1adz1uuxBOdelVeXAN0SC5g" target="_blank" rel="noopener">https://pan.baidu.com/s/1adz1uuxBOdelVeXAN0SC5g</a> </p><p>提取码：evxr </p><p><strong>bootstrap视频和资料：</strong>     </p><p>链接：<a href="https://pan.baidu.com/s/1luqC5W0GBsqBfgRG2LuOMQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1luqC5W0GBsqBfgRG2LuOMQ</a> </p><p>密码：48w3</p><p><strong>面试经验指导链接：</strong></p><p><a href="https://pan.baidu.com/s/1DSDLCWW5T_PQ8zsf5LMkCQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1DSDLCWW5T_PQ8zsf5LMkCQ</a> </p><p>提取码：r7qv </p><p><strong>基础入门安卓</strong></p><p>链接：<a href="https://pan.baidu.com/s/1VcuZ8im8p5lDSw1izaQBIw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VcuZ8im8p5lDSw1izaQBIw</a> </p><p>提取码：a38m </p><p><strong>第一套软件测试教程</strong></p><p>链接：<a href="https://pan.baidu.com/s/1igq6HbJYK_11eG1XiSoIBQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1igq6HbJYK_11eG1XiSoIBQ</a> </p><p>提取码：7d6b  </p><p><strong>软件测试指导</strong></p><p>链接：<a href="https://pan.baidu.com/s/1uqSzKXVuAgg8JET0aoN3Nw" target="_blank" rel="noopener">https://pan.baidu.com/s/1uqSzKXVuAgg8JET0aoN3Nw</a> </p><p>提取码：t1qo</p><p><strong>高级架构师进阶</strong></p><p>链接：<a href="https://pan.baidu.com/s/19r5i1FdXW6glSy2ZQ71eFA" target="_blank" rel="noopener">https://pan.baidu.com/s/19r5i1FdXW6glSy2ZQ71eFA</a> </p><p>提取码：czb4 </p><p><strong>python视频和资料</strong>：                          </p><p>链接: <a href="https://pan.baidu.com/s/1jJQaagA" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJQaagA</a> </p><p>密码: e1gm</p><p><strong>Java开发人工智能远程监控</strong></p><p>链接：<a href="https://pan.baidu.com/s/1x2uzAHscTLf8t-G_3LrXLw" target="_blank" rel="noopener">https://pan.baidu.com/s/1x2uzAHscTLf8t-G_3LrXLw</a> </p><p>提取码：b0hn</p><p><strong>SSH个人理财系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1-BybATsIfRR4TU7Z-PlAaQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1-BybATsIfRR4TU7Z-PlAaQ</a> </p><p>提取码：5a99</p><p><strong>Python全套（内有爬虫）</strong></p><p>链接：<a href="https://pan.baidu.com/s/1GdOxS1nqNv2t33C6dS6tmA" target="_blank" rel="noopener">https://pan.baidu.com/s/1GdOxS1nqNv2t33C6dS6tmA</a> </p><p>提取码：g19z </p><p><strong>CMR系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1NfKOLfudJqbE-gTd8SUuzQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1NfKOLfudJqbE-gTd8SUuzQ</a> </p><p>提取码：fjq3 </p><p><strong>Spring源码解析</strong></p><p>链接：<a href="https://pan.baidu.com/s/1zOHWBUyVsLfn4NGmN6etvw" target="_blank" rel="noopener">https://pan.baidu.com/s/1zOHWBUyVsLfn4NGmN6etvw</a> </p><p>提取码：i8gd </p><p><strong>Hadoop视频和资料：</strong>        </p><p> 链接：<a href="https://pan.baidu.com/s/1wjhXxD3-ZuoRHv0tRLsP8w" target="_blank" rel="noopener">https://pan.baidu.com/s/1wjhXxD3-ZuoRHv0tRLsP8w</a> </p><p>密码：y075</p><p><strong>软件方法论</strong></p><p>链接：<a href="https://pan.baidu.com/s/1JcqLQS4jIDNHwcZ8rlv95g" target="_blank" rel="noopener">https://pan.baidu.com/s/1JcqLQS4jIDNHwcZ8rlv95g</a> </p><p>提取码：9p8h</p><p><strong>基于Spring团购项目链接：</strong></p><p><a href="https://pan.baidu.com/s/12oqsuKtR46etIWYs2KpH8A" target="_blank" rel="noopener">https://pan.baidu.com/s/12oqsuKtR46etIWYs2KpH8A</a> </p><p>提取码：8yzq</p><p><strong>Linux指导</strong></p><p>链接：<a href="https://pan.baidu.com/s/1RfFQWLu_VmkSYHp4Aj2RVg" target="_blank" rel="noopener">https://pan.baidu.com/s/1RfFQWLu_VmkSYHp4Aj2RVg</a> </p><p>提取码：9t8i</p><p><strong>JavaEE实战</strong></p><p>链接：<a href="https://pan.baidu.com/s/1Fk8JM8gzNBamvbxLnJ-2ow" target="_blank" rel="noopener">https://pan.baidu.com/s/1Fk8JM8gzNBamvbxLnJ-2ow</a> </p><p>提取码：semf </p><p><strong>mysql视频和资料：</strong>             </p><p>链接：<a href="https://pan.baidu.com/s/14EoVSlWFwAEzsa8-XC61-A" target="_blank" rel="noopener">https://pan.baidu.com/s/14EoVSlWFwAEzsa8-XC61-A</a> </p><p>密码：6cde</p><p><strong>宅急送项目</strong></p><p>链接：<a href="https://pan.baidu.com/s/1UQbC8H0B5QqOimfOq2W2Kg" target="_blank" rel="noopener">https://pan.baidu.com/s/1UQbC8H0B5QqOimfOq2W2Kg</a> </p><p>提取码：oz3h</p><p><strong>Java开发二维码</strong></p><p>链接：<a href="https://pan.baidu.com/s/1MeERyivNIJOaFznLUATEBA" target="_blank" rel="noopener">https://pan.baidu.com/s/1MeERyivNIJOaFznLUATEBA</a> </p><p>提取码：yd6d</p><p><strong>开发云盘</strong></p><p>链接：<a href="https://pan.baidu.com/s/1yq5BbW-Hu19XCYyxnJZHHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1yq5BbW-Hu19XCYyxnJZHHg</a> </p><p>提取码：di81 </p><p><strong>Java开发音频播放器</strong></p><p>链接：<a href="https://pan.baidu.com/s/1LD4WajbwkGajDRmYAdqX7A" target="_blank" rel="noopener">https://pan.baidu.com/s/1LD4WajbwkGajDRmYAdqX7A</a> </p><p>提取码：lxx5</p><p><strong>高并发程序设计</strong></p><p>链接：<a href="https://pan.baidu.com/s/1HpWceif04YiUVd_LvQCFiA" target="_blank" rel="noopener">https://pan.baidu.com/s/1HpWceif04YiUVd_LvQCFiA</a> </p><p>提取码：bj3u</p><p><strong>银行项目</strong></p><p>链接：<a href="https://pan.baidu.com/s/1KpEv23uOf0lPtFe_p3nenQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1KpEv23uOf0lPtFe_p3nenQ</a> </p><p>提取码：8z5i </p><p><strong>数据分析视频和资料：</strong>       </p><p> 链接：<a href="https://pan.baidu.com/s/19t389HP0bx2RJdK6GlTQOA" target="_blank" rel="noopener">https://pan.baidu.com/s/19t389HP0bx2RJdK6GlTQOA</a> </p><p>密码：gezo</p><p><strong>高并发商城</strong></p><p>链接：<a href="https://pan.baidu.com/s/1_TBNzl3uBxIFYfwzPZEPrw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_TBNzl3uBxIFYfwzPZEPrw</a> </p><p>提取码：6cmm</p><p><strong>自动化测试Selenium</strong></p><p>链接：<a href="https://pan.baidu.com/s/1gW2FcR5mcgguVg4w05S2vQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gW2FcR5mcgguVg4w05S2vQ</a> </p><p>提取码：ksxo </p><p><strong>让你的页面性能飞起来</strong></p><p>链接：<a href="https://pan.baidu.com/s/1Lx4mhEK3bygVGWzjMequCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1Lx4mhEK3bygVGWzjMequCg</a> </p><p>提取码：1w12</p><p><strong>Netty开发聊天系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1IbkUVZ82HvRZLFfoP0eYlQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1IbkUVZ82HvRZLFfoP0eYlQ</a> </p><p>提取码：lbno</p><p><strong>报名系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1m1L4shEaGHi_aaRuwHlUeQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1m1L4shEaGHi_aaRuwHlUeQ</a> </p><p>提取码：36o3 </p><p><strong>go语言视频和资料：</strong>         </p><p>链接：<a href="https://pan.baidu.com/s/1bIqDCXld1oHxHTqfhx6Acw" target="_blank" rel="noopener">https://pan.baidu.com/s/1bIqDCXld1oHxHTqfhx6Acw</a> </p><p>密码：xp6v</p><p><strong>手机端开发视频和资料：</strong>      </p><p>链接：<a href="https://pan.baidu.com/s/1z8Q2bZ_ZYzLbjIHRqVjrvQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1z8Q2bZ_ZYzLbjIHRqVjrvQ</a> </p><p>密码：1xgt</p><p><strong>scale视频和资料：</strong>  </p><p>链接：<a href="https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ</a> </p><p>密码：euql</p><p><strong>微服务气象实战：</strong></p><p>链接：<a href="https://pan.baidu.com/s/1A-9DPRPK7D3d2KcocZwRig" target="_blank" rel="noopener">https://pan.baidu.com/s/1A-9DPRPK7D3d2KcocZwRig</a> </p><p>提取码：qz2f </p><p><strong>spark视频和资料：</strong>    </p><p>链接：<a href="https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ</a> </p><p>密码：euql</p><p><strong>响应式一招开发制胜</strong></p><p>链接：<a href="https://pan.baidu.com/s/1yLxWwW2Ql0fo0R-p8mt_qw" target="_blank" rel="noopener">https://pan.baidu.com/s/1yLxWwW2Ql0fo0R-p8mt_qw</a> </p><p>提取码：r52v </p><p><strong>vue.js高仿饿了么</strong></p><p>链接：<a href="https://pan.baidu.com/s/1uqBpqttmP_jCZoao57Gz9g" target="_blank" rel="noopener">https://pan.baidu.com/s/1uqBpqttmP_jCZoao57Gz9g</a> </p><p>提取码：km8w</p><p><strong>大型SpringMVC，Mybatis，Redis，Solr，Nginx，SSM分布式电商项目视频教程</strong></p><p>链接：<a href="https://pan.baidu.com/s/1m71jc-K-0xfJ3zC6Au_byQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1m71jc-K-0xfJ3zC6Au_byQ</a> </p><p>提取码：tjpx </p><p><strong>Spring Cloud</strong></p><p>链接：<a href="https://pan.baidu.com/s/1EkZwDVcqLY8OZ42NxHEuPA" target="_blank" rel="noopener">https://pan.baidu.com/s/1EkZwDVcqLY8OZ42NxHEuPA</a> </p><p>提取码：18nj</p><p><strong>第一套前端全套视频和源码：</strong>       </p><p>链接：<a href="https://pan.baidu.com/s/1-eTjKfe1Ozge0YccblhY4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1-eTjKfe1Ozge0YccblhY4w</a> </p><p>密码：eyxs</p><p><strong>第二套前端全套视频和源码：</strong>           </p><p>链接：<a href="https://pan.baidu.com/s/1e6OC7fBWWQuzU6sGDj0Spw" target="_blank" rel="noopener">https://pan.baidu.com/s/1e6OC7fBWWQuzU6sGDj0Spw</a> </p><p>密码：p8qm</p><p><strong>第三套前端全套视频和源码：</strong>      </p><p>链接：<a href="https://pan.baidu.com/s/1rd6gB64fS17ylqi3A9IA-w" target="_blank" rel="noopener">https://pan.baidu.com/s/1rd6gB64fS17ylqi3A9IA-w</a> </p><p>密码：egy5</p><p><strong>PHP全套第一套视频和资料：</strong>    </p><p>链接：<a href="https://pan.baidu.com/s/13DCQxHpLos6VcB6gY5LZSw" target="_blank" rel="noopener">https://pan.baidu.com/s/13DCQxHpLos6VcB6gY5LZSw</a> </p><p>密码：tmqq</p><p><strong>PHP全套第二套视频和资料：</strong>             </p><p>链接：<a href="https://pan.baidu.com/s/18GF5u8Z4PploD2lYFgs_Ww" target="_blank" rel="noopener">https://pan.baidu.com/s/18GF5u8Z4PploD2lYFgs_Ww</a> </p><p>密码：l84u</p><p><strong>京东手机端制作视频和源码</strong>：             </p><p>链接：<a href="https://pan.baidu.com/s/1GcCgnuYoZoOUadA8IpiywA" target="_blank" rel="noopener">https://pan.baidu.com/s/1GcCgnuYoZoOUadA8IpiywA</a> </p><p>密码：o7z9</p><p><strong>基于Laravel，AngularJS全栈开发知乎</strong></p><p>链接：<a href="https://pan.baidu.com/s/1MKwxwY6GmHJIdT2d3s_F2Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1MKwxwY6GmHJIdT2d3s_F2Q</a> </p><p>提取码：uvv7 </p><p><strong>强力django+杀手级xadmin 打造上线标准的在线教育平台</strong></p><p>链接：<a href="https://pan.baidu.com/s/1enDpWa6jmRh5FR5cMvTFJQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1enDpWa6jmRh5FR5cMvTFJQ</a> </p><p>提取码：bfwy </p><p><strong>前端 Vue+Node+MongoDB高级全栈开发</strong></p><p>链接：<a href="https://pan.baidu.com/s/1EpuXIb7kpVc_7VrstTMWRg" target="_blank" rel="noopener">https://pan.baidu.com/s/1EpuXIb7kpVc_7VrstTMWRg</a> </p><p>提取码：8vcp </p><p><strong>电商秒杀活动视频和源码</strong>               </p><p>链接：<a href="https://pan.baidu.com/s/1RHHV8SOC7Q9BnPRTSVWYNg" target="_blank" rel="noopener">https://pan.baidu.com/s/1RHHV8SOC7Q9BnPRTSVWYNg</a> </p><p>密码：ze4h</p><p><strong>Nginx</strong></p><p>链接：<a href="https://pan.baidu.com/s/1fRjIbk-rsL0HBo1WWaM-OQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1fRjIbk-rsL0HBo1WWaM-OQ</a> </p><p>提取码：5z3a </p><p><strong>前端到后台ThinkPHP开发整站</strong></p><p>链接：<a href="https://pan.baidu.com/s/1FZa8O03NLEOdSeqqb_HgEw" target="_blank" rel="noopener">https://pan.baidu.com/s/1FZa8O03NLEOdSeqqb_HgEw</a> </p><p>提取码：3km2</p><p><strong>快速上手Linux 玩转典型应用</strong></p><p>链接：<a href="https://pan.baidu.com/s/1dPZA47vku2eYQY_PhfCOtg" target="_blank" rel="noopener">https://pan.baidu.com/s/1dPZA47vku2eYQY_PhfCOtg</a> </p><p>提取码：2rdm</p><p><strong>Vue核心技术 vue实战精讲</strong></p><p> 链接：<a href="https://pan.baidu.com/s/1sHStCWy4XJWflft6H_qAKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1sHStCWy4XJWflft6H_qAKA</a> </p><p>提取码：0ybr </p><p><strong>天猫商城购物车实战视频资料：</strong> </p><p>链接：<a href="https://pan.baidu.com/s/1UxtMqsszcAKpZ_2a41raSQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1UxtMqsszcAKpZ_2a41raSQ</a> </p><p>密码：c1rd</p><p><strong>移动端混合APP视频和资料：</strong>             </p><p>链接：<a href="https://pan.baidu.com/s/1bwDYjR8UMk5pgpvPcxWBfA" target="_blank" rel="noopener">https://pan.baidu.com/s/1bwDYjR8UMk5pgpvPcxWBfA</a> </p><p>密码：tkyj</p><p><strong>未知：</strong><br>链接：<a href="https://pan.baidu.com/s/1YqRWtnWJZAFNNCf_Z2SLtA" target="_blank" rel="noopener">https://pan.baidu.com/s/1YqRWtnWJZAFNNCf_Z2SLtA</a> 密码：ccj9<br>链接：<a href="https://pan.baidu.com/s/1I-OJSE-VXbX9dm8aN0QP4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1I-OJSE-VXbX9dm8aN0QP4w</a> 密码：o1vv<br>链接：<a href="https://pan.baidu.com/s/1VFJ7TTwApFUZsQQnogjr-A" target="_blank" rel="noopener">https://pan.baidu.com/s/1VFJ7TTwApFUZsQQnogjr-A</a> 密码：phtf<br>链接：<a href="https://pan.baidu.com/s/14ysuXBUbIw0LLgGoZanclA" target="_blank" rel="noopener">https://pan.baidu.com/s/14ysuXBUbIw0LLgGoZanclA</a> 密码：ar4v<br>链接：<a href="https://pan.baidu.com/s/1H4nUEtw3-WKVN78b6TuklA" target="_blank" rel="noopener">https://pan.baidu.com/s/1H4nUEtw3-WKVN78b6TuklA</a> 密码：87gc<br>链接：<a href="https://pan.baidu.com/s/1ZpLoacAYhk4v8_PzyGzxIg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZpLoacAYhk4v8_PzyGzxIg</a> 密码：yzsb<br>链接：<a href="https://pan.baidu.com/s/1t3DjD7Fa7Vv66wyTND2ddQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1t3DjD7Fa7Vv66wyTND2ddQ</a> 密码：3q1o<br>链接：<a href="https://pan.baidu.com/s/1_qXE5PpkEA3h2BX9dz64Bw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_qXE5PpkEA3h2BX9dz64Bw</a> 密码：jat1<br>链接：<a href="https://pan.baidu.com/s/1JGv7l0dZzq2F9uX7Pr-1kQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1JGv7l0dZzq2F9uX7Pr-1kQ</a> 密码：or26<br>链接：<a href="https://pan.baidu.com/s/18cZZ22va495qjlAAU4jFzA" target="_blank" rel="noopener">https://pan.baidu.com/s/18cZZ22va495qjlAAU4jFzA</a> 密码：w6ri<br>链接：<a href="https://pan.baidu.com/s/1TfV2dfrLnUAYlCVG8ppOlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1TfV2dfrLnUAYlCVG8ppOlA</a> 密码：hpz8<br>链接：<a href="https://pan.baidu.com/s/1nHpOCPTinMDOhi07YFRR4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1nHpOCPTinMDOhi07YFRR4w</a> 密码：xrz0<br>链接：<a href="https://pan.baidu.com/s/1i4xffBJjF-dwFC-QhrZA0g" target="_blank" rel="noopener">https://pan.baidu.com/s/1i4xffBJjF-dwFC-QhrZA0g</a> 密码：mwtw<br>链接：<a href="https://pan.baidu.com/s/1m0EmptzKd7WDpYQ_i5fa4Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1m0EmptzKd7WDpYQ_i5fa4Q</a> 密码：yukp<br>链接：<a href="https://pan.baidu.com/s/1VkFTRv4DfKShN4VrlZyxdA" target="_blank" rel="noopener">https://pan.baidu.com/s/1VkFTRv4DfKShN4VrlZyxdA</a> 密码：runc<br>链接：<a href="https://pan.baidu.com/s/1qKyQEzRABYDXAOK7Mx8XDQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1qKyQEzRABYDXAOK7Mx8XDQ</a> 密码：evf5<br>链接：<a href="https://pan.baidu.com/s/1Ya2NhTvoSNWthhCAvHUnSw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Ya2NhTvoSNWthhCAvHUnSw</a> 密码：82od<br>链接：<a href="https://pan.baidu.com/s/1SgZnAA_OhOZEjlB4Tr5GRA" target="_blank" rel="noopener">https://pan.baidu.com/s/1SgZnAA_OhOZEjlB4Tr5GRA</a> 密码：lbng<br>链接：<a href="https://pan.baidu.com/s/1G1CX_GerVYMYWI3y7bbJRQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1G1CX_GerVYMYWI3y7bbJRQ</a> 密码：yvbn<br>链接：<a href="https://pan.baidu.com/s/1o67q1933TIv0oX3p1_-D9g" target="_blank" rel="noopener">https://pan.baidu.com/s/1o67q1933TIv0oX3p1_-D9g</a> 密码：j5sp<br>链接：<a href="https://pan.baidu.com/s/1iQD04fXlCqrSG1Ezna_iqg" target="_blank" rel="noopener">https://pan.baidu.com/s/1iQD04fXlCqrSG1Ezna_iqg</a> 密码：fjtv<br>链接：<a href="https://pan.baidu.com/s/1Nwau0LZyWxAWp6Yqmsz0fw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Nwau0LZyWxAWp6Yqmsz0fw</a> 密码：pw1l<br>链接：<a href="https://pan.baidu.com/s/1bpJwXzysEgiOfLmULBMBOQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1bpJwXzysEgiOfLmULBMBOQ</a> 密码：vm11<br>链接：<a href="https://pan.baidu.com/s/1YBoNDKUmmRg-ycTMKxeMNg" target="_blank" rel="noopener">https://pan.baidu.com/s/1YBoNDKUmmRg-ycTMKxeMNg</a> 密码：kr6t<br>链接：<a href="https://pan.baidu.com/s/1-LO1aDSdC0Kxy0c7ZNU_Bg" target="_blank" rel="noopener">https://pan.baidu.com/s/1-LO1aDSdC0Kxy0c7ZNU_Bg</a> 密码：2wlf<br>链接：<a href="https://pan.baidu.com/s/1tjmhDwGAn3Mdsof0Iu-efA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tjmhDwGAn3Mdsof0Iu-efA</a> 密码：k3sx<br>链接：<a href="https://pan.baidu.com/s/1n3DuWFFIyyRzGI2RxR7jsw" target="_blank" rel="noopener">https://pan.baidu.com/s/1n3DuWFFIyyRzGI2RxR7jsw</a> 密码：q8zt<br>链接：<a href="https://pan.baidu.com/s/12b_V2LxoBoEP7EWK4Kc_Ew" target="_blank" rel="noopener">https://pan.baidu.com/s/12b_V2LxoBoEP7EWK4Kc_Ew</a> 密码：20sd<br>链接：<a href="https://pan.baidu.com/s/1xGTxVPr-tijhyZPup54Euw" target="_blank" rel="noopener">https://pan.baidu.com/s/1xGTxVPr-tijhyZPup54Euw</a> 密码：4em4<br>链接：<a href="https://pan.baidu.com/s/1Xr3S8Q4DKPoYQkNaW6oOuA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Xr3S8Q4DKPoYQkNaW6oOuA</a> 密码：aw9z<br>链接：<a href="https://pan.baidu.com/s/1ilvozGK8oB_-j5bhlvcB7w" target="_blank" rel="noopener">https://pan.baidu.com/s/1ilvozGK8oB_-j5bhlvcB7w</a> 密码：l4v2<br>链接：<a href="https://pan.baidu.com/s/1uBY0ym-8jrNTn9ues_a-aw" target="_blank" rel="noopener">https://pan.baidu.com/s/1uBY0ym-8jrNTn9ues_a-aw</a> 密码：lbpc<br>链接：<a href="https://pan.baidu.com/s/1wCNWOG-xaLb1yAvsIdK5Og" target="_blank" rel="noopener">https://pan.baidu.com/s/1wCNWOG-xaLb1yAvsIdK5Og</a> 密码：3ayb<br>链接：<a href="https://pan.baidu.com/s/1tZdSrIIYH4bnZrMBOBqGHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1tZdSrIIYH4bnZrMBOBqGHg</a> 密码：0su2</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 资源 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出mysql读书笔记_基础篇</title>
      <link href="/2019/06/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAMySql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2019/06/10/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAMySql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/10/5cfe16e056f9274770.png" alt="mysql封面.png"></p><center><p>听说是本好书鸭</p></center><a id="more"></a><h1 id="深入浅出MySQL"><a href="#深入浅出MySQL" class="headerlink" title="深入浅出MySQL"></a>深入浅出MySQL</h1><h2 id="第一章-安装与配置"><a href="#第一章-安装与配置" class="headerlink" title="第一章 安装与配置"></a>第一章 安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>&emsp;&emsp;一般选择typical,常用组件都会被安装,默认安装到C盘.</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>&emsp;&emsp;在开始目录下找到mysql,运行 MySQL Server Instance<br>Configuration Wizard.</p><p>详细配置(图文)(Detail Configuration)</p><p><img src="https://i.loli.net/2019/06/10/5cfe193c21a7b88362.png" alt="第一步.png"></p><p><img src="https://i.loli.net/2019/06/10/5cfe193c23b4c48697.png" alt="第二步.png"></p><blockquote><p>不同的数据库引擎的的区别  </p><ul><li>多功能数据库(Multifunction Database)<br>对事务性(InnoDB)和非事务性(MyISAM)的存储引擎的存取都很快  </li><li>事务性数据库(Transactional DataBase Only)  <pre><code>优化了事务性存储引擎,但非事务性也能用</code></pre></li><li>非事务性数据库(Non-Transactional DataBase Only)  <pre><code>优化了fe非事务性存储引擎,但事务性不能用!  </code></pre></li><li><strong>注意:选择非事务性数据库是,事务性不能用</strong>  </li></ul></blockquote><p>存储引擎<br>可以理解为不同的表类型</p><p><img src="https://i.loli.net/2019/06/10/5cfe21feb033374757.jpg" alt="第三步.jpg"></p><p><img src="https://i.loli.net/2019/06/10/5cfe21fedcb5213321.jpg" alt="第四步.jpg"></p><p><img src="https://i.loli.net/2019/06/10/5cfe21fed4b4650327.jpg" alt="第五步.jpg"></p><p><img src="https://i.loli.net/2019/06/10/5cfe21fee97ff67092.jpg" alt="第六步.jpg"></p><p><img src="https://i.loli.net/2019/06/10/5cfe21ff5fa5d56382.png" alt="第七步.png"></p><p><img src="https://i.loli.net/2019/06/10/5cfe21feb356788599.jpg" alt="第八步.jpg"></p><h3 id="启动和关闭mysql服务"><a href="#启动和关闭mysql服务" class="headerlink" title="启动和关闭mysql服务"></a>启动和关闭mysql服务</h3><blockquote><p>mysql服务和mysql数据库  </p><ul><li>mysql服务<br>&emsp;&emsp;一系列后台服务  </li><li>mysql数据库<br>&emsp;&emsp;一系列的数据目录和数据文件  </li><li>mysql数据库必须在mysql服务启动后才可以进行访问.</li></ul></blockquote><ul><li><p>windows<br>启动:   </p><ol><li>控制面板-&gt;管理工具-&gt;服务-&gt;开启</li><li>在cmd中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li></ol><p>关闭:  </p><ol><li>控制面板-&gt;管理工具-&gt;服务-&gt;关闭</li><li>在cmd中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure></li></ol></li><li><p>linux<br>在root账户下<br>启动:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure><p>重启:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>关闭:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二章-SQL基础"><a href="#第二章-SQL基础" class="headerlink" title="第二章 SQL基础"></a>第二章 SQL基础</h2><p>SQL Structure Query Language    结构化查询语言 </p><h3 id="sql分类"><a href="#sql分类" class="headerlink" title="sql分类"></a>sql分类</h3><p>sql主要可以分为<strong>3</strong>类:</p><blockquote><ol><li><p>DDL(Data Definition Languages)语句:<br>数据定义语言,这些语句定义了不同的数据段,数据库,表,列,索引等数据库对象定义.  </p><blockquote><p>常用关键词:create,drop,alter等  </p></blockquote></li><li><p>DML(Data Manipulation Language)语句:<br>数据库操作语句,用于添加,删除,更新和查询数据库记录,并检查数据完整性.</p><blockquote><p>常用关键词:insert,delete,update,select等</p></blockquote></li><li><p>DCL(Data Control Language)语句:<br>数据控制语句,用于控制不同的数据段直接的许可和访问级别的语句.这些语句定义了数据库,表,字段,用户的访问权限和安全级别.</p><blockquote><p>主要关键词:grant,revoke等</p></blockquote></li></ol></blockquote><h4 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h4><p>简单来说就是对数据库内部的对象进行创建,删除,修改的操作语言.</p><blockquote><p>与DML语言最大的区别:<br>&emsp;&emsp;DML只对表内部数据进行操作,不涉及表定义,结构的修改,更不会涉及其他对象.DDL更多的是被数据库管理员(DBA)使用,一般很少被开发人员使用.  </p></blockquote><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. <strong>创建数据库</strong></h5><h5 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库:"></a><strong>连接mysql数据库</strong>:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u[user] -p[password]</span><br></pre></td></tr></table></figure><p>mysql是客户端命令,-u后面跟连接的数据库用户,-p后面跟密码,也可以不直接写出密码,之后会让你输入的</p><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a><strong>创建数据库</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [dbname];</span><br></pre></td></tr></table></figure><p>创建成功后会显示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Query OK,1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><ul><li>Query OK  表示命令执行成功(所有的DDL和DML,不包括select,执行成功都显示这个)</li><li>1 row affected 表示影响到了数据库的一行记录</li><li>0.00 sec 表示执行的时间</li></ul></blockquote><p>如果数据库已经存在,则显示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1007 (HY000):Can&apos;t Create database &apos;[dbname]&apos;;</span><br></pre></td></tr></table></figure><h5 id="那如何查看系统中有哪些数据库呢"><a href="#那如何查看系统中有哪些数据库呢" class="headerlink" title="那如何查看系统中有哪些数据库呢?"></a>那如何<strong>查看系统中有哪些数据库</strong>呢?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><blockquote><p>数据库创建时,创建的表及其功能:  </p><ul><li>information_schema:<br>主要存储了系统中的一些数据库对象信息,比如:用户表信息,列信息,权限信息,字符集信息,分区信息等.</li></ul><ul><li>cluster:<br>存储了系统的集群信息.</li><li>mysql:<br>存储了用户的权限信息.</li><li>test:<br>系统自动创建的测试数据库,任何用户都可以使用.</li></ul></blockquote><h5 id="选择要操作的数据库"><a href="#选择要操作的数据库" class="headerlink" title="选择要操作的数据库:"></a><strong>选择要操作的数据库</strong>:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE [dbname];</span><br></pre></td></tr></table></figure><p>成功切换后会返回:Database changed</p><h5 id="查看数据库中所有表"><a href="#查看数据库中所有表" class="headerlink" title="查看数据库中所有表:"></a><strong>查看数据库中所有表</strong>:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure><p>有表则显示表,没有则显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2. 删除数据库"></a>2. <strong>删除数据库</strong></h5><p>命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [dbname];</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>:这里操作成功后显示的是”<strong>0 row affected</strong>“,原因是MySQL里面drop的结果都是0 row affected.</p></blockquote><blockquote><p><strong>注意</strong>:数据库删除后,里面的数据也会跟着全部删除,所以在删除前要备份好数据.</p></blockquote><h5 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3. 创建表"></a>3. <strong>创建表</strong></h5><p>命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [tablename] (</span><br><span class="line">    column1_name column1_type constraints,</span><br><span class="line">    column2_name column2_type constraints,</span><br><span class="line">    column_last_name column_last_type constraints</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>注意</strong>:  MySQL的表名是以目录的形式存在,所以支持任何目录名支持的字符.</li></ul></blockquote><blockquote><p>column_name是列名.<br>column_type是列的数据类型<br>constraints是约束条件</p></blockquote><p>例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'emp'</span> (</span><br><span class="line">    <span class="string">'ename'</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">'hiredate'</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">'idx_emp_ename'</span> (<span class="string">'ename'</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gbk</span><br></pre></td></tr></table></figure><h5 id="查看表定义"><a href="#查看表定义" class="headerlink" title="查看表定义"></a><strong>查看表定义</strong></h5><p>方法一:(简单,以表的形式显示)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC [tablename];</span><br></pre></td></tr></table></figure><p>方法二:(详细,显示创建语句)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE [tablename];</span><br></pre></td></tr></table></figure><h5 id="4-删除表"><a href="#4-删除表" class="headerlink" title="4. 删除表"></a>4. <strong>删除表</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [tablename];</span><br></pre></td></tr></table></figure><h5 id="5-修改表"><a href="#5-修改表" class="headerlink" title="5. 修改表"></a>5. <strong>修改表</strong></h5><ol><li><p><strong>修改表类型</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename MODIFY [COLUMN] column_definition [FIRST|AFTER col_name]</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table emp modify ename varchar(20);</span><br></pre></td></tr></table></figure></li><li><p><strong>增加表字段</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename ADD [COLUMN] column_definition [FIRST|AFTER col_name]</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table emp add column age int(3);</span><br></pre></td></tr></table></figure></li><li><p><strong>删除表字段</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename DROP [COLUMN] col_name</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table emp drop column age;</span><br></pre></td></tr></table></figure></li><li><p><strong>字段改名</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALERT TABLE tablename CHANGE [COULMN] old_col_name column_definition [FIRST|AFTER col_name]</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table emp change age age1 int(4);</span><br></pre></td></tr></table></figure><blockquote><p>注意:change和modify都可以修改表的定义,不同的是change后面需要写两次列名,不方便.但是change的优点是可以的修改列名称,modify则不能</p></blockquote></li></ol><ol start="5"><li><p><strong>修改字段排列顺序</strong><br> 前面修改和新增后面都跟了一个可选项:<em>first|after column_name</em>,这个选项用来修改字段在表中的位置,默认ADD增加的新字段在表的最后位置,而CHANGE/MODIFY默认不会修改字段位置.</p><blockquote><p><strong>注意:</strong>CHANGE/FIRST|AFTER COLUMN 这些关键词都属于MySQL在标准SQL上的扩展,在其他数据库上不一定适用.</p></blockquote></li><li><p><strong>更改表明</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALERT TABLE tablename RENAME [TO] new_tablename</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert table emp rename emp1;</span><br></pre></td></tr></table></figure></li></ol><h4 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h4><p>​    用于对数据库中表记录的操作,包含表记录的插入(insert),更新(update),删除(delete),查询(select).</p><h5 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename(field1,field2,....fieldn) VALUES (vlaues1,values2,...valuesn);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into emp(ename,hiredate,sal) values (&apos;zzz&apos;,&apos;2001-01-01&apos;);</span><br></pre></td></tr></table></figure><p><strong>不指定字段名</strong>(但values后的顺序应该和字段的排序一致)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename  VALUES (vlaues1,values2,...valuesn);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into emp values (&apos;zzz&apos;,&apos;2001-01-01&apos;);</span><br></pre></td></tr></table></figure><p><strong>省略部分值</strong></p><p>含可空字段,非空但含有默认值字段,自增字段,可以不在insert后的字段列表里出现,values后面只写对应字段的value.</p><p>如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into emp (ename,sal) values (&apos;dony&apos;,1000);</span><br></pre></td></tr></table></figure><p><strong>插入多条</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename(field1,field2,....fieldn) </span><br><span class="line">VALUES</span><br><span class="line">(vlaues1,values2,...valuesn),</span><br><span class="line">(vlaues1,values2,...valuesn),</span><br><span class="line">...</span><br><span class="line">(vlaues1,values2,...valuesn);</span><br></pre></td></tr></table></figure><h5 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h5><p>通过update更新数据.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tablename SET field1=value1,field2=value2....fieldn=valuen [WHERE CONDITION]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update emp set sal=4000 where ename=&apos;lisa&apos;;</span><br></pre></td></tr></table></figure><p><strong>更新多个表的数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t1,t2...tn set t1.field1=expr1,tn.fieldn=exprn [WHERE CONDITION]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uodate emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename where a.deptno = b.deptno;</span><br></pre></td></tr></table></figure><h5 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h5><p>用delete删除记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM tablename [WHERE CONDITION]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from emp where ename=&apos;dony&apos;;</span><br></pre></td></tr></table></figure><p><strong>删除多个表记录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1,t2...tn FROM t1,t2...tn[WHERE CONDITION]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong>如果from后面的表名用别名,则delete后面也要用相应的别名,否则会提示语法错误.</p></blockquote><blockquote><p><strong>注意:</strong>无论是多表还是单表,不加WHERE条件都会把所有记录都删掉,操作时小心.</p></blockquote><h5 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h5><p><strong>基本语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tablename [WHERE CONDITION]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp;</span><br></pre></td></tr></table></figure><p>其中”*”表示要将所有的记录都选出来,也可以用逗号分隔的所有字段来代替.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,sal from emp;</span><br></pre></td></tr></table></figure><h6 id="查询不重复的记录"><a href="#查询不重复的记录" class="headerlink" title="查询不重复的记录"></a>查询不重复的记录</h6><p>通过distinct实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct deptno fromemp;</span><br></pre></td></tr></table></figure><h6 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h6><p>通过where关键词实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where deptno = 1;</span><br></pre></td></tr></table></figure><blockquote><p>除了=,还可以使用&gt;,&lt;,&gt;=,&lt;=,!=等比较运算符,还可以用and,or实现多条件联合查询</p></blockquote><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal=2000 and deptno=1;</span><br></pre></td></tr></table></figure><h6 id="排序和限制"><a href="#排序和限制" class="headerlink" title="排序和限制"></a>排序和限制</h6><p>通过order by实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tablename [WHERE CONDITION] [ORDER BY field (DESC|ASC),field1 (DESC|ASC)...fieldn(DESC|ASC)]</span><br></pre></td></tr></table></figure><blockquote><p>DESC和ASC是排序关键词,DESC表示按字段排序,ASC表示升序,如果不写默认升序排列.ORDER BY后可以跟多个字段,并且每个字段可以有不同的排序顺序.</p></blockquote><h6 id="部分显示"><a href="#部分显示" class="headerlink" title="部分显示"></a>部分显示</h6><p>通过limit实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ...... [LIMIT offset_start,row_count]</span><br></pre></td></tr></table></figure><blockquote><p>offset_start    记录起始偏移量,默认为0</p><p>row_count    显示行数</p></blockquote><blockquote><p><strong>注意:</strong>limit是MySQL扩展SQL92后的语法,在其他数据库上并不能通用.</p></blockquote><h6 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT [field1,field2...fieldn] fun_name</span><br><span class="line">FROMtablename</span><br><span class="line">[WHERE where_contition]</span><br><span class="line">[GROUP BY field1,field2...field</span><br><span class="line">[WITH ROLLUP]]</span><br><span class="line">[HAVING where_contition]</span><br></pre></td></tr></table></figure><blockquote><p>参数说明:</p><ul><li>fun_name 表示要做的聚合操作,也就是聚合函数,常用的有sum(求和),count(*)(记录数),max(最大值),MIN(最小值).</li><li>GROUP BY 关键字表示要进行分类聚合的字段,比如要按照部门分类统计员工数量,部门就应该写在group by后面.</li><li>WITH ROLLUP 是可选语法,表示是否对分类聚合后的结果进行再汇总</li><li>HAVING 关键字表示对分类后的结果在进行条件的过滤.</li></ul><p><strong>注意:</strong>having和where的区别在于having是对聚合后的结果进行过滤,而where是在聚合前就对记录进行过滤,如果逻辑允许,我们尽可能用where先过滤记录,这样因为结果集减小,将对聚合效率大大提高,再根据逻辑看是否用having进行再过滤.</p></blockquote><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#要统计公司的总人数</span><br><span class="line">select count(1) from emp;</span><br><span class="line"></span><br><span class="line">#在此基础上,要统计各部门人数</span><br><span class="line">select dept,count(1) from emp group by deptno;</span><br><span class="line"></span><br><span class="line">#更细一点,既要统计各部门人数,又要统计总人数</span><br><span class="line">select deptno,count(1) from emp group by deptno with rollup;</span><br><span class="line"></span><br><span class="line">#统计人数大于1人的部门</span><br><span class="line">select deptno,count(1) from emp group by deptno having count(1)&gt;1;</span><br><span class="line"></span><br><span class="line">#统计员工的薪水总额,最高和最低薪水</span><br><span class="line">select sum(sal),max(sal),min(sal) from emp;</span><br></pre></td></tr></table></figure><h6 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h6><p><strong>需求:</strong>需要显示多个表中的字段</p><p><strong>分类:</strong></p><ol><li><p>内连接</p></li><li><p>外连接</p><p>两者区别:内链接仅选出俩张表互相匹配的记录,外连接会选出其他不匹配的记录.(常用内连接)</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询所有雇员的名字和所在部门的名字</span><br><span class="line">select ename,deptname from emp,dept where emp.deptno=dept.deptno;</span><br></pre></td></tr></table></figure><p>外连接又分为:</p><ul><li>左外连接:包含所有左边表中所有的记录,甚至右边表中没有和它匹配的记录.</li><li>右外连接:包含所有右边表中所有的记录,甚至左边表中没有和它匹配的记录.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#左外连接</span><br><span class="line">select ename,deptname from emp left join dept on emp.deptno = dept.deptno;</span><br><span class="line">#右外连接</span><br><span class="line">select ename,deptname from dept right join emp on dept.deptno = emp.deptno;</span><br><span class="line">#两个的结果一样(两者可以互相转换)</span><br></pre></td></tr></table></figure><h6 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h6><p><strong>需求:</strong>该查询的条件是,另一个查询的结果.</p><p><strong>关键字:</strong>in ,not in ,= ,!= ,exists ,not exists等</p><p> 如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where deptno in (select deptno from dept);</span><br><span class="line"></span><br><span class="line">#如果查询记录唯一,可以用=代替in</span><br><span class="line">select * from emp where deptno = (select deptno from dept);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong></p><ul><li><p>表连接很多情况下用于优化子查询</p></li><li><p>MySQL4.1之前版本不支持子查询,需要用表连接来实现子查询.</p></li></ul></blockquote><h6 id="记录联合"><a href="#记录联合" class="headerlink" title="记录联合"></a>记录联合</h6><p><strong>需求:</strong>将两个查询结果合并到一个表显示.</p><p><strong>关键词:</strong>union ,union all</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM t2</span><br><span class="line">....</span><br><span class="line">UNION |UNION ALL</span><br><span class="line">SELECT * FROM tn;</span><br></pre></td></tr></table></figure><blockquote><p>union 和 union all的主要区别:</p><p>union all是吧结果集合并在一起</p><p>union 是将union all 后的结果进行一次distinct,去除重复记录后的结果.</p></blockquote><h4 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h4><blockquote><p><strong>作用:</strong>主要是DBA用来管理系统中的对象权限时使用.</p></blockquote><h2 id="第三章-MySQL支持的数据类型"><a href="#第三章-MySQL支持的数据类型" class="headerlink" title="第三章 MySQL支持的数据类型"></a>第三章 MySQL支持的数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th align="center">整数类型</th><th align="center">字节</th><th align="center">最小值</th><th align="center">最大值</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1</td><td align="center">有符号 -128<br>无符号0</td><td align="center">有符号 127<br>无符号 255</td></tr><tr><td align="center">SMALLINT</td><td align="center">2</td><td align="center">有符号 -32768<br>无符号 0</td><td align="center">有符号 32767<br>无符号 65535</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3</td><td align="center">有符号 -8388608<br>无符号 0</td><td align="center">有符号 8388607<br>无符号 1677215</td></tr><tr><td align="center">INT,INTEGER</td><td align="center">4</td><td align="center">有符号 -2147483648<br>无符号 0</td><td align="center">有符号 2147483647<br>无符号 4294967295</td></tr><tr><td align="center">BIGINT</td><td align="center">8</td><td align="center">有符号 -9223372036854775808<br>无符号 0</td><td align="center">有符号 9223372036854775807<br>无符号 18446744073709551615</td></tr><tr><td align="center"><strong>浮点数类型</strong></td><td align="center"><strong>字节</strong></td><td align="center"><strong>最小值</strong></td><td align="center"><strong>最大值</strong></td></tr><tr><td align="center">FLOAT</td><td align="center">4</td><td align="center">土1.175494351E-38</td><td align="center">土3.402823466E+38</td></tr><tr><td align="center">DOUBLE</td><td align="center">8</td><td align="center">土2.225.738585072014E-308</td><td align="center">土1.7976931348623157E+308</td></tr><tr><td align="center"><strong>定点数类型</strong></td><td align="center"><strong>字节</strong></td><td align="center"><strong>描述</strong></td><td align="center"></td></tr><tr><td align="center">DEC(M,D)<br>DECIMAL(M,D)</td><td align="center">M+2</td><td align="center">最大值取值范围与DOUBLE相同,给定DECIMAL的有效取值范围由M和D决定</td><td align="center"></td></tr><tr><td align="center"><strong>位类型</strong></td><td align="center"><strong>字节</strong></td><td align="center"><strong>最小值</strong></td><td align="center"><strong>最大值</strong></td></tr><tr><td align="center">BIT(M)</td><td align="center">1~8</td><td align="center">BIT(1)</td><td align="center">BIT(64)</td></tr></tbody></table><blockquote><p>整数类型分为:</p><ul><li><p>tinyint</p></li><li><p>smallint</p></li><li><p>mediumint</p></li><li><p>int</p></li><li><p>bigint</p><p>如果超出类型范围就会发生”Out of range”的错误.</p></li></ul></blockquote><p>在MySQL中,整型数据还支持在类型名称后的小括号内指定显示宽度,如果不显示宽度默认为int(11),一般还配合zerofill使用(用0填充)</p><p>例:</p><blockquote><p>int(5)</p><p>表示数值宽度小于5时,在数字前面填满宽度.</p><p>…..int(5) zerpfill;</p><p>用0填满</p></blockquote><blockquote><p>所有整数类型都有一个可选属性UNSIGNED(无符号),如果字段里保存非负数或者需要较大上线的数值,可选此项,如果一个列被指定为zerofill,则MySQL自动为该列添加UNSIGNED属性.</p><p>整数类型还有一个属性:AUTO_INCREMENT.在需要产生唯一标识符或者顺序值时,可以利用该属性,该属性只用于整型.值一般从1开始,每行加1,在插入null时,系统会默认在该列中存入一行比上一行大一的值,一个表最多只能有一个AUTO_INCREMENT列,在设计表时,该列应该定义为NOT NULL,并且定义为PRIMARY KEY或UNIQUE键.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table AI(ID INT AUTO_INCREMENT NOT NULL,PRIMARY KEY);</span><br><span class="line">create table AI(ID INT AUTO_INCREMENT NOT NULL,UNIQUE(ID));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> mysql </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 深入浅出mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode刷题之路_初级_数组篇</title>
      <link href="/2019/06/10/leetCode%E5%88%B7%E9%A2%98%E4%B9%8B%E8%B7%AF_%E5%88%9D%E7%BA%A7_%E6%95%B0%E7%BB%84%E7%AF%87/"/>
      <url>/2019/06/10/leetCode%E5%88%B7%E9%A2%98%E4%B9%8B%E8%B7%AF_%E5%88%9D%E7%BA%A7_%E6%95%B0%E7%BB%84%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/10/5cfdad429ef0611039.png" alt="QQ图片20190610090653.png"></p><center><p>学习有关数组的算法的的题的总结</p></center><a id="more"></a><hr><h1 id="初级算法数组篇"><a href="#初级算法数组篇" class="headerlink" title="初级算法数组篇"></a>初级算法数组篇</h1><h2 id="从排序数组中删除重复项"><a href="#从排序数组中删除重复项" class="headerlink" title="从排序数组中删除重复项"></a>从排序数组中删除重复项</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><blockquote><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],<br>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。<br>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><h3 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeDuplicates(int[] nums) &#123;</span><br><span class="line">        if (nums.length==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">            &#125;</span><br><span class="line">        int num = 0;</span><br><span class="line">        int mod = 0;</span><br><span class="line">        if(nums[0]&lt;nums[nums.length-1]) &#123;</span><br><span class="line">            mod = nums[0] - 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            mod = nums[0] + 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i:nums)&#123;</span><br><span class="line">            if (mod!=i)&#123;</span><br><span class="line">                mod=i;</span><br><span class="line">                System.out.println(mod);</span><br><span class="line">                nums[num]=i;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>&emsp;&emsp;因为是排序数组,所以顺序是排好的,取一个数组中没有的值,作为mod标识,并定义一个计数器.和数组中的每一位进行对比,如果不一样,则将当前数组的值给mod,并且输出当前mod,计数器加一,通过这样过滤重复的数字,并输出数组值.</p><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Array1_1 &#123;</span><br><span class="line">    public  int removeDuplicates(int[] nums) &#123;</span><br><span class="line">        if (nums.length == 0) return 0;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for (int j = 1; j &lt; nums.length; j++) &#123;</span><br><span class="line">            if (nums[j] != nums[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return i + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路-官方方法"><a href="#思路-官方方法" class="headerlink" title="思路(官方方法)"></a>思路(官方方法)</h4><p>方法：双指针法</p><ul><li>数组完成排序后，我们可以放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。</li><li>只要 nums[i] = nums[j]，我们就增加 j 以跳过重复项。</li><li>当我们遇到 nums[j] != nums[i]时，跳过重复项的运行已经结束，</li><li>因此我们必须把它（nums[j]）的值复制到nums[i+1]。</li><li>然后递增 i，接着我们将再次重复相同的过程，直到 j 到达数组的末尾为止。</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><ol><li>在涉及到数组的长度的相关的问题时,要注意<strong>数组长度为0</strong>的情况</li><li>在进行可用性测试时,测试用例要充足,覆盖面要广.</li></ol><h2 id="买卖股票的的最佳时机-2"><a href="#买卖股票的的最佳时机-2" class="headerlink" title="买卖股票的的最佳时机(2)"></a>买卖股票的的最佳时机(2)</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初级算法 </tag>
            
            <tag> 刷题 </tag>
            
            <tag> leecCode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(七)_报错填坑</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%83)_%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%83)_%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<center>我走过坑.....不,是黑洞.</center><a id="more"></a><h1 id="报错填坑"><a href="#报错填坑" class="headerlink" title="报错填坑"></a>报错填坑</h1><h2 id="出现-hexo-g-d-报错"><a href="#出现-hexo-g-d-报错" class="headerlink" title="出现 hexo g -d 报错"></a>出现 hexo g -d 报错</h2><p>在将博客推送到Github上的时候在git bash 下运行hexo g -d命令出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> fatal: HttpRequestException encountered.</span><br><span class="line">   ▒▒▒▒▒▒▒▒ʱ▒▒▒▒</span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/do                                                                     </span><br><span class="line">cs/troubleshooting.html</span><br><span class="line">Error: fatal: HttpRequestException encountered.</span><br><span class="line">           ʱ   </span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (F:\blog\huahua462.github.io\node_modules\hexo-u                                                                    </span><br><span class="line"> til\lib\spawn.js:37:17)</span><br><span class="line">    at emitTwo (events.js:126:13)</span><br><span class="line">    at ChildProcess.emit (events.js:214:7)</span><br><span class="line">    at ChildProcess.cp.emit (F:\blog\huahua462.github.io\node_modules\cross-spaw                                                                     </span><br><span class="line">n\lib\enoent.js:40:29)</span><br><span class="line">    at maybeClose (internal/child_process.js:925:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5)</span><br></pre></td></tr></table></figure><p>解决方案:<br>&emsp;首先在“你GitHub注册用户名.github.io”本地文件夹下有一个名为“_config.yml”的配置文件，这个称为站点配置文件，使用NotePad++打开并拉到文件最后，将：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: https://github.com/你GitHub注册用户名/你GitHub注册用户名.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: git@github.com:你GitHub注册用户名/你GitHub注册用户名.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>即可；</p><hr><h2 id="出现-error-deployer-not-found-git-或者-error-deployer-not-found-github-的错误"><a href="#出现-error-deployer-not-found-git-或者-error-deployer-not-found-github-的错误" class="headerlink" title="出现 error deployer not found:git 或者 error deployer not found:github 的错误"></a>出现 error deployer not found:git 或者 error deployer not found:github 的错误</h2><p>解决办法：执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr><h2 id="出现类似-FATAL-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-70-column-1-…-错误"><a href="#出现类似-FATAL-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-70-column-1-…-错误" class="headerlink" title="出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误"></a>出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误</h2><p> 解决办法：_config.yml中配置项的冒号后面要用空格隔开，再跟内容</p><hr><h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><p>解决办法：将文件的内容编码改为UTF8格式</p><hr><h2 id="‘hexo-sever’能够成功运行，但是localhost-4000无法访问"><a href="#‘hexo-sever’能够成功运行，但是localhost-4000无法访问" class="headerlink" title="‘hexo sever’能够成功运行，但是localhost:4000无法访问"></a>‘hexo sever’能够成功运行，但是localhost:4000无法访问</h2><p>解决办法：执行hexo s -p 5000，改用其他端口启动</p><hr>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(六)_网站配置</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%85%AD)_%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%85%AD)_%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<center>给网站起个名儿吧!</center><a id="more"></a># 配一下相关信息* 网站配置文件的存储位置：hexo_blog/_config.yml。* 配置文件中，冒号后面一定要加空格。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"># 网站信息</span><br><span class="line">#标题</span><br><span class="line">title: 但行好事,莫问前程.</span><br><span class="line">#副标题</span><br><span class="line">subtitle: 记录学习的技能和遇到的问题</span><br><span class="line">#网站描述</span><br><span class="line">description: 上课睡觉觉的个人博客</span><br><span class="line">#作者昵称</span><br><span class="line">author: 上课睡觉觉</span><br><span class="line">#网站语言，默认英语，设置简体汉语</span><br><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line">#时区，默认电脑时区</span><br><span class="line">#timezone: </span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 网址设置</span><br><span class="line">#如果网站是放在子目录中，将url设置成&apos;http://yoursite.com/child&apos;，将root设置成&apos;/child/&apos;</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">#网址</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">#网站根目录。如果网站是放在子目录中，将root设置成&apos;子目录名&apos;</span><br><span class="line">root: /</span><br><span class="line">#文章链接地址格式 。即文章存放的目录。</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 目录设置</span><br><span class="line">#资源文件夹，放在里面的文件会上传到github中</span><br><span class="line">source_dir: source</span><br><span class="line">#公共文件夹，存放生成的静态文件</span><br><span class="line">public_dir: public</span><br><span class="line">#标签文件夹，默认是tags。实际存放在source/tags中。</span><br><span class="line">tag_dir: tags</span><br><span class="line">rss_dir: rss</span><br><span class="line">#档案文件夹，默认是archives。</span><br><span class="line">archive_dir: archives</span><br><span class="line">#分类文件夹，默认是categories。实际存放在source/categories中。</span><br><span class="line">category_dir: categories</span><br><span class="line">#代码文件夹，默认是downloads/code</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">#国际化文件夹，默认跟language相同</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">#不需要渲染的文件夹或文件夹,放在[]中</span><br><span class="line"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span><br><span class="line">skip_render: [baidu_verify_R9MZjdMkXT.html, google0f8fac7da2b48ef8.html, README.md, 模板.md]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写作选项</span><br><span class="line"># 新建博文（帖子）的默认名称</span><br><span class="line"># File name of new posts</span><br><span class="line">new_post_name: :title.md </span><br><span class="line">#默认布局模板是post，而不是draft和page</span><br><span class="line">default_layout: post</span><br><span class="line">#是否将标题转换成标题形式（首字母大写）</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">#在新标签页面中打开网页</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">#是否渲染草稿</span><br><span class="line">render_drafts: false</span><br><span class="line">#启动 Asset 文件夹</span><br><span class="line">post_asset_folder: false</span><br><span class="line">#把链接改为与根目录的相对位址</span><br><span class="line">relative_link: false</span><br><span class="line">#显示未来的文章</span><br><span class="line">future: true</span><br><span class="line">#代码块的设置</span><br><span class="line">highlight:</span><br><span class="line">  enable: true          #  使用代码高亮</span><br><span class="line">  line_number: true # 显示行号</span><br><span class="line">  auto_detect: true  # 自动检测语言</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分类和标签</span><br><span class="line"># 默认分类</span><br><span class="line">default_category: uncategorized</span><br><span class="line">#分类别名</span><br><span class="line">category_map:</span><br><span class="line">#标签别名</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 日期和时间格式</span><br><span class="line">#Hexo 使用 Moment.js 来解析和显示时间。</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分页配置</span><br><span class="line"># ---------------下面选项需要对应插件的支持---------------</span><br><span class="line"># npm install hexo-generator-index --save</span><br><span class="line"># npm install hexo-generator-archive --save</span><br><span class="line"># npm install hexo-generator-category --save</span><br><span class="line"># npm install hexo-generator-tag --save</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">#每页显示的文章量 </span><br><span class="line">#per_page: 20</span><br><span class="line">#首页的分页设置</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line">#归档页的分页设置</span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 30</span><br><span class="line">  yearly: true</span><br><span class="line">  monthly: true</span><br><span class="line">#标签页的分页设置</span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line"></span><br><span class="line">#分页路径，在public中可以看到</span><br><span class="line">#pagination_dir: page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Extensions 拓展插件配置</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">plugins: </span><br><span class="line">baidusitemap: </span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置RSS</span><br><span class="line">feed: </span><br><span class="line">  #feed 类型 (atom/rss2)</span><br><span class="line">  type: atom   </span><br><span class="line">  #rss 路径</span><br><span class="line">  path: atom.xml  </span><br><span class="line">  #在 rss 中最多生成的文章数(0显示所有)</span><br><span class="line">  limit: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自定义站点内容搜索</span><br><span class="line"># 需要先安装插件：</span><br><span class="line"># npm install hexo-generator-search --save</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  # 如只想索引文章，可设置为post</span><br><span class="line">  field: all </span><br><span class="line"></span><br><span class="line"># 主题配置</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">#theme: false #禁用主题</span><br><span class="line">#theme: landscape</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 部署配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #repo: https://github.com/xuezhisd/xuezhisd.github.io.git</span><br><span class="line">  repo: </span><br><span class="line">    # 部署到github</span><br><span class="line">    github: git@github.com:xuezhisd/xuezhisd.github.io.git,master</span><br><span class="line">    # 部署到coding.net。取消注释，可同时部署</span><br><span class="line">    #coding: git@git.coding.net:xuezhisd/blog.git,coding-pages</span><br><span class="line">  #type: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>主题的配置文件<br>默认主题是landscape<br>hexo官方主题页面。从中选择喜欢的主题，下载并放到themes文件中。<br>我使用的主题是NexT。</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(五)_nexT美化</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%94)_nexT%E7%BE%8E%E5%8C%96/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%94)_nexT%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<center>我也要美美的博客!!!!</center><a id="more"></a><h1 id="next美化"><a href="#next美化" class="headerlink" title="next美化"></a>next美化</h1><h2 id="HexoNext主题如何设置社交侧边栏"><a href="#HexoNext主题如何设置社交侧边栏" class="headerlink" title="HexoNext主题如何设置社交侧边栏"></a>HexoNext主题如何设置社交侧边栏</h2><p>首先在主题配置文件_config.yml里找到social</p><p>一开始，social和下面的那些东西都是有#号的，想启用哪个就启用哪个，</p><p>|| 后面的就是在图标库里对应的图标名</p><p>以前我一设置侧边栏图标网站就崩溃不能上了，有一个主要的原因：</p><p>&emsp;<strong>social前面的#号必须去掉，注意，是social！！！</strong>  </p><p>至于那些yourname就是你在哪个社交软件的名称，也可以加上去别的社交账号.</p><h2 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h2><p>在 themes/*/source/css/_custom/custom.styl 中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background:url(/images/bg.jpg);</span><br><span class="line">    background-size:cover;</span><br><span class="line">    background-repeat:no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h2><p>打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.site-meta &#123;</span><br><span class="line">  background: $blue; //修改为自己喜欢的颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h2><p>在/themes/*/source/js/src下新建文件click.js，接着把以下粘贴到clicklove.js文件中。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>在\themes*\layout_layout.swig文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h2><p>选择样式<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>,</p><p>修改图片跳转链接,将&lt;a href=”<a href="https://github.com/you&quot;&gt;中的链接换为自己Github链接：" target="_blank" rel="noopener">https://github.com/you&quot;&gt;中的链接换为自己Github链接：</a></p><p>打开 themes/next/layout/_layout.swig 文件，把代码复制到<div class="headband"></div>下面。</p><h2 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h2><p>打开 themes/*/source/css/_custom/custom.styl ,向里面加代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 0px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>修改themes/*/_config.yml，把 false 改为 true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入到 hexo 的根目录，在 package.json 中添加依赖: “hexo-tag-cloud”: “2.0.*” 操作如下：</p><p>使用命令行进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-cloud@^2.0.* --save</span><br></pre></td></tr></table></figure><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>插件的配置需要对应的环境，可以在主题文件夹里找一下，有没有对应的渲染文件，然后根据渲染文件的类型，选择对应的插件配置方法。</p><p>swig 用户 (Next主题在列)<br>在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">    &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如图:<br><img src="https://i.loli.net/2019/06/06/5cf884209152a85270.png" alt="QQ图片20190606111000.png"></p><p>对于ejs的用户 (默认主题landscape在列)<br>在主题文件夹找到文件hexo/themes/landscape/layout/_widget/tagcloud.ejs,将这个文件修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (site.tags.length) &#123; %&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">        &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">            &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">                &lt;%- tagcloud() %&gt;</span><br><span class="line">            &lt;/canvas&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>在博客根目录，找到 _config.yml配置文件然后在最后添加如下的配置项，可以自定义标签云的字体和颜色，还有突出高亮:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># hexo-tag-cloud</span><br><span class="line">tag_cloud:</span><br><span class="line">    textFont: Trebuchet MS, Helvetica</span><br><span class="line">    textColor: &apos;#333&apos;</span><br><span class="line">    textHeight: 25</span><br><span class="line">    outlineColor: &apos;#E2E1D1&apos;</span><br><span class="line">    maxSpeed: 0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 美化 </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(四)_优化</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%9B%9B)_%E4%BC%98%E5%8C%96/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%9B%9B)_%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<center><p>博客不好看…..怎么办怎么办?</p></center><a id="more"></a><h1 id="hexo优化"><a href="#hexo优化" class="headerlink" title="hexo优化"></a>hexo优化</h1><h2 id="文章的置顶功能的实现"><a href="#文章的置顶功能的实现" class="headerlink" title="文章的置顶功能的实现"></a>文章的置顶功能的实现</h2><h3 id="实现置顶"><a href="#实现置顶" class="headerlink" title="实现置顶"></a>实现置顶</h3><p>用以下命令安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：</p><pre><code>---  title: hexo+GitHub博客搭建实战  date: 2017-09-08 12:00:25categories: 博客搭建系列top: true---</code></pre><p>到目前为止，置顶功能已经可以实现了。</p><p>不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？</p><h3 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h3><p>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=”post-meta”&gt;标签下，插入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p><p>这里我们可以通过在文章使用<!-- more -->标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。<br><strong>强烈推荐</strong>使用该<!-- more -->标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>打开 themes/*/layout/_partials/head.swig文件,在 之前插入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">            if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">                alert(&apos;密码错误&apos;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>写文章时加上password: *：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h2><p>在站点目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure><p>安装gulp插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 站点下新建 gulpfile.js文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">//Plugins模块获取</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">//压缩css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function () &#123;</span><br><span class="line">return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">.pipe(minifycss())</span><br><span class="line">.pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">//压缩html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function () &#123;</span><br><span class="line">return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">.pipe(htmlclean())</span><br><span class="line">.pipe(htmlmin(&#123;</span><br><span class="line">removeComments: true,</span><br><span class="line">minifyJS: true,</span><br><span class="line">minifyCSS: true,</span><br><span class="line">minifyURLs: true,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">.pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">//压缩js 不压缩min.js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function () &#123;</span><br><span class="line">return gulp.src([&apos;./public/**/*.js&apos;, &apos;!./public/**/*.min.js&apos;])</span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//4.0以前的写法 </span><br><span class="line">//gulp.task(&apos;default&apos;, [</span><br><span class="line">  //  &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;</span><br><span class="line">//]);</span><br><span class="line">//4.0以后的写法</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, function() &#123;</span><br><span class="line">  // Do something after a, b, and c are finished.</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>好像有点问题，不过不影响使用</p><h2 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h2><p>在终端窗口下，定位到 Hexo 站点目录下，新建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;站点目录&gt;  </span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/java_1996/article/details/86499625" target="_blank" rel="noopener">https://blog.csdn.net/java_1996/article/details/86499625</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(三)_本地博客的转移</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%89)_%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BD%AC%E7%A7%BB/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%89)_%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BD%AC%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<center>C盘放不下怎么办.....QAQ</center><a id="more"></a># 本地博客的转移<p>怎么转移本地的博客呢?</p><h2 id="1-赋值配置文件"><a href="#1-赋值配置文件" class="headerlink" title="1.赋值配置文件"></a>1.赋值配置文件</h2><p>将原来的配置文件进行备份，只需要将文件夹 source、themes和配置文件_config.yml备份即可。</p><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h2><p>&emsp;这个……</p><p>&emsp;&emsp;百度一下,你就知道</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="4-新建文件夹，cd进入"><a href="#4-新建文件夹，cd进入" class="headerlink" title="4. 新建文件夹，cd进入"></a>4. 新建文件夹，cd进入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>使用hexo s查看是否能使用</p><h2 id="5-将备份的文件覆盖到现在的文件夹"><a href="#5-将备份的文件覆盖到现在的文件夹" class="headerlink" title="5. 将备份的文件覆盖到现在的文件夹"></a>5. 将备份的文件覆盖到现在的文件夹</h2><p>现在使用hexo s查看是否已经成功。</p><p>此时，所有工作已经完成。</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(二)_分类和标签</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%8C)_%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%8C)_%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<center><p>看完”markdown食用指南”(也可能没看),不知道各位会不会写博文了呢? </p><p>有人说,我写了好多但是该怎么分类呢?  </p><p>接下来我就写写如何分类和贴标签~</p></center><a id="more"></a><br><br># 分类和标签<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="创建”分类”选项"><a href="#创建”分类”选项" class="headerlink" title="创建”分类”选项"></a>创建”分类”选项</h3><h4 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h4><p>打开命令行，进入<strong>博客</strong>(之前提到的blog)所在文件夹。执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>成果后会提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “categories”到内容中，添加后是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: hexo食用指南表示添加这篇文章到“hexo食用指南”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- hexo食用指南”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- hexo食用指南”下的 “-xxx ”分类）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo食用指南(二)</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- hexo食用指南</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h3><h4 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h4><p>打开命令行，进入<strong>博客</strong>(之前提到的blog)所在文件夹。执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>成果后会提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。<br>下方的tags:  </p><ul><li>hexo</li><li>教程<br>就是这篇文章的标签了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo食用指南(二)</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- hexo食用指南</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- 教程 </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown食用指南</title>
      <link href="/2019/06/05/markdown%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/06/05/markdown%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<center><p>看完”hexo食用指南(一)”的朋友一定满头问号.</p><p>.md文件是个什么鬼东西?怎么打开?怎么写?</p><p>本片就教大家怎么写.md文件</p><p>(PS:会写的就可跳过这篇啦!)</p></center><a id="more"></a><h1 id="Markdown的今世前生以及食用指南"><a href="#Markdown的今世前生以及食用指南" class="headerlink" title="Markdown的今世前生以及食用指南"></a>Markdown的今世前生以及食用指南</h1><h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown?"></a>什么是Markdown?</h2><p>Markdwon 是一种轻量级 标记语言，它以纯文本形式（易读、易写、易更改）编写文档，并最终以HTLM格式发布。Markdown也可以理解为将以 MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p>Emmmm,好官方</p><p>简单的来说就是,操作简单的word!(大概可以这么理解吧~)</p><hr><h2 id="那它有什么优缺点呢"><a href="#那它有什么优缺点呢" class="headerlink" title="那它有什么优缺点呢?"></a>那它有什么优缺点呢?</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.它是易读（看起来舒服😌）、易写（语法简单）、易更改（纯文本）。处处体现着极简主义的影子。</p><p>2.兼容HTML,可以转换为HTML格式发布。</p><p>3.跨平台使用。</p><p>4.越来越多的网站支持Markdown.</p><p>5.更方便清晰的组织你的电子邮件。（Markdown-here,Airmail）。</p><p>6.摆脱Word,txt！！！</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1、需要记一些语法（当然，是很简单。五分钟学会）。</p><p>2、有些平台不支持Markdown编辑模式。</p><hr><h2 id="那么Markdown是谁创造的呢"><a href="#那么Markdown是谁创造的呢" class="headerlink" title="那么Markdown是谁创造的呢?"></a>那么Markdown是谁创造的呢?</h2><p>它是由 <em>Aaron Swartz</em> 和 <em>John Gruber</em> 共同设计的.</p><p><em>Aaron Swartz</em> 就是那位（2013年1月11日）自杀，有着开挂一般人生经历的程序员。</p><p>维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。</p><p>他有着足以让你跪拜的人生经历:</p><pre><code>14岁参与RSS 1.0规格标准制订。2004年入读斯坦福大学，之后退学。2005年创建 Infogami,之后与Reddit合并成为其合伙人。2010年创立示进会（Demand Preogress）,积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。2011年7月19日,因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。2013年1月自杀身亡。</code></pre><p>(膜拜前辈,可惜…)</p><hr><p><strong>书归正传</strong></p><h2 id="接下来我们讲讲Markdown的规则"><a href="#接下来我们讲讲Markdown的规则" class="headerlink" title="接下来我们讲讲Markdown的规则:"></a>接下来我们讲讲Markdown的规则:</h2><hr><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>markdown以#来设置标题,并且支持6级标题,#与标题之间用空格隔开,如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>写好之后就是这个样子:</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>要加粗的文字左右分别用两个*号包起来,如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><p>结果:<br><strong>加粗</strong></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>要倾斜的文字左右分别用一个*号包起来,如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*倾斜*</span><br></pre></td></tr></table></figure><p>结果:<em>倾斜</em></p><h4 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h4><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***斜体加粗***</span><br></pre></td></tr></table></figure><p>结果:<strong><em>斜体加粗</em></strong></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>要加删除线的文字左右分别用两个~~号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~斜体加粗~~</span><br></pre></td></tr></table></figure><p>结果:<del>斜体加粗</del></p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…</p><p>貌似可以一直加下去，但没神马卵用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>显示出来:</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>Emmmmm,层层叠叠</p><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个或者三个以上的 - 或者 * 都可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>这是分割线:</p><hr><hr><hr><hr><p>————–我是区别分割线的分割线—————————————————–</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>显示出来……有点大<br><img src="/image/headPic.png" alt="图片" title="看什么看,讨厌(ノω&lt;。)ノ))☆.。"></p><hr><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.bilibili.com&gt;</span><br></pre></td></tr></table></figure><p>效果:</p><p><a href="http://www.bilibili.com" target="_blank" rel="noopener">http://www.bilibili.com</a></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>举个栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度一下](http://www.baidu.com)</span><br></pre></td></tr></table></figure><p>效果:</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度一下</a></p><hr><h3 id="超链列表"><a href="#超链列表" class="headerlink" title="超链列表"></a>超链列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下:</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下:</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p><strong>上一级和下一级之间敲三个空格即可</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">*一级无序列表内容</span><br><span class="line">   1. 二级有序列表内容</span><br><span class="line">   2. 二级有序列表内容</span><br><span class="line">   3. 二级有序列表内容</span><br></pre></td></tr></table></figure><p>效果如下:</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">-|:-:|-:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">-|:-:|-:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下:</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><blockquote><p><strong>注:表格和正文之间要空两行,否则表格会显示异常</strong></p></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>语法：</p><h4 id="单行代码："><a href="#单行代码：" class="headerlink" title="单行代码："></a>单行代码：</h4><p>代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`单行代码`</span><br></pre></td></tr></table></figure><p>效果:</p><p><code>单行代码</code></p><h4 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h4><p>代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">     function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br><span class="line">    没有括号</span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">        echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   fun();</span><br></pre></td></tr></table></figure><hr><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>这是个坑,虽然markdown本身支持流程图,但是hexo好像并不愿意,所以我们需要先安装一个插件</p><p><code>npm install --save hexo-filter-flowchart</code></p><p>安装好之后就可以食用了!</p><p>首先我们需要了解一些基础的东西:</p><p><strong>操作模块语法:</strong></p><table><thead><tr><th align="center">操作模块</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">start</td><td align="center">开始</td></tr><tr><td align="center">end</td><td align="center">结束</td></tr><tr><td align="center">opration</td><td align="center">普通操作块</td></tr><tr><td align="center">condition</td><td align="center">判断块</td></tr><tr><td align="center">subroutine</td><td align="center">子任务块</td></tr><tr><td align="center">inputoutput</td><td align="center">输入输出块</td></tr></tbody></table><p><strong>判断和位置控制</strong></p><p><strong>流程控制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p>-&gt; 作为控制流程的操作符，就是指向下一步要操作的。</p><p>每一条都算是一条流程</p><p>你也可以断开写，怎么方便怎么来，如：下面两个是一样的。</p><p>分着写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;op1</span><br><span class="line">op1-&gt;e</span><br></pre></td></tr></table></figure><p>合着写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p><strong>判断</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond(yes)-&gt;io-&gt;e</span><br></pre></td></tr></table></figure><p>yes的时候到io，再到e</p><p><strong>位置指定</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><p>no的时候到到 sub1，再从sub1的右侧到op1<br>还可以这样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond1(no,right)</span><br></pre></td></tr></table></figure><p><strong>框架</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;flow</span><br><span class="line">    内容</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">注:为了显示```换成&apos;&apos;&apos;,用的时候换回去</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;flow</span><br><span class="line">//定义部分</span><br><span class="line">st 是变量名， start 是指操作模块名，冒号后面就是内容了。需要注意的是，冒号后要加空格才能识别</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>效果:</p><div id="flowchart-0" class="flow-chart"></div><hr><h3 id="假如你还会HTML"><a href="#假如你还会HTML" class="headerlink" title="假如你还会HTML"></a>假如你还会HTML</h3><p>markdown支持内嵌html代码,你可以通过html代码来修饰你的文章~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;居中&lt;/center&gt;  </span><br><span class="line"></span><br><span class="line">没有空格  </span><br><span class="line">&amp;ensp;半角空格  </span><br><span class="line">&amp;ensp;&amp;ensp;半角空格两个  </span><br><span class="line">&amp;emsp;全角空格  </span><br><span class="line">&amp;emsp;&amp;emsp;全角空格两个，以后就是用这个做为缩进</span><br><span class="line">&lt;/br&gt;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;华文行楷&quot;&gt;华文行楷&lt;/font&gt;  </span><br><span class="line">&lt;center&gt;&lt;font face=&quot;华文行楷&quot;&gt;华文行楷居中&lt;/font&gt;&lt;/center&gt;  </span><br><span class="line">&lt;font Size=1&gt;我是几号字来着1&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果:</p><center>居中</center>  <p>没有空格<br>&ensp;半角空格<br>&ensp;&ensp;半角空格两个<br>&emsp;全角空格<br>&emsp;&emsp;全角空格两个，以后就是用这个做为缩进<br><br></p><p><font face="黑体">我是华文彩云</font></p><p><font color="#0099ff" size="3" face="黑体">color=#0099ff size=72 face=”黑体”</font></p><center><font face="华文行楷">华文行楷居中</font></center>  <font size="1">我是几号字来着1</font>  <hr><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签：</p><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p>1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p><h4 id="锚点-不能用"><a href="#锚点-不能用" class="headerlink" title="锚点(不能用)"></a>锚点(不能用)</h4><p>锚点其实就是页内超链接。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。<br>语法说明： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">目录&#123;#index&#125;</span><br><span class="line"></span><br><span class="line">在你准备跳转到的指定标题后插入锚点&#123;#标记&#125;，然后在文档的其它地方写上连接到锚点的链接。</span><br><span class="line"></span><br><span class="line">跳转到[目录](#index)</span><br><span class="line"></span><br><span class="line">由于&#123;#是保留字段,所以不能用</span><br></pre></td></tr></table></figure><h4 id="注脚-不能用"><a href="#注脚-不能用" class="headerlink" title="注脚(不能用)"></a>注脚(不能用)</h4><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文章作者[^1]</span><br><span class="line">[^1]:上课睡觉觉</span><br></pre></td></tr></table></figure><h4 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h4><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。<br>举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;背景色是：orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">//定义部分st 是变量名， start 是指操作模块名，冒号后面就是内容了。需要注意的是，冒号后要加空格才能识别st=>start: 开始e=>end: 结束op=>operation: 我的操作cond=>condition: 确认？st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> markdown食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> markdown </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(一)_新建文章</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%80)_%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%80)_%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<center>怎么写一个博客</center><a id="more"></a><h1 id="怎么写第一篇博客"><a href="#怎么写第一篇博客" class="headerlink" title="怎么写第一篇博客?"></a>怎么写第一篇博客?</h1><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>在你的blog文件夹下运行命令行窗口(在文件夹下shift+鼠标右键yi可以找到啦!)</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"文章名称"</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">"文章名称"</span></span><br></pre></td></tr></table></figure><p>这样你的第一篇文章就创建好了!</p><hr><h3 id="在哪儿看呢"><a href="#在哪儿看呢" class="headerlink" title="在哪儿看呢~"></a>在哪儿看呢~</h3><p>打开blog目录下的<em>source</em>文件夹下的<em>_posts</em>就可以看到了!</p><p>博客文章是以<em>md</em>结尾的文件,即markdown文本</p><p>以后在这个目录下创建.md文件就可以了</p><p>打开你会发现这样的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo食用指南</span><br><span class="line">date: 2019-06-05 10:25:13</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>第一行是你的文章名</p><p>第二行创建时间</p><p>这就是你的博文啦,开始你的创作吧!</p><p>(建议接下来去看”markdown使用指南”)</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/06/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/06/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<center><p>   首先感谢<strong>CodeSheep</strong>大佬录制的教程</p><p>   这个教程帮我几乎零基础搭建好了一个简单的博客,十分感谢</p></center>   <a id="more"></a><h1 id="怎么搭建一个hexo博客"><a href="#怎么搭建一个hexo博客" class="headerlink" title="怎么搭建一个hexo博客"></a>怎么搭建一个hexo博客</h1><p>   这里我就不写文字教程了~</p><p>   大佬的教程在参考文献里~</p><p>   在评论区有很多大佬写的文字教程,还有好看的博课,可以去看看</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">www.bilibili.com/video/av44544186</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
