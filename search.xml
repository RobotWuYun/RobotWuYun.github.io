<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习笔记_Spring_AOP</title>
      <link href="/2020/03/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Spring_AOP/"/>
      <url>/2020/03/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Spring_AOP/</url>
      
        <content type="html"><![CDATA[<center>    看看AOP</center><a id="more"></a><h3 id="AOP的概念"><a href="#AOP的概念" class="headerlink" title="AOP的概念"></a>AOP的概念</h3><h4 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h4><p>AOP:全称是Aspect Oriented Programming,即:面向切面编程.</p><p>简单来说就是把程序中重复的代码抽取出来,在需要执行的时候,使用动态代理技术,在不修改源码的基础上,对我们的已有方法进行增幅.</p><h4 id="AOP的作用及优势"><a href="#AOP的作用及优势" class="headerlink" title="AOP的作用及优势"></a>AOP的作用及优势</h4><h5 id="作用-在程序运行期间-不修改源码对已有方法进行增强"><a href="#作用-在程序运行期间-不修改源码对已有方法进行增强" class="headerlink" title="作用:在程序运行期间,不修改源码对已有方法进行增强."></a>作用:在程序运行期间,不修改源码对已有方法进行增强.</h5><h5 id="优势"><a href="#优势" class="headerlink" title="优势:"></a>优势:</h5><ul><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ul><h4 id="AOP的实现方法"><a href="#AOP的实现方法" class="headerlink" title="AOP的实现方法"></a>AOP的实现方法</h4><ul><li>动态代理技术</li></ul><h4 id="Spring中的AOP"><a href="#Spring中的AOP" class="headerlink" title="Spring中的AOP"></a>Spring中的AOP</h4><p>是Spring中的AOP,就是通过配置的方式实现.</p><h4 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h4><ul><li><p><strong>Joinpoint</strong>(连接点):</p><p>所谓连接点是指哪些被拦截的点.在spring中,这些点指的是方法,因为Spring只支持方法类型的连接点.</p></li><li><p><strong>Pointcut</strong>(切入点):</p><p>所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于同一浏览器在登录不同用户的Session问题</title>
      <link href="/2020/03/26/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_Session_1/"/>
      <url>/2020/03/26/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_Session_1/</url>
      
        <content type="html"><![CDATA[<center>session是服务器为每一个浏览器建立的会话对象</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天在写的网页时，分别注册两个用户然后登录，发现他们是共用session的。</p><p>今天测试了一下淘宝，可以同时登录两个又不相互影响。</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因:"></a>问题原因:</h3><p>因为Session是服务器为每一个浏览器建立的会话对象,所以在不设置的情况下 ,Session的生命周期默认是浏览器关闭的时间,所以Session在同一个浏览器开启的时间内是共享的.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h3><p>和朋友讨论了一下,目前的解决方案有:</p><ol><li>用IE6</li><li>在设置session的值的时候加入标识,在取值的时候以唯一标识作为条件取值.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题讨论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_SpringCloud_入门</title>
      <link href="/2020/03/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringCloud_%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringCloud_%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<center>    SpringCloudの笔记<br></center><a id="more"></a><h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h3 id="系统架构演变"><a href="#系统架构演变" class="headerlink" title="系统架构演变"></a>系统架构演变</h3><h4 id="集中式架构"><a href="#集中式架构" class="headerlink" title="集中式架构"></a>集中式架构</h4><p>所有的功能在一个项目中开发.</p><ul><li><p>优点</p><ul><li>结构简单</li></ul></li><li><p>缺点</p><ul><li>代码耦合度高</li><li>无法针对不同模块进行针对性优化</li><li>无法水平拓展</li><li>单点容错性率低,并发能力差</li></ul></li></ul><h4 id="垂直划分"><a href="#垂直划分" class="headerlink" title="垂直划分"></a>垂直划分</h4><p>按功能划分成各个子项目</p><ul><li>优点<ul><li>系统拆分实现流量分担,解决了并发问题</li><li>可以针对不同模块进行优化</li><li>方便水平扩展,负载均衡,容错率提高</li></ul></li><li>缺点<ul><li>系统之间相互独立,会有很多重复工作,影响开发效率</li></ul></li></ul><h4 id="分布式服务"><a href="#分布式服务" class="headerlink" title="分布式服务"></a>分布式服务</h4><p>将垂直划分后的功能中的重复的地方抽取出来搭建底层,上层应用调用他们.</p><ul><li>优点<ul><li>提高了代码的重用率和开发效率</li></ul></li><li>缺点<ul><li>系统之间的耦合度变高,调用关系错综复杂,难以维护</li></ul></li></ul><h4 id="流动计算架构-SOA"><a href="#流动计算架构-SOA" class="headerlink" title="流动计算架构(SOA)"></a>流动计算架构(SOA)</h4><p>SOA:面向服务的架构</p><p>当服务越来越多,容量的评估,小服务资源的浪费问题逐渐显现,此时需增加一个调度中心基于访问压力实时管理集群容量,提高集群利用率.此时,用于提高机器利用率的资源调度和治理中心(SOA)是关键.</p><p>服务治理要做什么?</p><ul><li>服务注册中心,实现服务自主注册和发现,无需人为记录服务地址</li><li>服务自动订阅,服务列表自动推送,服务调用透明化,无需关系依赖关系</li><li>动态监控报告,人为控制服务状态</li></ul><p>缺点:</p><ul><li>服务间会有依赖关系,一旦某个环节出错会影响较大</li><li>服务关系复杂,运维,测试部署困难,不符合DevOps思想</li></ul><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>特点:</p><ul><li>单一职责:微服务中每一个服务都对应唯一的业务能力,做到单一职责.</li><li>微:微服务的服务拆分粒度很小,例如一个用户管理就可以作为一个服务,每个服务虽小,但”五脏俱全”</li><li>面向服务:每个服务都要对外暴露Rest风格服务接口API并不关心服务的技术实现,做到与平台和语言无关,也不限定用什么技术实现,只要提供Rest的接口即可.</li><li>自治:<ul><li>团队独立:每个服务都是一个独立的团队开发</li><li>技术独立:因为是面向服务,提供Rest接口,使用什么技术没用别人干涉</li><li>前后端分离:采用前后端分离开发,提供统一Rest接口,后端不同再为PC,移动端开发不同接口.</li><li>数据库分离:每个服务都可以使用自己的数据源</li><li>部署独立,服务间虽然有调用,但要做到服务重启不影响其他服务,有利于持续集成和持续交付.每个服务都是独立的组件,可复用,可替换,降低耦合,易维护. </li></ul></li></ul><h3 id="服务调用方式"><a href="#服务调用方式" class="headerlink" title="服务调用方式"></a>服务调用方式</h3><h4 id="RPC和HTTP"><a href="#RPC和HTTP" class="headerlink" title="RPC和HTTP"></a>RPC和HTTP</h4><p>常用的远程调用方式有以下2种:</p><ul><li><p>RPC:Remote Produce Call 远程过程调用,类似的还有RMI.自定义数据格式.基于原生TPC通信,速度快,效率高.早期的webservice,现在的热门dubbo,都是RPC的典型代表.</p></li><li><p>Http:http其实是一种网络传输协议,基于TCP,规定了数据传输的格式.现在客户端浏览器与服务端通信基本都是采用Http协议,也可以用来进行远程服务调用.缺点是消息封装臃肿,优势是对服务的提供和调用方没有任何技术限定,自由灵活.更符合微服务理念.</p><blockquote><p>现在热门的Rest风格,就可以通过http方式来实现服务间调用.</p><p>如果公司采用Java技术栈,那么Dubbo作为微服务架构是个不错的选择.如果公司的技术栈多样化,那么springCloud搭建微服务是不错的选择.</p></blockquote></li></ul><h4 id="HTTP客户端工具"><a href="#HTTP客户端工具" class="headerlink" title="HTTP客户端工具"></a>HTTP客户端工具</h4><p>自己实现Http对请求和响应的处理:</p><ul><li>HttpClient</li><li>OKHttp</li><li>httpUrlConnection</li></ul><p>不过这些不同的客户端有不同的API</p><h4 id="Spring的RestTemplate"><a href="#Spring的RestTemplate" class="headerlink" title="Spring的RestTemplate"></a>Spring的RestTemplate</h4><p>Spring提供了一个RestTemplate模板工具类,对基于Http的客户端进行了封装,并实现了对象与json的序列化和反序列化,非常方便,RestTemplate并没有限定Http的客户端类型,而是进行了抽象,目前常用的3种都有支持:</p><ul><li>HttpClient</li><li>OKHttp</li><li>JDK原生的HtpUrlConnection(默认的)</li></ul><h3 id="初始SpringCloud"><a href="#初始SpringCloud" class="headerlink" title="初始SpringCloud"></a>初始SpringCloud</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>SpringCloud是Spring旗下的项目之一</p><p>SpringCloud将现在非常流行的一些技术整合到一起,实现了诸如:配置管理,服务发现,智能路由,负载均衡,熔断器,控制总线,集群状态等等功能,其主要涉及的组件包括:</p><p>Netflix</p><ul><li>Eureka:注册中心</li><li>Zuul:服务开关</li><li>Ribbon:负载均衡</li><li>Feign:服务调用</li><li>Hystix:熔断器</li></ul><p>为了提高功能间调用访问的灵活性,可扩展性:所以我们需要 一个注册中心:</p><h3 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h3><h4 id="Eureka做什么"><a href="#Eureka做什么" class="headerlink" title="Eureka做什么?"></a>Eureka做什么?</h4><p>Eureka负责管理注册功能的信息,服务调用者无需自己寻找服务,而是把自己的需求告诉Eureka,然后Eureka会将符合条件的服务告诉你</p><p>同时,服务提供方与Eurake之间通过”心跳”机制进行监控,当某个服务提供方出现问题,Eureka自然会把它从服务列表中删除.</p><p>这样就实现了服务的自动注册,发现,状态监控</p><h4 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h4><ul><li>Eureka:就是服务注册中心(可以是一个集群),对外暴露自己的地址</li><li>提供者:启动后向Eurake注册自己的信息(地址,提供什么服务)</li><li>消费者:向Eureka订阅服务,Eurake会将对应服务的所有提供者地址列表发送给消费者,并定期更新</li><li>心跳(续约):提供者定期通过http方式向Eureka刷新自己的状态.</li></ul><h4 id="高可用的Eureka-Server"><a href="#高可用的Eureka-Server" class="headerlink" title="高可用的Eureka Server"></a>高可用的Eureka Server</h4><p>Eureka可以组成一个集群,形成高可用的Eureka中心.</p><blockquote><p>服务同步</p></blockquote><p>多个Eureka Server之间也会互相注册为服务,当服务提供者注册到Eureka Server集群中的某个节点时,该节点会把服务的信息同步给集群中的每个节点,从而实现<strong>数据同步</strong>.因此,无论客户端访问到Eureka Server集群中的任意一个节点,都可以获取到完整的服务列表信息.</p><p><strong>步骤:</strong></p><ol><li>修改旧的Eureka服务的端口和注册地址</li><li>复制一台并将端口和地址取反</li><li>启动测试</li><li>将其他服务呢注册到两台Eureka服务上(防止其中一台挂机)</li></ol><h4 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h4><p>服务提供者要向EurekaServer注册服务,并完成服务续约等工作.</p><blockquote><p>服务注册</p></blockquote><p>服务提供者在启动时,会检查配置属性中的:<code>eureka.client.register-with-eureka=true</code>参数是否正确(默认为true),如果值为true,则会向EurekaServer发起一个Rest请求,并携带自己的元数据信息,Eureka Server会白这些信息保存到一个双层的Map结构中 .</p><ul><li>第一层Map的key就是服务id,一般是配置中的<code>spring.application.name</code>属性</li><li>第二层Map的key是服务的实例id,一般host+serviceId+port,例如<code>localhost:user-service:8081</code></li><li>值是服务的实例对象,也就是说一个服务,可以同时启动多个不同实例,形成集群.</li></ul><blockquote><p>服务续约</p></blockquote><p>在注册完成服务以后,服务提供者会维持一个心跳(定时向EurekaServer发起Rest请求),告诉EurekaServer:”我还活着”.我们称之为续约(renew).</p><p>有两个重要参数可以修改服务续约的行为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">instance:</span><br><span class="line">lease-renewal-interval-in-secinds:30</span><br><span class="line">lease-expiration-duration-in-seconds:90</span><br></pre></td></tr></table></figure><ul><li><p>lease-renewal-interval-in-secinds:服务续约(renew)的间隔,默认为30秒</p></li><li><p>lease-expiration-duration-in-seconds:服务失效时间,默认90</p></li></ul><blockquote><p>获取服务列表</p></blockquote><p>当服务消费者启动时,会检测<code>eureka.client.fetch-registry=true</code>参数的值,如果为true,则会从Eureka Server服务的列表只读备份,然后缓存在本地.并且每隔30秒会重新获取并更新数据.可以通过下面的参数来修改:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">client:</span><br><span class="line">registry-fetch-interval-seconds:30</span><br></pre></td></tr></table></figure><h4 id="失效剔除和自我保护"><a href="#失效剔除和自我保护" class="headerlink" title="失效剔除和自我保护"></a>失效剔除和自我保护</h4><blockquote><p>服务下线</p></blockquote><p>当服务进行正常关闭操作时,他会触发一个服务下线的REST请求给Eureka Server,告诉服务注册中心”我要下线了”,服务中心接收到请求之后,将该服务置为下线状态</p><blockquote><p>失效剔除</p></blockquote><p>有时我们的服务可能 由于内存溢出或网络故障等原因使得服务器不能正常工作,而服务注册中心并未收到”服务下线”的请求.相对于服务提供者的”服务续约”操作,服务注册中心在启动时会创建一个定时任务,默认每隔一点时间(默认60秒)将当前清单中超时(默认为90秒)没有续约的服务剔除,这个操作被称为失效剔除.</p><p>可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改,单位是毫秒.</p><blockquote><p>自我保护</p></blockquote><p>当服务未按时进行续约时,Eureka会统计服务实例最近15分钟心跳续约的比例是否低于85%.</p><p>可以通过下面的配置来关停:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">server:</span><br><span class="line">enable-self-preservation:false#关闭自我保护模式(缺省为打开)</span><br></pre></td></tr></table></figure><h3 id="负载均衡Ribbon"><a href="#负载均衡Ribbon" class="headerlink" title="负载均衡Ribbon"></a>负载均衡Ribbon</h3><p>为了在集群中选择合适的服务,所以需要负载均衡.</p><p>Eureka中已经集成了负载均衡组件:Ribbon.</p><blockquote><p>什么是Ribbon:</p><p>Ribbon是Netfix发布的负载均衡器,它有助于控制HTTP和TCP客户端的行为.为Ribbon配置服务提供者地址列表后,Ribbon就可基于某种负载均衡算法,自动地帮助服务消费者去请求.Ribbon默认提供了很多均衡算法,例如轮询,随机等.当然,也可以为Ribbon实现自定义的负载均衡算法.</p></blockquote><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><ol><li>引入Pom</li><li>在需要负载均衡的主程序的启动类上加上<code>@LoadBalanced</code></li><li>在服务消费者的请求中直接用服务的id作为地址访问</li></ol><h4 id="配置负载均衡算法"><a href="#配置负载均衡算法" class="headerlink" title="配置负载均衡算法"></a>配置负载均衡算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[服务名]</span><br><span class="line">ribbon:</span><br><span class="line">NFLoadBalancerRuleClassName:[算法全类名]</span><br></pre></td></tr></table></figure><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Hystrix,英文意思是豪猪,全身是刺,看起来就不好惹,是一种保护机制.</p><p>Hystrix也是Netflix公司的一款组件.</p><h4 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h4><p>微服务中,服务间调用的关系错综复杂,一个请求,可能需要多个微服务接口才能实现,会形成非常复杂的调用链路.当一个服务崩溃时,用户的请求就会得不到响应,则Tomcat的这个线程不会被释放,于是越来越多的用户请求被阻塞,Tomcat连接池就被占满了,从而导致其他的服务也都不可用,形成雪崩效应.</p><p>为了解决雪崩问题就需要Hystrix</p><p><strong>Hystrix解决雪崩问题的手段有两个:</strong></p><ul><li>线程隔离</li><li>服务熔断</li></ul><h4 id="线程隔离-服务降级"><a href="#线程隔离-服务降级" class="headerlink" title="线程隔离,服务降级"></a>线程隔离,服务降级</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>将总线程池拆分成小的线程池分配给不同的服务.这样就只会耗尽崩溃线程的线程池.</p><p>并且设置超时时长,当服务超过超时时长时,返回一个失败的信号.然后快速失败,释放线程.</p><blockquote><p> 服务降级:优先保证核心服务,而非核心服务不可用或弱可用</p></blockquote><p><strong>触发Hystrix服务降级的情况:</strong></p><ul><li>线程池已满</li><li>请求超时</li></ul><blockquote><p><strong>注意:</strong>服务的降级是在消费方</p></blockquote><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h5><ol><li>pom.xml中引入Hystrix依赖</li><li>在启动类中添加注解</li><li>在配置文件中配置 (可选)</li><li>编写失败处理 <ul><li>在controller层添加失败处理注解 </li><li>分别完成失败和成功的处理方法.</li></ul></li></ol><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><h5 id="熔断原理"><a href="#熔断原理" class="headerlink" title="熔断原理"></a>熔断原理</h5><p>熔断器,也叫断路器</p><blockquote><p>熔断机制就像家里的的电路熔断器,如果电路发生了短路能立刻熔断电路,避免发生灾难,在分布式系统中应用这一模式之后,服务调用方可以自己进行判断某些服务反应慢或者存在大量超时情况时,能够主动熔断,防止整个系统被拖垮.</p><p>不同于电路熔断只能断不能自动重连,Hystrix可以实现弹性容错,当情况好转之后,可以自动重连.</p><p>通过断路的方式.可以将后续请求直接拒绝掉,一段时间之后允许部分请求通过,如果调用成功则回到电路闭合状态,否则继续断开.</p></blockquote><p>状态机有3个状态:</p><ul><li>Closed:关闭状态(断路器关闭),所有请求都能正常访问.</li><li>Open:打开状态(断路器打开),所以请求都会被降级.Hystix会对请求情况计数,当一定时间内失败请求百分比达到阈值,则出发熔断,断路器会完全关闭,默认失败比例的阈值是50%,请求次数最少不低于20次.</li><li>Half Open:半开状态,Closed状态不是永久的,关闭后会进入休眠时间(默认是5s).随后断路器会自动进入半开状态,此时会释放部分请求通过,若这些请求都是健康的,则会完全打开断路器,否则继续保持关闭,再次进行休眠即时.</li></ul><p>几个有关参数:</p><ul><li>requestVolumeThreshold:触发熔断的最小请求次数,默认为20</li><li>errorThresholdPercentage:触发熔断的失败请求最小占比,默认50%</li><li>sleepWindowInMillseconds:休眠时长,默认是5000毫秒</li></ul><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p>Feign可以把Rest的请求进行隐藏,伪装成类似SpringMVC的Controller一样.不在需要自己拼接url,拼接参数等等操作,一切交给Feign去做.</p><blockquote><p>同时Feign还实现了负载均衡和熔断机制,可以通过配置修改相关属性,也支持Hystix,需要配置开启,还支持请求压缩, 日志级别等</p></blockquote><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ol><li>引入依赖<code>openfeign</code></li><li>在服务消费方添加注解<code>@EnableFeignClients</code></li><li>编写接口</li></ol><h3 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Zuul上古NetFlix开源的微服务网关,它可以和Eureka,Ribbon,Hystrix等组件配合使用.</p><p>Zuul的核心是一系列的过滤器,这些过滤器可以完成以下功能:</p><ul><li>身份认证与安全:识别每个资源的验证要求,并拒绝那些与要求不符的请求.</li><li>审查与监控:在边缘位置追踪有意义的数据和统计结果,从而带来精确的生产视图.</li><li>动态路由:动态地将请求路由到不同的后端集群</li><li>压力测试:逐渐增加指向集群的流量,以了解性能</li><li>负载分配:为每一种负载类型分配对应容量,并弃用超出限定值的请求.</li><li>静态响应处理:跨越AWS Region进行请求路由,旨在实现ELB(Elastic Load Balancing)使用多样化,以及让系统的边缘更贴近系统的使用者.</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>创建工程</p></li><li><p>引入对应依赖</p></li><li><p>添加相关注解</p></li><li><p>添加配置</p><blockquote><p>端口</p><p>路由规则:</p><ul><li>Map结构(id:规则) </li></ul></blockquote></li></ol><h4 id="面向服务的路由配置"><a href="#面向服务的路由配置" class="headerlink" title="面向服务的路由配置"></a>面向服务的路由配置</h4><ol><li><p>在pom.xml引入Eureka的依赖</p></li><li><p>在配置文件中配置相关内容</p><blockquote><p>路由规则:(key:服务的ID,value是映射地址)</p><p>注意:zuul会将注册中心的所有微服务拉取下来在容器内形成映射.</p><p>但如果有的微服务不想对外界暴露则可以通过ignored-services来进行配置.</p></blockquote></li></ol><h4 id="路由前缀"><a href="#路由前缀" class="headerlink" title="路由前缀"></a>路由前缀</h4><p>可以通过配置<code>strip-prefix</code>配置进行路由前缀的配置当值为true时,将会忽略匹配字段</p><p>可以通过<code>prefix</code>进行配置.</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>Suul作为网关的其中一个重要功能,就是实现请求的鉴权.而这个动作我们往往是通过Zuul提供的过滤来实现的.</p><h5 id="ZuulFilter"><a href="#ZuulFilter" class="headerlink" title="ZuulFilter"></a>ZuulFilter</h5><p>ZuulFilter是过滤器的顶级父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">//来自IZuulFilter</span></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">//IZuulFilter</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>shouldFilter:返回一个Boolean值,判断该过滤器</li><li>run:过滤器的具体业务逻辑.</li><li>filterType:返回字符串,代表过滤器的类型<ul><li>pre:请求在被路由之前执行</li><li>routing:在路由请求时调用</li><li>post:在routing和error过滤器之后调用</li><li>error:处理请i去是发生错误调用</li></ul></li><li>filterOrder:通过返回的int值来定义过滤器的执行顺序,数字越小优先级越高.</li></ul><h5 id="过滤器执行生命周期"><a href="#过滤器执行生命周期" class="headerlink" title="过滤器执行生命周期"></a>过滤器执行生命周期</h5><ul><li><p>正常流程</p><p>请求到达首先会经过pre类型过滤器,而后到达routing类型,进行路由,请求就到达真正的服务提供者,执行请求,返回结果后,会到达post过滤器.而后返回响应.</p></li><li><p>异常流程</p><p>整个过程中,pre或routing过滤器出现异常,都会直接进入error过滤器,在error处理完毕后,会将请求交给POST过滤器,最后返回给用户.</p><p>如果是error过滤器自己出现异常,最终也会进入POST过滤器,而后返回.</p><p>如果是POST过滤器出现异常,会跳转error过滤器,但是与pre和routing不同的是,请求不会在到达POST过滤器了.</p></li></ul><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>非常多</p><ul><li>请求鉴权:一般放在pre类型,如果发现没有访问权限,直接拦截</li><li>异常处理:一般凡在error类型和post类型过滤器中结合来处理.</li><li>服务调用时长统计:pre和post结合使用.</li></ul><h4 id="负载均衡和熔断"><a href="#负载均衡和熔断" class="headerlink" title="负载均衡和熔断"></a>负载均衡和熔断</h4><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制.但是所有的超时策略都是走的默认值,比如熔断超时时间只有1S,很容易触发,因此建议手动配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">command:</span><br><span class="line">default:</span><br><span class="line">execution:</span><br><span class="line">isolations:</span><br><span class="line">thread:</span><br><span class="line">timeoutInMilliseconds:6000</span><br><span class="line">ribbon:</span><br><span class="line">ConnectionTimeout:500</span><br><span class="line">ReadTimeout:2000</span><br></pre></td></tr></table></figure><p>ribbon的超时时长,真实值是(read+connect)*2,必须小于hystrix时长.</p><p>计算公式:</p><blockquote><p>ribbonTimeout = (ribbonReadTimeout+ribbonTimeConnectTimeout)*(maxAutoRetries+1)*(maxAutoRetriesNextServer+1);)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Shell</title>
      <link href="/2020/03/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Shell/"/>
      <url>/2020/03/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Shell/</url>
      
        <content type="html"><![CDATA[<center>    我爱学习.jpg</center><a id="more"></a><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><blockquote><p>什么是脚本?</p><ul><li>把多条命令写到一个文件里面,这个文件就是脚本,所以说,所谓脚本就是一个命令的集合.</li></ul></blockquote><h4 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h4><p>脚本以<code>#!/bin/bash</code>开头(指明脚本解释器)</p><blockquote><p>如果指定Bash解释器解释时,这就变成了注释. </p></blockquote><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>shell里面所有的变量全是字符串类型.(即使+-*/也是字符串的拼接)</li><li>有系统自定义变量,如$USER,$HOME,$PWD,$SHELL.</li></ul><h5 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h5><ol><li><p><strong>基本语法</strong></p><ul><li><p>定义变量: 变量=值</p></li><li><p>撤销变量:unset 变量</p></li><li><p>声明静态变量:readonly 变量</p><blockquote><p>注意:不能unset</p></blockquote></li></ul></li><li><p><strong>变量定义规则</strong></p><ul><li>变量名称可以由字母,数字和下划线组成,但是不能以数字开头,环境变量名建议大写.</li><li>等号两边不能有空格</li><li>在bash中,变量默认类型都是字符串类型,无法直接进行数值运算.</li><li>变量的值如果有空格,需要用双引号或单引号括起来.</li></ul></li></ol><h5 id="特殊变量-n"><a href="#特殊变量-n" class="headerlink" title="特殊变量:$n"></a>特殊变量:$n</h5><ol><li><p><strong>基本语法</strong></p><ul><li><code>$n</code>:n为数字,$0代表该脚本名称,$1-$9代表第一到第九个参数,十以上的参数，十以上的参数需要用大括号包含，如${10}</li></ul></li></ol><h5 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量:$*,$@"></a>特殊变量:$*,$@</h5><ol><li><p><strong>基础语法</strong></p><ul><li><p><code>$*</code>:这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体</p></li><li><p><code>$@</code>:这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待</p><blockquote><p>$*和$@区别:</p><ul><li>$*和$@都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …$n的形式输出所有参数。</li><li>当它们被双引号“”包含时，“$*”会将所有的参数作为一个整体，以“$1 $2 …$n”的形式输出所有参数；“$@”会将各个参数分开，以“$1” “$2”…”$n”的形式输出所有参数。</li></ul></blockquote></li></ul></li></ol><h5 id="特殊变量-1"><a href="#特殊变量-1" class="headerlink" title="特殊变量:$?"></a>特殊变量:$?</h5><ol><li><strong>基本语法</strong><ul><li><code>$?</code>:最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。</li></ul></li></ol><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ol><li><p><strong>基本语法</strong></p><ul><li><p><code>$ expr 运算式</code>或<code>$[运算式]</code></p></li><li><p>+,-,*,/,%,expr</p><blockquote><p><code>expr</code>运算符间要有空格</p></blockquote></li></ul></li></ol><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><ol><li><p><strong>基本语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   &gt; 注意:</span><br><span class="line">   &gt;</span><br><span class="line">   &gt; 1. condition前后要有空格</span><br><span class="line">   &gt; 2. 条件非空即为true</span><br><span class="line"></span><br><span class="line">2. **常用判断条件**</span><br><span class="line"></span><br><span class="line">   + 两个整数之间比较</span><br><span class="line">   </span><br><span class="line">     `=` 字符串比较</span><br><span class="line">   </span><br><span class="line">     `-lt`小于(less than)</span><br><span class="line">   </span><br><span class="line">     `-le`小于等于(less equal)</span><br><span class="line">   </span><br><span class="line">     `-eq`等于(equal)</span><br><span class="line">   </span><br><span class="line">     `-gt`大于(greater than)</span><br><span class="line">   </span><br><span class="line">     `-ge`大于等于(greater equal)</span><br><span class="line">   </span><br><span class="line">     `-ne`不等于(Not equal)</span><br><span class="line">   </span><br><span class="line">   + 按照文件权限进行判断</span><br><span class="line">   </span><br><span class="line">     `-r`有读的权限(read)</span><br><span class="line">   </span><br><span class="line">     `-w`有写的权限(write)</span><br><span class="line">   </span><br><span class="line">     `-x`有执行的权限(existence)</span><br><span class="line">   </span><br><span class="line">   + 按照文件类型进行判断</span><br><span class="line">   </span><br><span class="line">     `-f` 文件存在并且是一个常规的文件(file)</span><br><span class="line">   </span><br><span class="line">     `-e`文件存在(existence)</span><br><span class="line">   </span><br><span class="line">     `-d`文件存在并是一个目录(dircetory)</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">#### 流程判断</span><br><span class="line"></span><br><span class="line">1. **if判断**</span><br><span class="line"></span><br><span class="line">      ```shell</span><br><span class="line">      if [ 条件判断式 ];then</span><br><span class="line">      程序</span><br><span class="line">      fi</span><br></pre></td></tr></table></figure></li></ol><pre><code>或<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">elif [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">else</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>&gt; 注意事项:&gt;&gt; + `[ 条件判断式 ]`中括号和条件判断式之间必须有空格&gt; + `if`后要有空格</code></pre><ol start="2"><li><p><strong>case语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line">"值1")</span><br><span class="line">分支程序1</span><br><span class="line">;;</span><br><span class="line">"值2")</span><br><span class="line">分支程序2</span><br><span class="line">;;</span><br><span class="line">....</span><br><span class="line">*)</span><br><span class="line">分支程序3</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><ul><li>case行尾必须为单词<code>in</code>,每一个模式匹配必须以<code>)</code>结束.</li><li>双分号<code>;;</code>便是命令序列结束,相当于Java中的break</li><li>最后的<code>*)</code>表示默认模式,相当于Java中的default</li></ul></blockquote></li></ol><ol start="3"><li><strong>for循环</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((初始值;循环控制条件;变量变化))</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>while循环</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(选项)(参数)</span><br></pre></td></tr></table></figure><blockquote><p>选项:</p><p>​    -p:指定读取时的提示符</p><p>​    -t:指定读取值时等待的时间(秒)</p><p>参数:</p><p>​    变量:指定读取值的变量名</p></blockquote><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ol><li><p><strong>系统函数</strong></p><ul><li><p>basename基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basename [string/pathname] [suffix]</span><br></pre></td></tr></table></figure><blockquote><p>basename命令会删除所有的前缀包括最后一个<code>/</code>字符,然后将字符串显示出来.</p><p>选项:</p><p>suffix为后缀,如果suffix被指定了,basename会将pathname或string中的suffix去掉.</p></blockquote></li></ul></li></ol><ul><li><p>dirname基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname 文件绝对路径</span><br></pre></td></tr></table></figure><blockquote><p>dirname命令是从给定的包含绝对路径的文件名中去除文件名(非目录部分),然后将剩下的路径(目录部分))返回.</p></blockquote></li></ul><ol start="2"><li><p><strong>自定义函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ function ] functionname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br><span class="line">funname</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>必须在调用函数地方之前,先声明函数,shell脚本是逐行运行.不会像其它语言一样先编译.</p></li><li><p>函数返回值,只能用过<code>$?</code>系统变量获得,可以显式加<code>return</code>返回,如果不加,将以最后一条命令运行结果,作为返回值.</p></li></ul></blockquote></li></ol><h4 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h4><ol><li><p><strong>cut</strong></p><p>在文件中负责剪切数据用的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut [选项参数] filename</span><br></pre></td></tr></table></figure><blockquote><p>默认分隔符是指标符</p><p>选项参数:</p><table><thead><tr><th align="center">选项参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">列号,提取第几列</td></tr><tr><td align="center">-d</td><td align="center">分隔符,按照指定分隔符分隔列</td></tr><tr><td align="center">-c</td><td align="center">指定具体的字符</td></tr></tbody></table></blockquote></li></ol><ol start="2"><li><p><strong>sed</strong></p><p>sed是一种流编辑器,它一次处理一行内容,处理时,把当前处理的行存储在临时缓冲区中,称为”模式空间”,接着用sed命令处理缓冲区中的内容,处理完成后,把缓冲区的内容送往屏幕.接着处理下一行,这样不断重复,直到文件末尾.文件内容并没有改变，除非你使用重定向存储输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [选项参数]  ‘command’  filename</span><br></pre></td></tr></table></figure><blockquote><p>选项参数说明:</p><table><thead><tr><th align="center">选项参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">直接在指令列模式上进行sed的动作编辑。</td></tr><tr><td align="center">-i</td><td align="center">直接编辑文件</td></tr></tbody></table><p>命令功能描述:</p><table><thead><tr><th align="center">命令</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">新增,a后面可以接字符串,在下一行出现</td></tr><tr><td align="center">d</td><td align="center">删除</td></tr><tr><td align="center">s</td><td align="center">查找并替换</td></tr></tbody></table></blockquote></li></ol><ol start="3"><li><p><strong>awk</strong></p><p>一个强大的文本分析工具,把文本逐行的读入以空格为默认分隔符将每行切片,切开的部分在进行分析处理.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ask [选项参数] `pattern1&#123;action1&#125; pattern2&#123;action2&#125;...` filename</span><br></pre></td></tr></table></figure><blockquote><p>pattern: 表示AWK在数据中查找的内容,就是匹配模式</p><p>action: 在找到匹配内容时所执行的一系列命令</p><p>选项参数</p><table><thead><tr><th align="center">选项参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-F</td><td align="center">指定输入文件拆分隔符</td></tr><tr><td align="center">-v</td><td align="center">赋值一个用户定义变量</td></tr></tbody></table><blockquote><p>只有匹配了pattern的行才会执行action</p></blockquote><table><thead><tr><th align="center">变量</th><th>说明</th></tr></thead><tbody><tr><td align="center">FILENAME</td><td>文件名</td></tr><tr><td align="center">NR</td><td>已读的记录</td></tr><tr><td align="center">NF</td><td>浏览记录的域的个数(切割后,列的个数)</td></tr></tbody></table></blockquote></li></ol><ol start="4"><li><p><strong>sort</strong></p><p>sort命令在Linux里非常有用,它将文件进行排序,并将排序结果标准输出.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(选项)(参数)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-n</td><td align="center">依照数值的大小排序</td></tr><tr><td align="center">-r</td><td align="center">以相反的顺序来排序</td></tr><tr><td align="center">-t</td><td align="center">设置排序时,使用的分隔符</td></tr><tr><td align="center">-k</td><td align="center">指定需要排序的列</td></tr></tbody></table><p>参数：指定待排序的文件列表</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_前端_查漏补缺</title>
      <link href="/2020/03/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%89%8D%E7%AB%AF_%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2020/03/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%89%8D%E7%AB%AF_%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<center>看看忘了啥</center><a id="more"></a><h2 id="HTML相关"><a href="#HTML相关" class="headerlink" title="HTML相关"></a>HTML相关</h2><ul><li><p>base标签中的target属性可以统一设置当前页面中的超链接的打开方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>遵循就近原则</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_100天从新手到大师_网络编程入门和网络应用开发</title>
      <link href="/2020/03/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/03/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center>   接入网线.jpg</center><a id="more"></a><h2 id="网络编程入门和网络应用开发"><a href="#网络编程入门和网络应用开发" class="headerlink" title="网络编程入门和网络应用开发"></a>网络编程入门和网络应用开发</h2><h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>requests是一个基于HTTP协议来使用网络的第三库.,它可以非常方便的使用HTTP,避免安全缺陷,冗余代码以及重复”造轮子”.</p><p>首先需要安装requests机器依赖库.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承Thread类创建自定义的线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadHanlder</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename = self.url[self.url.rfind(<span class="string">'/'</span>) + <span class="number">1</span>:]</span><br><span class="line">        resp = requests.get(self.url)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/Users/Hao/'</span> + filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(resp.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过requests模块的get函数获取网络资源</span></span><br><span class="line">    <span class="comment"># 下面的代码中使用了天行数据接口提供的网络API</span></span><br><span class="line">    <span class="comment"># 要使用该数据接口需要在天行数据的网站上注册</span></span><br><span class="line">    <span class="comment"># 然后用自己的Key替换掉下面代码的中APIKey即可</span></span><br><span class="line">    resp = requests.get(</span><br><span class="line">        <span class="string">'http://api.tianapi.com/meinv/?key=APIKey&amp;num=10'</span>)</span><br><span class="line">    <span class="comment"># 将服务器返回的JSON格式的数据解析为字典</span></span><br><span class="line">    data_model = resp.json()</span><br><span class="line">    <span class="keyword">for</span> mm_dict <span class="keyword">in</span> data_model[<span class="string">'newslist'</span>]:</span><br><span class="line">        url = mm_dict[<span class="string">'picUrl'</span>]</span><br><span class="line">        <span class="comment"># 通过多线程的方式实现图片下载</span></span><br><span class="line">        DownloadHanlder(url).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h4><blockquote><p>什么是套接字?</p><p>通俗而言,套接字就是一套用C语言写成的应用程序开发库,主要用于实现进程间的通信和网络编程.</p><p><strong>TCP套接字</strong></p><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口.在Python中可以通过创建socket对象并指定type属性SOCK_STREAM来使用TCP套接字.由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    <span class="comment"># family=AF_INET - IPv4地址</span></span><br><span class="line">    <span class="comment"># family=AF_INET6 - IPv6地址</span></span><br><span class="line">    <span class="comment"># type=SOCK_STREAM - TCP套接字</span></span><br><span class="line">    <span class="comment"># type=SOCK_DGRAM - UDP套接字</span></span><br><span class="line">    <span class="comment"># type=SOCK_RAW - 原始套接字</span></span><br><span class="line">    server = socket(family=AF_INET, type=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(端口用于区分不同的服务)</span></span><br><span class="line">    <span class="comment"># 同一时间在同一个端口上只能绑定一个服务否则报错</span></span><br><span class="line">    server.bind((<span class="string">'192.168.1.2'</span>, <span class="number">6789</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    <span class="comment"># 参数512可以理解为连接队列的大小</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    print(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 4.通过循环接收客户端的连接并作出相应的处理(提供服务)</span></span><br><span class="line">        <span class="comment"># accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行</span></span><br><span class="line">        <span class="comment"># accept方法返回一个元组其中的第一个元素是客户端对象</span></span><br><span class="line">        <span class="comment"># 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)</span></span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        print(str(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line">        <span class="comment"># 5.发送数据</span></span><br><span class="line">        client.send(str(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="comment"># 6.断开连接</span></span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>如果用Python程序实现就会简单很多:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#1.创建套接字对象默认使用IPv4和TCP协议</span></span><br><span class="line">    client = socket()</span><br><span class="line">    <span class="comment">#2.连接到服务器(需要指定IP地址和端口)</span></span><br><span class="line">    client.connect((<span class="string">'192.168.1.2'</span>,<span class="number">6789</span>))</span><br><span class="line">    <span class="comment">#3.从服务器接收数据</span></span><br><span class="line">    print(clinet.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    client.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是,上面的服务器并没有使用多线程或异步I/O的处理方式,这也就意味着当服务器于客户端处于通信状态时,其他客户端只能排队等待.所以我们就需要设计一个多线程处理多用户请求的服务器.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket,SOCK_STREAM,AF_INET</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 自定义线程类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileTransferHandler</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cclient)</span>:</span></span><br><span class="line">            super().__init__()</span><br><span class="line">            self.cclient = cclient</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">            my_dict = &#123;&#125;</span><br><span class="line">            my_dict[<span class="string">'filename'</span>] = <span class="string">'guido.jpg'</span></span><br><span class="line">            <span class="comment"># JSON是纯文本不能携带二进制数据</span></span><br><span class="line">            <span class="comment"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class="line">            my_dict[<span class="string">'filedata'</span>] = data</span><br><span class="line">            <span class="comment"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class="line">            json_str = dumps(my_dict)</span><br><span class="line">            <span class="comment"># 发送JSON字符串</span></span><br><span class="line">            self.cclient.send(json_str.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.cclient.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    server = socket()</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class="line">    server.bind((<span class="string">'192.168.1.2'</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    print(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'guido.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将二进制数据处理成base64再解码成字符串</span></span><br><span class="line">        data = b64encode(f.read()).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="comment"># 启动一个线程来处理客户端的请求</span></span><br><span class="line">        FileTransferHandler(client).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    client = socket()</span><br><span class="line">    client.connect((<span class="string">'192.168.1.2'</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 定义一个保存二进制数据的对象</span></span><br><span class="line">    in_data = bytes()</span><br><span class="line">    <span class="comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        <span class="comment"># 将收到的数据拼接起来</span></span><br><span class="line">        in_data += data</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class="line">    <span class="comment"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class="line">    my_dict = loads(in_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    filename = my_dict[<span class="string">'filename'</span>]</span><br><span class="line">    filedata = my_dict[<span class="string">'filedata'</span>].encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/Users/Hao/'</span> + filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将base64格式的数据解码成二进制数据并写入文件</span></span><br><span class="line">        f.write(b64decode(filedata))</span><br><span class="line">    print(<span class="string">'图片已保存.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p><strong>UDP套接字</strong></p><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。</p></blockquote><h4 id="网络应用开发"><a href="#网络应用开发" class="headerlink" title="网络应用开发"></a>网络应用开发</h4><h5 id="发送电子邮件"><a href="#发送电子邮件" class="headerlink" title="发送电子邮件"></a>发送电子邮件</h5><p>发送电子邮件要使用SMTP(简单邮件传输协议),SMTP也是一个建立在TCP(传输控制协议)提供的可靠数据传输服务的基础上的应用级协议,它规定了邮箱的发送者如何跟发送邮件的服务器进行通信的细节,而Python中的smtplib模块将这些操作简化成了几个函数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 请自行修改下面的邮件发送者和接收者</span></span><br><span class="line">    sender = <span class="string">'abcdefg@126.com'</span></span><br><span class="line">    receivers = [<span class="string">'uvwxyz@qq.com'</span>, <span class="string">'uvwxyz@126.com'</span>]</span><br><span class="line">    message = MIMEText(<span class="string">'用Python发送邮件的示例代码.'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'From'</span>] = Header(<span class="string">'王大锤'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'To'</span>] = Header(<span class="string">'骆昊'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(<span class="string">'示例代码实验邮件'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    smtper = SMTP(<span class="string">'smtp.126.com'</span>)</span><br><span class="line">    <span class="comment"># 请自行修改下面的登录口令</span></span><br><span class="line">    smtper.login(sender, <span class="string">'secretpass'</span>)</span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    print(<span class="string">'邮件发送完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>如果想要带附件的话…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">rom smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个带附件的邮件消息对象</span></span><br><span class="line">    message = MIMEMultipart()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建文本内容</span></span><br><span class="line">    text_content = MIMEText(<span class="string">'附件中有本月数据请查收'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(<span class="string">'本月数据'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 将文本内容添加到邮件消息对象中</span></span><br><span class="line">    message.attach(text_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/Users/Hao/Desktop/hello.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        txt = MIMEText(f.read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        txt[<span class="string">'Content-Type'</span>] = <span class="string">'text/plain'</span></span><br><span class="line">        txt[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=hello.txt'</span></span><br><span class="line">        message.attach(txt)</span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/Users/Hao/Desktop/汇总数据.xlsx'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        xls = MIMEText(f.read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        xls[<span class="string">'Content-Type'</span>] = <span class="string">'application/vnd.ms-excel'</span></span><br><span class="line">        xls[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=month-data.xlsx'</span></span><br><span class="line">        message.attach(xls)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtper = SMTP(<span class="string">'smtp.126.com'</span>)</span><br><span class="line">    <span class="comment"># 开启安全连接</span></span><br><span class="line">    <span class="comment"># smtper.starttls()</span></span><br><span class="line">    sender = <span class="string">'abcdefg@126.com'</span></span><br><span class="line">    receivers = [<span class="string">'uvwxyz@qq.com'</span>]</span><br><span class="line">    <span class="comment"># 登录到SMTP服务器</span></span><br><span class="line">    <span class="comment"># 请注意此处不是使用密码而是邮件客户端授权码进行登录</span></span><br><span class="line">    <span class="comment"># 对此有疑问的读者可以联系自己使用的邮件服务器客服</span></span><br><span class="line">    smtper.login(sender, <span class="string">'secretpass'</span>)</span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="comment"># 与邮件服务器断开连接</span></span><br><span class="line">    smtper.quit()</span><br><span class="line">    print(<span class="string">'发送完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    host  = <span class="string">"106.ihuyi.com"</span></span><br><span class="line">    sms_send_uri = <span class="string">"/webservice/sms.php?method=Submit"</span></span><br><span class="line">    <span class="comment"># 下面的参数需要填入自己注册的账号和对应的密码</span></span><br><span class="line">    params = urllib.parse.urlencode(&#123;<span class="string">'account'</span>: <span class="string">'你自己的账号'</span>, <span class="string">'password'</span> : <span class="string">'你自己的密码'</span>, <span class="string">'content'</span>: <span class="string">'您的验证码是：147258。请不要把验证码泄露给其他人。'</span>, <span class="string">'mobile'</span>: <span class="string">'接收者的手机号'</span>, <span class="string">'format'</span>:<span class="string">'json'</span> &#125;)</span><br><span class="line">    print(params)</span><br><span class="line">    headers = &#123;<span class="string">'Content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>, <span class="string">'Accept'</span>: <span class="string">'text/plain'</span>&#125;</span><br><span class="line">    conn = http.client.HTTPConnection(host, port=<span class="number">80</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    conn.request(<span class="string">'POST'</span>, sms_send_uri, params, headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    response_str = response.read()</span><br><span class="line">    jsonstr = response_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(json.loads(jsonstr))</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_100天从新手到大师_进程和线程</title>
      <link href="/2020/03/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/03/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center>   进程和线程</center><a id="more"></a><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><blockquote><p><strong>关于进程和线程的补充:</strong></p><ul><li>进程的数据共享是通过进程间通信机制(IPC,Inter-Process Communication)来实现,具体方式包括管道,信号,套接字,共享内存区等.</li><li>由于线程在同一个进程下,他们可以共享相同的上下文,因此相对于进程而言,线程间的信息共享和通信更加容易.</li></ul></blockquote><p>Python既支持多进程,也支持多线程,因此使用Python实现并发编程主要有三种方式:</p><ul><li>多进程</li><li>多线程</li><li>多进程+多线程</li></ul><h4 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h4><p>Unix和Linux操作系统都提供了<code>fork()</code>系统调用来创建进程,调用<code>fork()</code>函数的是父进程,创建出的是子进程,子进程是父进程的一个拷贝,但是子进程拥有自己的PID.<code>fork()</code>函数非常特殊,它会返回两次,父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID,而子进程中的返回值永远都是0。Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">'Python从入门到住院.pdf'</span>, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">'Peking Hot.avi'</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>在上面代码中,我们通过<code>Process</code>类创建了进程对象,通过<code>target</code>参数传入一个函数来表示进程启动后要执行的代码,后面的<code>args</code>是一个元组,代表了传递给函数的参数.<code>Process</code>对象的<code>start</code>方法用来启动进程,而 <code>join</code>方法表示等待进程执行结束.</p></blockquote><p>也可以用subprocess模块中的类和函数来创建和启动子进程,然后通过管道和子进程通信.</p><h4 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h4><p>推荐使用threading模块,该模块对多线程编程提供了更好的面向对象封装.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = Thread(target=download, args=(<span class="string">'Python从入门到住院.pdf'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = Thread(target=download, args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.3f秒'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>我们可以直接使用threading模块中的<code>Thread</code>类来创建线程,但是我们同样可以通过继承实现自己的线程类.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'开始下载%s...'</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (self._filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>因为多个线程可以共享进程的内存空间,因此要实现多个线程间的通信相对简单,能想到的最直接的办法就是设置一个全局变量,多个线程共享这个全局变量即可.但是当多个线程共享同一个变量(通常称之为”资源”)的时候,很有可能产生不可控的结果从而导致成勋失效甚至崩溃.如果一个资源被多个线程竞争使用,那么我们通常称之为”临界资源”,对”临界资源”的访问需要加上保护,否则资源会处于”混乱”的状态.</p></blockquote><p>所以要对临界资源加锁:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line">        self._lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        <span class="comment"># 先获取锁才能执行后续的代码</span></span><br><span class="line">        self._lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_balance = self._balance + money</span><br><span class="line">            sleep(<span class="number">0.01</span>)</span><br><span class="line">            self._balance = new_balance</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            self._lock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, account, money)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>比较遗憾的是Python的多线程并不能发挥CPU的多核特性.原因是因为Python的解释器有一个”全局解释器锁(GIL)的东西,任何线程执行前必须先获得GIL锁,然后每执行100条字节码,解释器就自动释放GIL锁,让别的线程有机会执行.</p></blockquote><h4 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h4><blockquote><p>无论是多线程还是多进程,只要数量一多.效率就会上不去.</p></blockquote><blockquote><p>是否采用多任务的第二考虑是任务的类型,任务可以分为计算密集型和I/O密集型:</p><ul><li>计算密集型的特点是要进行大量的计算,消耗CPU资源,这种任务全靠CPU的运算能力,虽然也可以多进程运算,但是任务越多,花费在切换任务上的时间越多,CPU执行效率就越低,计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到了Python中有嵌入C/C++代码的机制。</li><li>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。</li></ul></blockquote><h4 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h4><blockquote><p>现在操作系统对I/O操作的改进中最为重要的就是支持异步I/O.如果充分利用操作系统提供的异步I/O支持,就可以用单线程模型来执行多任务,这种全新的模式成为事件驱动模型.。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下实现多任务编程的一种趋势。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_100天从新手到大师_字符串和正则表达式</title>
      <link href="/2020/03/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/03/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<center>   字符串和正则表达式</center><a id="more"></a><h2 id="字符串和正则表达式"><a href="#字符串和正则表达式" class="headerlink" title="字符串和正则表达式"></a>字符串和正则表达式</h2><h4 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h4><blockquote><p><strong>什么是正则表达式?</strong>用于描述符合某种复杂规则的字符串的工具,定义了字符串匹配模式.</p></blockquote><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等 但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等 但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等 但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(? <name>exp)</name></td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?=exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?=ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td>(?&lt;=\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.<em>b a.</em>?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>注意：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成(和)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h4 id="python对正则表达式的支持"><a href="#python对正则表达式的支持" class="headerlink" title="python对正则表达式的支持"></a>python对正则表达式的支持</h4><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_100天从新手到大师_文件和异常</title>
      <link href="/2020/03/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
      <url>/2020/03/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<center>   文件和异常</center><a id="more"></a><h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><p>在Python中实现文件的读写操作其实非常简单，通过Python内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table><h4 id="读文本文件"><a href="#读文本文件" class="headerlink" title="读文本文件"></a>读文本文件</h4><p>读取文本文件时，需要在使用<code>open</code>函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为<code>&#39;r&#39;</code>（如果不指定，默认值也是<code>&#39;r&#39;</code>），然后通过<code>encoding</code>参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f = open(<span class="string">'伊苏神话.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">"utf-8')</span></span><br><span class="line"><span class="string">    print(f.read())</span></span><br><span class="line"><span class="string">    f.close()</span></span><br><span class="line"><span class="string">             </span></span><br><span class="line"><span class="string">if __name__ == '__main__':</span></span><br><span class="line"><span class="string">    main()</span></span><br></pre></td></tr></table></figure><blockquote><p>如果<code>open</code>幻术指定的文件不存在或者无法打开,那么将导致程序崩溃.所以我们要加入异常处理机制.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f = <span class="literal">None</span></span><br><span class="line">    <span class="comment">#将可能出现情况的代码放在这儿</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">         f = open(<span class="string">'致橡树.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        print(f.read())</span><br><span class="line">    <span class="comment">#后面跟上一个或多个except用来处理异常</span></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">'无法打开指定的文件!'</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">'指定了未知的编码!'</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">'读取文件时解码错误!'</span>)</span><br><span class="line">    <span class="comment">#最后通常跟一个finally来关闭文件,这儿的代码不管文件会不会报错都会被执行,适合用来做释放外部资源的操作</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            print(f.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">'无法打开指定的文件!'</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">'指定了未知的编码!'</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">'读取文件时解码错误!'</span>)</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>除了使用文件对象的<code>read</code>方法来读取文件之外,还可以使用for-in循环逐行读取或者用<code>readline</code>方法将文件按行读取到一个列表中.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#一次性读取整个文件内容</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'水浒传.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(f.read())</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 通过for-in循环逐行读取</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>, mode=<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            print(line, end=<span class="string">''</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件按行读取到列表中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'致橡树.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    print(lines)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="写文本文件"><a href="#写文本文件" class="headerlink" title="写文本文件"></a>写文本文件</h4><p>在使用<code>open</code>函数时指定好文件名并将文件模式设置为<code>&#39;w&#39;</code>即可.<strong>注意:</strong>如果需要对文件内容进行追加式写入，应该将模式设置为<code>&#39;a&#39;</code>。如果要写入的文件不存在会自动创建文件而不是引发异常。</p><h4 id="读写二进制文件"><a href="#读写二进制文件" class="headerlink" title="读写二进制文件"></a>读写二进制文件</h4><p>通过二进制文件可以实现对二进制文件的复制.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'害怕.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fs1:</span><br><span class="line">            data = fs1.read()</span><br><span class="line">            print(type(data))  <span class="comment"># &lt;class 'bytes'&gt;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'滑稽.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fs2:</span><br><span class="line">            fs2.write(data)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'指定的文件无法打开.'</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'读写文件时出现错误.'</span>)</span><br><span class="line">    print(<span class="string">'程序执行结束.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="读取JSON文件"><a href="#读取JSON文件" class="headerlink" title="读取JSON文件"></a>读取JSON文件</h4><p>JSON和Python中的字典一样,所以~</p><table><thead><tr><th align="center">Python</th><th align="center">JSON</th></tr></thead><tbody><tr><td align="center">dict</td><td align="center">object</td></tr><tr><td align="center">list, tuple</td><td align="center">array</td></tr><tr><td align="center">str</td><td align="center">string</td></tr><tr><td align="center">int, float, int- &amp; float-derived Enums</td><td align="center">number</td></tr><tr><td align="center">True / False</td><td align="center">true / false</td></tr><tr><td align="center">None</td><td align="center">null</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    mydict = &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'骆昊'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">38</span>,</span><br><span class="line">        <span class="string">'qq'</span>: <span class="number">957658</span>,</span><br><span class="line">        <span class="string">'friends'</span>: [<span class="string">'王大锤'</span>, <span class="string">'白元芳'</span>],</span><br><span class="line">        <span class="string">'cars'</span>: [</span><br><span class="line">            &#123;<span class="string">'brand'</span>: <span class="string">'BYD'</span>, <span class="string">'max_speed'</span>: <span class="number">180</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'brand'</span>: <span class="string">'Audi'</span>, <span class="string">'max_speed'</span>: <span class="number">280</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'brand'</span>: <span class="string">'Benz'</span>, <span class="string">'max_speed'</span>: <span class="number">320</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fs:</span><br><span class="line">            json.dump(mydict, fs)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">'保存数据完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>json模块中有四个比较重要的函数:</p><ul><li><code>dump</code> : 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> : 将python对象处理成JSON格式的字符串</li><li><code>load</code> : 将文件中JSON数据反序列化成对象</li><li><code>loads</code> : 将字符串的内容反序列化成python对象</li></ul><blockquote><p><strong>什么是序列化和反序列化?</strong></p><p>序列化,在计算机科学的数据处理中,是指将数据结构或对象状态转换为可以存储或传输的形式,这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    resp = requests.get(<span class="string">'http://api.tianapi.com/guonei/?key=APIKey&amp;num=10'</span>)</span><br><span class="line">    data_model = json.loads(resp.text)</span><br><span class="line">    <span class="keyword">for</span> news <span class="keyword">in</span> data_model[<span class="string">'newslist'</span>]:</span><br><span class="line">        print(news[<span class="string">'title'</span>])</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span></span><br><span class="line"> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure><blockquote><p>在python中实现序列化和反序列化除了使用json模块之外,还可以使用pickle和shelve模块,但这两个模块使用特有的序列化协议来序列化数据,因此序列化后的数据只能被Python识别.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_100天从新手到大师_图形用户界面和游戏开发</title>
      <link href="/2020/03/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2020/03/04/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<center>   图形化界面和游戏开发</center><a id="more"></a><h2 id="图形化界面和游戏开发"><a href="#图形化界面和游戏开发" class="headerlink" title="图形化界面和游戏开发"></a>图形化界面和游戏开发</h2><h4 id="基于tkinter模块的GUI"><a href="#基于tkinter模块的GUI" class="headerlink" title="基于tkinter模块的GUI"></a>基于tkinter模块的GUI</h4><p>GUI是图形用户界面的缩写,python中默认的的GUI开发模块是tkinter.</p><blockquote><p>tkinter开发的5个步骤:</p><ol><li><p>导入tkinter模块中我们需要的东西.</p></li><li><p>创建一个顶层窗口对象并用它来承载整个GUI应用.</p></li><li><p>在顶层窗口对象上添加GUI组件.</p></li><li><p>通过代码将这些GUI组件的功能组织起来.</p></li><li><p>进入主事件循环.</p></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改标签上的文字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_label_text</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> flag</span><br><span class="line">        flag = <span class="keyword">not</span> flag</span><br><span class="line">        color, msg = (<span class="string">'red'</span>, <span class="string">'Hello, world!'</span>)\</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">else</span> (<span class="string">'blue'</span>, <span class="string">'Goodbye, world!'</span>)</span><br><span class="line">        label.config(text=msg, fg=color)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确认退出</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">confirm_to_quit</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tkinter.messagebox.askokcancel(<span class="string">'温馨提示'</span>, <span class="string">'确定要退出吗?'</span>):</span><br><span class="line">            top.quit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建顶层窗口</span></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    <span class="comment"># 设置窗口大小</span></span><br><span class="line">    top.geometry(<span class="string">'240x160'</span>)</span><br><span class="line">    <span class="comment"># 设置窗口标题</span></span><br><span class="line">    top.title(<span class="string">'小游戏'</span>)</span><br><span class="line">    <span class="comment"># 创建标签对象并添加到顶层窗口</span></span><br><span class="line">    label = tkinter.Label(top, text=<span class="string">'Hello, world!'</span>, font=<span class="string">'Arial -32'</span>, fg=<span class="string">'red'</span>)</span><br><span class="line">    label.pack(expand=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建一个装按钮的容器</span></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    <span class="comment"># 创建按钮对象 指定添加到哪个容器中 通过command参数绑定事件回调函数</span></span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'修改'</span>, command=change_label_text)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'退出'</span>, command=confirm_to_quit)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line">    <span class="comment"># 开启主事件循环</span></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>注意:GUI应用通常是事件驱动的,,之所以要进入主事件循环就是要监听鼠标,键盘等各种事情的发生并执行对应的代码对时间进行处理,因为事件会持续发生,所以需要这样的一个循环一直运行着等待下一个事件的发生,另一方面,Tk为控件的摆放提供了三种布局管理器,通过布局管理器可以对控件进行定位,这三种布局管理器分别是：</p><ul><li>Placer（开发者提供控件的大小和摆放位置）</li><li>Packer（自动将控件填充到合适的位置）</li><li>Grid（基于网格坐标来摆放控件）</li></ul></blockquote><h4 id="使用Pygame进行游戏开发"><a href="#使用Pygame进行游戏开发" class="headerlink" title="使用Pygame进行游戏开发"></a>使用Pygame进行游戏开发</h4><p>Pygame是一个开源的Python模块,专注于多媒体应用的开发,其中包含对图像,声音,视频,事件,碰撞等的支持.Pygame建立在SDL的基础上,SDL是一套跨平台的多媒体开发库,用c语言实现,被广泛的应用于游戏,模拟器,播放器等的开发.而而Pygame让游戏开发者不再被底层语言束缚，可以更多的关注游戏的功能和逻辑。</p><p>举个栗子:</p><h5 id="制作游戏窗口"><a href="#制作游戏窗口" class="headerlink" title="制作游戏窗口"></a>制作游戏窗口</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#初始化导入的pygame中的模块</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    <span class="comment">#初始化用于显示的窗口并设置窗口大小</span></span><br><span class="line">    screen = pygame.desplay.set_mode((<span class="number">800</span>,<span class="number">600</span>))</span><br><span class="line">    <span class="comment">#设置当前窗口标题</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">'大鱼吃小鱼'</span>)</span><br><span class="line">    runnring= = <span class="literal">True</span></span><br><span class="line">    <span class="comment">#开启一个事件循环处理发生的事件</span></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        <span class="comment">#从消息队列中获取事件并对事件进行处理</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="在窗口中绘图"><a href="#在窗口中绘图" class="headerlink" title="在窗口中绘图"></a>在窗口中绘图</h5><p>可以通过pygame中draw模块的函数在窗口上绘图，可以绘制的图形包括：线条、矩形、多边形、圆、椭圆、圆弧等。需要说明的是，屏幕坐标系是将屏幕左上角设置为坐标原点<code>(0, 0)</code>，向右是x轴的正向，向下是y轴的正向，在表示位置或者设置尺寸的时候，我们默认的单位都是像素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#初始化导入的pygame中的模块</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    <span class="comment">#初始化用于显示的窗口并设置窗口尺寸</span></span><br><span class="line">    screem = pygame.display.set_caption((<span class="number">800</span>,<span class="number">600</span>))</span><br><span class="line">    <span class="comment">#设置当前 窗口的标题</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">'大鱼吃小鱼'</span>)</span><br><span class="line">    <span class="comment">#设置窗口的背景颜色(背景颜色是由红绿蓝三原色构成的元组)</span></span><br><span class="line">    screen.fill((<span class="number">242</span>,<span class="number">242</span>,<span class="number">242</span>))</span><br><span class="line">    <span class="comment">#绘制一个圆(参数分别是:屏幕,颜色,圆心位置,半径,0表示填充圆)</span></span><br><span class="line">    pygame.draw.circle(screen,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),(<span class="number">100</span>,<span class="number">100</span>),<span class="number">30</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#刷新当前窗口(渲染窗口将绘制的的图像呈现出来)</span></span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 开启一个事件循环处理</span></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        <span class="comment">#从消息队列中获取事件并对事件进行处理</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="加载图像"><a href="#加载图像" class="headerlink" title="加载图像"></a>加载图像</h5><p>如果需要直接加载图像到窗口上,可以使用pygame中的image模块的函数来加载图像,再通过之前获得的窗口对象的<code>blit</code>方法渲染图像.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#初始化导入的pygame中的模块</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    <span class="comment">#初始化用于显示的窗口并设置窗口尺寸</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    <span class="comment">#设置当前窗口的标题</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">'大球吃小球'</span>)</span><br><span class="line">    <span class="comment">#设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)</span></span><br><span class="line">    screen.fill((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="comment">#通过指定的文件名加载图像</span></span><br><span class="line">    ball_image = pygame.image.load(<span class="string">'./res/ball.png'</span>)</span><br><span class="line">    screen.blit(ball_image,(<span class="number">50</span>,<span class="number">50</span>))</span><br><span class="line">    <span class="comment"># 刷新当前窗口(渲染窗口将当前绘制的图像呈现出来)</span></span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 开启一个事件循环处理发生的事件</span></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        <span class="comment">#从消息队列中获取事件并对事件进行处理</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type ==pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="实现动画效果"><a href="#实现动画效果" class="headerlink" title="实现动画效果"></a>实现动画效果</h5><p>如果要让上面代码中的小球动起来，可以将小球的位置用变量来表示，并在循环中修改小球的位置再刷新整个窗口即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化导入的pygame中的模块</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    <span class="comment"># 初始化用于显示的窗口并设置窗口尺寸</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    <span class="comment"># 设置当前窗口的标题</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">'大球吃小球'</span>)</span><br><span class="line">    <span class="comment">#定义变量来表示小球在屏幕上的位置</span></span><br><span class="line">    x,y = <span class="number">50</span>,<span class="number">50</span></span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    <span class="comment">#开启一个事件循环处理发生的事件</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            running = <span class="literal">False</span></span><br><span class="line">    screen.fill((<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    pygame.draw.circle(screen,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,),(x,y),<span class="number">30</span>,<span class="number">0</span>)</span><br><span class="line">    pygame.display.flip(<span class="number">50</span>)</span><br><span class="line">    x,y = x+<span class="number">5</span>,y+<span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h5><blockquote><p>实质上就是检测两个物体的中心距离有没有大于两物体的半径和.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    <span class="string">"""颜色"""</span></span><br><span class="line"></span><br><span class="line">    RED = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    GREEN = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    BLUE = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">    GRAY = (<span class="number">242</span>, <span class="number">242</span>, <span class="number">242</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_color</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"""获得随机颜色"""</span></span><br><span class="line">        r = randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">        g = randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">        b = randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">return</span> (r, g, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""球"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, radius, sx, sy, color=Color.RED)</span>:</span></span><br><span class="line">        <span class="string">"""初始化方法"""</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.sx = sx</span><br><span class="line">        self.sy = sy</span><br><span class="line">        self.color = color</span><br><span class="line">        self.alive = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        <span class="string">"""移动"""</span></span><br><span class="line">        self.x += self.sx</span><br><span class="line">        self.y += self.sy</span><br><span class="line">        <span class="keyword">if</span> self.x - self.radius &lt;= <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">                self.x + self.radius &gt;= screen.get_width():</span><br><span class="line">            self.sx = -self.sx</span><br><span class="line">        <span class="keyword">if</span> self.y - self.radius &lt;= <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">                self.y + self.radius &gt;= screen.get_height():</span><br><span class="line">            self.sy = -self.sy</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="string">"""吃其他球"""</span></span><br><span class="line">        <span class="keyword">if</span> self.alive <span class="keyword">and</span> other.alive <span class="keyword">and</span> self != other:</span><br><span class="line">            dx, dy = self.x - other.x, self.y - other.y</span><br><span class="line">            distance = sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> distance &lt; self.radius + other.radius \</span><br><span class="line">                    <span class="keyword">and</span> self.radius &gt; other.radius:</span><br><span class="line">                other.alive = <span class="literal">False</span></span><br><span class="line">                self.radius = self.radius + int(other.radius * <span class="number">0.146</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        <span class="string">"""在窗口上绘制球"""</span></span><br><span class="line">        pygame.draw.circle(screen, self.color,</span><br><span class="line">                           (self.x, self.y), self.radius, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h5 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h5><p>可以在事件循环中对鼠标事件进行处理,通过事件对象的<code>type</code>属性可以判断事件类型,再通过<code>pos</code>属性就可以会的鼠标的位置.处理键盘也是类似.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#定义用来装所有球的容器</span></span><br><span class="line">    balls = []</span><br><span class="line">    <span class="comment">#初始化导入的pygame模块</span></span><br><span class="line">    pygame.init()</span><br><span class="line">     <span class="comment"># 初始化用于显示的窗口并设置窗口尺寸</span></span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    <span class="comment"># 设置当前窗口的标题</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">'大球吃小球'</span>)</span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 开启一个事件循环处理发生的事件</span></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        <span class="comment"># 从消息队列中获取事件并对事件进行处理</span></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 处理鼠标事件的代码</span></span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.MOUSEBUTTONDOWN <span class="keyword">and</span> event.button == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 获得点击鼠标的位置</span></span><br><span class="line">                x, y = event.pos</span><br><span class="line">                radius = randint(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">                sx, sy = randint(<span class="number">-10</span>, <span class="number">10</span>), randint(<span class="number">-10</span>, <span class="number">10</span>)</span><br><span class="line">                color = Color.random_color()</span><br><span class="line">                <span class="comment"># 在点击鼠标的位置创建一个球(大小、速度和颜色随机)</span></span><br><span class="line">                ball = Ball(x, y, radius, sx, sy, color)</span><br><span class="line">                <span class="comment"># 将球添加到列表容器中</span></span><br><span class="line">                balls.append(ball)</span><br><span class="line">        screen.fill((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        <span class="comment"># 取出容器中的球 如果没被吃掉就绘制 被吃掉了就移除</span></span><br><span class="line">        <span class="keyword">for</span> ball <span class="keyword">in</span> balls:</span><br><span class="line">            <span class="keyword">if</span> ball.alive:</span><br><span class="line">                ball.draw(screen)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                balls.remove(ball)</span><br><span class="line">        pygame.display.flip()</span><br><span class="line">        <span class="comment"># 每隔50毫秒就改变球的位置再刷新窗口</span></span><br><span class="line">        pygame.time.delay(<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">for</span> ball <span class="keyword">in</span> balls:</span><br><span class="line">            ball.move(screen)</span><br><span class="line">            <span class="comment"># 检查球有没有吃到其他的球</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> balls:</span><br><span class="line">                ball.eat(other)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100天从新手到大师_面向对象编程</title>
      <link href="/2020/02/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/02/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python_100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center>   面向对象编程</center><a id="more"></a><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self, course_name)</span>:</span></span><br><span class="line">        print(<span class="string">'%s正在学习%s.'</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_movie</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            print(<span class="string">'%s只能观看《熊出没》.'</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s正在观看岛国爱情大电影.'</span> % self.name)</span><br></pre></td></tr></table></figure><h4 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 创建学生对象并指定姓名和年龄</span></span><br><span class="line">    stu1 = Student(<span class="string">'骆昊'</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 给对象发study消息</span></span><br><span class="line">    stu1.study(<span class="string">'Python程序设计'</span>)</span><br><span class="line">    <span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">'王大锤'</span>, <span class="number">15</span>)</span><br><span class="line">    stu2.study(<span class="string">'思想品德'</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="访问可见性问题"><a href="#访问可见性问题" class="headerlink" title="访问可见性问题"></a>访问可见性问题</h4><p>在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, foo)</span>:</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__foo)</span><br><span class="line">        print(<span class="string">'__bar'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们.</p></blockquote><blockquote><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻</p></blockquote><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h4><p>为了解决直接调用属性可能出现的问题.我们为属性提供对应的getter和setter方法提供对应操作,为此就需要<code>@property</code>包装器.</p><blockquote><p><code>@property</code>装饰器可以将<code>对象.属性</code>的东西转换成对应的getter和setter方法.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩飞行棋.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s正在玩斗地主.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person(<span class="string">'王大锤'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment">#没有设置name对应的setter方法</span></span><br><span class="line">    <span class="comment"># person.name = '白元芳'  # AttributeError: can't set attribute </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a><code>__slots__</code>魔法</h4><p>python是一门动态语言.通常,动态语言允许我们在程序运行时给对象绑定新的属性或方法,也可以对已绑定的属性或方法进行解绑定.但是如果我们需要限定自定义类型的对象只能帮顶某些属性,可以通过定义<code>__slots__</code>变量来进行限定.需要注意的是<code>__slots__</code>的限定只对当前了的对象生效,对子类并不起任何作用.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#注意这里__slots__函数中的参数用“”包裹</span></span><br><span class="line">    __slots__ = (<span class="string">"name"</span>, <span class="string">"age"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,sex,age)</span>:</span></span><br><span class="line">        super().__init__(name,age)</span><br><span class="line">        self.sex = sex</span><br><span class="line"> </span><br><span class="line">p1 = Person(<span class="string">"tom"</span>,<span class="number">18</span>)</span><br><span class="line">p1.sex = <span class="string">"male"</span> <span class="comment">#AttributeError: 'Person' object has no attribute 'sex'，添加不了别的属性</span></span><br><span class="line"> </span><br><span class="line">stu1 = Student(<span class="string">"jack"</span>,<span class="string">"male"</span>,<span class="number">22</span>)</span><br><span class="line">print(stu1.name,stu1.sex,stu1.age)</span><br><span class="line">stu1.country= <span class="string">"china"</span></span><br><span class="line">print(stu1.country)  <span class="comment">#虽然父类设置__slots__属性约束，但是对子类没有约束</span></span><br></pre></td></tr></table></figure><h4 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h4><p>给一个类的所有对象提供通用的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></span><br><span class="line">        self._a = a</span><br><span class="line">        self._b = b</span><br><span class="line">        self._c = c</span><br><span class="line">        </span><br><span class="line"><span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a + b &gt; c <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a + c &gt; b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._a + self._b + self._c</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        half = self.perimeter() / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> sqrt(half * (half - self._a) *</span><br><span class="line">                    (half - self._b) * (half - self._c))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Triangle.is_valid(a, b, c):</span><br><span class="line">        t = Triangle(a, b, c)</span><br><span class="line">        print(t.perimeter())</span><br><span class="line">        <span class="comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span></span><br><span class="line">        <span class="comment"># print(Triangle.perimeter(t))</span></span><br><span class="line">        print(t.area())</span><br><span class="line">        <span class="comment"># print(Triangle.area(t))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'无法构成三角形.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>和静态方法比较类似,python可以定义类方法,类方法的第一个参数约定名为<code>cls</code>,表示的是当前类的相关信息的对象.(类本身也是个对象,有的地方也称为类的元数据对象),通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""数字时钟"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(cls)</span>:</span></span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""走字"""</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示时间"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%02d:%02d:%02d'</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><p>简单来说,分为三种:</p><ul><li>is-a关系也叫继承或者泛化,如中国菜和鱼香肉丝的关系.</li><li>has-a关系通常称之为关联,关联关系如果是整体和部分的关联,如汽车和引擎的关系,又称为聚合关系,如果整体和部分的生命周期相关联,即整体和部分不可分割,同时存在也同时消亡,那么这种关系称之为合成关系.</li><li>use-a关系通常称之为依赖关系.比如汽车有一个启动方法,启动需要车钥匙,那么汽车和车钥匙就是依赖关系.</li></ul><h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><p>概念上和Java的区别不大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""人"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s正在愉快的玩耍.'</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_av</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">18</span>:</span><br><span class="line">            print(<span class="string">'%s正在观看爱情动作片.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%s只能观看《熊出没》.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"""学生"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, grade)</span>:</span></span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @grade.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(self, grade)</span>:</span></span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self, course)</span>:</span></span><br><span class="line">        print(<span class="string">'%s的%s正在学习%s.'</span> % (self._grade, self._name, course))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="string">"""老师"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, title)</span>:</span></span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @title.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">(self, title)</span>:</span></span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teach</span><span class="params">(self, course)</span>:</span></span><br><span class="line">        print(<span class="string">'%s%s正在讲%s.'</span> % (self._name, self._title, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stu = Student(<span class="string">'王大锤'</span>, <span class="number">15</span>, <span class="string">'初三'</span>)</span><br><span class="line">    stu.study(<span class="string">'数学'</span>)</span><br><span class="line">    stu.watch_av()</span><br><span class="line">    t = Teacher(<span class="string">'骆昊'</span>, <span class="number">38</span>, <span class="string">'砖家'</span>)</span><br><span class="line">    t.teach(<span class="string">'Python程序设计'</span>)</span><br><span class="line">    t.watch_av()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="重写和多态"><a href="#重写和多态" class="headerlink" title="重写和多态"></a>重写和多态</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object, metaclass=ABCMeta)</span>:</span></span><br><span class="line">    <span class="string">"""宠物"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nickname)</span>:</span></span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""发出声音"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Pet)</span>:</span></span><br><span class="line">    <span class="string">"""狗"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: 汪汪汪...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Pet)</span>:</span></span><br><span class="line">    <span class="string">"""猫"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: 喵...喵...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pets = [Dog(<span class="string">'旺财'</span>), Cat(<span class="string">'凯蒂'</span>), Dog(<span class="string">'大黄'</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>由于Python在语法层面并没有提供像Java或C#那样提供抽象类的支持,所以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100天从新手到大师_字符串和常用数据结构</title>
      <link href="/2020/02/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<center>   字符串和常用数据结构</center><a id="more"></a><h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>在python中,如果我们把单个或多个字符串用单引号或双引号包围起来,就可以表示一个字符串.</p><blockquote><p>以三个双引号或单引号开头的字符串可以折行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">"""</span></span><br><span class="line"><span class="string">&gt; hello,</span></span><br><span class="line"><span class="string">&gt; py</span></span><br><span class="line"><span class="string">&gt; """</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h5 id="关于转义"><a href="#关于转义" class="headerlink" title="关于转义"></a>关于转义</h5><p>和Java中一样可以将指定的字符转换成其他含义.</p><blockquote><p>值得注意的是在python中,如果不希望字符串中的<code>\</code>表示转义,可以在字符串的最前面加上字母<code>r</code>来加以说明:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; s1 = <span class="string">r'\'hello, world!\''</span></span><br><span class="line">&gt; s2 = <span class="string">r'\n\\hello, world!\\\n'</span></span><br><span class="line">&gt; <span class="comment"># 都不会转义</span></span><br><span class="line">&gt; print(s1, s2, end=<span class="string">''</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h5 id="丰富的运算符"><a href="#丰富的运算符" class="headerlink" title="丰富的运算符"></a>丰富的运算符</h5><p>python为字符串提供了相当多且方便的运算符:</p><p><code>+</code>:拼接</p><p><code>*</code>:重复一个字符串的内容</p><p><code>in</code>/<code>not in</code>:判断一个字符串是否包含另外一个字符串（成员运算）</p><p><code>[]</code>和<code>[:]</code>:从字符串取出某个字符或某些字符（切片运算）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'hello '</span> * <span class="number">3</span> <span class="comment"># hello hello hello </span></span><br><span class="line">s2 = <span class="string">'world'</span></span><br><span class="line">s1 += s2</span><br><span class="line">print(s1) <span class="comment"># hello hello hello world</span></span><br><span class="line">print(<span class="string">'ll'</span> <span class="keyword">in</span> s1) <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'good'</span> <span class="keyword">in</span> s1) <span class="comment"># False</span></span><br><span class="line">str2 = <span class="string">'abc123456'</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line">print(str2[<span class="number">2</span>]) <span class="comment"># c</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line">print(str2[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># c12</span></span><br><span class="line">print(str2[<span class="number">2</span>:]) <span class="comment"># c123456</span></span><br><span class="line">print(str2[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># c246</span></span><br><span class="line">print(str2[::<span class="number">2</span>]) <span class="comment"># ac246</span></span><br><span class="line">print(str2[::<span class="number">-1</span>]) <span class="comment"># 654321cba</span></span><br><span class="line">print(str2[<span class="number">-3</span>:<span class="number">-1</span>]) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure><h5 id="字符串相关的函数"><a href="#字符串相关的函数" class="headerlink" title="字符串相关的函数"></a>字符串相关的函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'hello, world!'</span></span><br><span class="line"><span class="comment"># 通过内置函数len计算字符串的长度</span></span><br><span class="line">print(len(str1)) <span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line">print(str1.capitalize()) <span class="comment"># Hello, world!</span></span><br><span class="line"><span class="comment"># 获得字符串每个单词首字母大写的拷贝</span></span><br><span class="line">print(str1.title()) <span class="comment"># Hello, World!</span></span><br><span class="line"><span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line">print(str1.upper()) <span class="comment"># HELLO, WORLD!</span></span><br><span class="line"><span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line">print(str1.find(<span class="string">'or'</span>)) <span class="comment"># 8</span></span><br><span class="line">print(str1.find(<span class="string">'shit'</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line"><span class="comment"># print(str1.index('or'))</span></span><br><span class="line"><span class="comment"># print(str1.index('shit'))</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line">print(str1.startswith(<span class="string">'He'</span>)) <span class="comment"># False</span></span><br><span class="line">print(str1.startswith(<span class="string">'hel'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line">print(str1.endswith(<span class="string">'!'</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line">print(str1.center(<span class="number">50</span>, <span class="string">'*'</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line">print(str1.rjust(<span class="number">50</span>, <span class="string">' '</span>))</span><br><span class="line">str2 = <span class="string">'abc123456'</span></span><br><span class="line"><span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line">print(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line">print(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line">print(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">str3 = <span class="string">'  jackfrued@126.com '</span></span><br><span class="line">print(str3)</span><br><span class="line"><span class="comment"># 获得字符串修剪左右两侧空格之后的拷贝</span></span><br><span class="line">print(str3.strip())</span><br></pre></td></tr></table></figure><h5 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">'%d * %d = %d'</span> % (a, b, a * b))</span><br></pre></td></tr></table></figure><p>当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">'&#123;0&#125; * &#123;1&#125; = &#123;2&#125;'</span>.format(a, b, a * b))</span><br></pre></td></tr></table></figure><p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表是一种结构化的,非标量类型,所以有一系列的属性和方法.</p><p>它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line">print(list1) <span class="comment"># [1, 3, 5, 7, 100]</span></span><br><span class="line"><span class="comment"># 乘号表示列表元素的重复</span></span><br><span class="line">list2 = [<span class="string">'hello'</span>] * <span class="number">3</span></span><br><span class="line">print(list2) <span class="comment"># ['hello', 'hello', 'hello']</span></span><br><span class="line"><span class="comment"># 计算列表长度(元素个数)</span></span><br><span class="line">print(len(list1)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 下标(索引)运算</span></span><br><span class="line">print(list1[<span class="number">0</span>]) <span class="comment"># 1</span></span><br><span class="line">print(list1[<span class="number">4</span>]) <span class="comment"># 100</span></span><br><span class="line"><span class="comment"># print(list1[5])  # IndexError: list index out of range</span></span><br><span class="line">print(list1[<span class="number">-1</span>]) <span class="comment"># 100</span></span><br><span class="line">print(list1[<span class="number">-3</span>]) <span class="comment"># 5</span></span><br><span class="line">list1[<span class="number">2</span>] = <span class="number">300</span></span><br><span class="line">print(list1) <span class="comment"># [1, 3, 300, 7, 100]</span></span><br><span class="line"><span class="comment"># 通过循环用下标遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(list1)):</span><br><span class="line">    print(list1[index])</span><br><span class="line"><span class="comment"># 通过for循环遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">    print(elem)</span><br><span class="line"><span class="comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">    print(index, elem)</span><br></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title=" "></a> </h5><h5 id="列表元素的增删"><a href="#列表元素的增删" class="headerlink" title="列表元素的增删"></a>列表元素的增删</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">list1.append(<span class="number">200</span>)</span><br><span class="line">list1.insert(<span class="number">1</span>, <span class="number">400</span>)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line"><span class="comment"># list1.extend([1000, 2000])</span></span><br><span class="line">list1 += [<span class="number">1000</span>, <span class="number">2000</span>]</span><br><span class="line">print(list1) <span class="comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line">print(len(list1)) <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1234</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">1234</span>)</span><br><span class="line">print(list1) <span class="comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span></span><br><span class="line"><span class="comment"># 从指定的位置删除元素</span></span><br><span class="line">list1.pop(<span class="number">0</span>)</span><br><span class="line">list1.pop(len(list1) - <span class="number">1</span>)</span><br><span class="line">print(list1) <span class="comment"># [400, 5, 7, 100, 200, 1000]</span></span><br><span class="line"><span class="comment"># 清空列表元素</span></span><br><span class="line">list1.clear()</span><br><span class="line">print(list1) <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h5 id="列表元素的切片"><a href="#列表元素的切片" class="headerlink" title="列表元素的切片"></a>列表元素的切片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'grape'</span>, <span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'waxberry'</span>]</span><br><span class="line">fruits += [<span class="string">'pitaya'</span>, <span class="string">'pear'</span>, <span class="string">'mango'</span>]</span><br><span class="line"><span class="comment"># 列表切片</span></span><br><span class="line">fruits2 = fruits[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">print(fruits2) <span class="comment"># apple strawberry waxberry</span></span><br><span class="line"><span class="comment"># 可以通过完整切片操作来复制列表</span></span><br><span class="line">fruits3 = fruits[:]</span><br><span class="line">print(fruits3) <span class="comment"># ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango']</span></span><br><span class="line">fruits4 = fruits[<span class="number">-3</span>:<span class="number">-1</span>]</span><br><span class="line">print(fruits4) <span class="comment"># ['pitaya', 'pear']</span></span><br><span class="line"><span class="comment"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span></span><br><span class="line">fruits5 = fruits[::<span class="number">-1</span>]</span><br><span class="line">print(fruits5) <span class="comment"># ['mango', 'pear', 'pitaya', 'waxberry', 'strawberry', 'apple', 'grape']</span></span><br></pre></td></tr></table></figure><h5 id="列表元素的排序"><a href="#列表元素的排序" class="headerlink" title="列表元素的排序"></a>列表元素的排序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'zoo'</span>, <span class="string">'internationalization'</span>, <span class="string">'blueberry'</span>]</span><br><span class="line">list2 = sorted(list1)</span><br><span class="line"><span class="comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span></span><br><span class="line"><span class="comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span></span><br><span class="line">list3 = sorted(list1, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span></span><br><span class="line">list4 = sorted(list1, key=len)</span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line">print(list4)</span><br><span class="line"><span class="comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span></span><br><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h5 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">print(f)</span><br><span class="line">f = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABCDE'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'1234567'</span>]</span><br><span class="line">print(f)</span><br><span class="line"><span class="comment"># 用列表的生成表达式语法创建列表容器</span></span><br><span class="line"><span class="comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class="line">f = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>)]</span><br><span class="line">print(sys.getsizeof(f))  <span class="comment"># 查看对象占用内存的字节数</span></span><br><span class="line">print(f)</span><br><span class="line"><span class="comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class="line"><span class="comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">print(sys.getsizeof(f))  <span class="comment"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class="line">print(f)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组与List的不同之处在于:元组的元素不能修改.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义元组</span></span><br><span class="line">t = (<span class="string">'骆昊'</span>, <span class="number">38</span>, <span class="literal">True</span>, <span class="string">'四川成都'</span>)</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># 获取元组中的元素</span></span><br><span class="line">print(t[<span class="number">0</span>])</span><br><span class="line">print(t[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 遍历元组中的值</span></span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> t:</span><br><span class="line">    print(member)</span><br><span class="line"><span class="comment"># 重新给元组赋值</span></span><br><span class="line"><span class="comment"># t[0] = '王大锤'  # TypeError</span></span><br><span class="line"><span class="comment"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span></span><br><span class="line">t = (<span class="string">'王大锤'</span>, <span class="number">20</span>, <span class="literal">True</span>, <span class="string">'云南昆明'</span>)</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">person = list(t)</span><br><span class="line">print(person)</span><br><span class="line"><span class="comment"># 列表是可以修改它的元素的</span></span><br><span class="line">person[<span class="number">0</span>] = <span class="string">'李小龙'</span></span><br><span class="line">person[<span class="number">1</span>] = <span class="number">25</span></span><br><span class="line">print(person)</span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">fruits_list = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits_tuple = tuple(fruits_list)</span><br><span class="line">print(fruits_tuple)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Q:既然有了List为什么还要元组?</strong></p><p><strong>A:</strong></p><ol><li>元组中的元素是无法修改的,在多线程环境中不变的变量可能会更合适.</li><li>元组在创建时间和占用空间上都优于list.</li></ol></blockquote><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>不允许有重复元素,而且可以进行交集,并集,差集运算.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合的字面量语法</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;<span class="comment">#由于不能有重复元素所以set的元素为1,2,3</span></span><br><span class="line">print(set1)</span><br><span class="line">print(<span class="string">'Length ='</span>, len(set1))</span><br><span class="line"><span class="comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span></span><br><span class="line">set2 = set(range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">set3 = set((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line">print(set2, set3)</span><br><span class="line"><span class="comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(set4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素的增删</span></span><br><span class="line">set1.add(<span class="number">4</span>)<span class="comment"># 添加元素</span></span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>]) <span class="comment">#更新元素(将某个元素换为某个元素)</span></span><br><span class="line">set2.discard(<span class="number">5</span>) <span class="comment">#删除某个元素(不是必须存在)</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>) <span class="comment">#删除某个元素,该元素必须存在,否则报错</span></span><br><span class="line">print(set1, set2)</span><br><span class="line"><span class="comment">#随机返回一个元素值，然后把这个值删除，如果set为空，调用这个函数会返回Key错误。</span></span><br><span class="line">print(set3.pop()) </span><br><span class="line">print(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合的交集,并集,差集等运算</span></span><br><span class="line">print(set1 &amp; set2)</span><br><span class="line"><span class="comment"># print(set1.intersection(set2))</span></span><br><span class="line">print(set1 | set2)</span><br><span class="line"><span class="comment"># print(set1.union(set2))</span></span><br><span class="line">print(set1 - set2)</span><br><span class="line"><span class="comment"># print(set1.difference(set2))</span></span><br><span class="line">print(set1 ^ set2)</span><br><span class="line"><span class="comment"># print(set1.symmetric_difference(set2))</span></span><br><span class="line"><span class="comment"># 判断子集和超集</span></span><br><span class="line">print(set2 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set2.issubset(set1))</span></span><br><span class="line">print(set3 &lt;= set1)</span><br><span class="line"><span class="comment"># print(set3.issubset(set1))</span></span><br><span class="line">print(set1 &gt;= set2)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set2))</span></span><br><span class="line">print(set1 &gt;= set3)</span><br><span class="line"><span class="comment"># print(set1.issuperset(set3))</span></span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>就是键值对集合.</p><p>键和值通过冒号分开.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典的字面量语法</span></span><br><span class="line">scores = &#123;<span class="string">'张三'</span>: <span class="number">95</span>, <span class="string">'李四'</span>: <span class="number">78</span>, <span class="string">'王五'</span>: <span class="number">82</span>&#125;</span><br><span class="line"><span class="comment"># 创建字典的构造器语法</span></span><br><span class="line">items1 = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 通过zip函数将两个序列压成字典</span></span><br><span class="line">items2 = dict(zip([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'123'</span>))</span><br><span class="line"><span class="comment"># 创建字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br><span class="line">print(items1, items2, items3)</span><br><span class="line"><span class="comment"># 通过键可以获取字典中对应的值</span></span><br><span class="line">print(scores[<span class="string">'张三'</span>])</span><br><span class="line">print(scores[<span class="string">'李四'</span>])</span><br><span class="line"><span class="comment"># 对字典中所有键值对进行遍历</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;scores[key]&#125;</span>'</span>)</span><br><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">'白元芳'</span>] = <span class="number">65</span></span><br><span class="line">scores[<span class="string">'诸葛王朗'</span>] = <span class="number">71</span></span><br><span class="line">scores.update(冷面=<span class="number">67</span>, 方启鹤=<span class="number">85</span>)</span><br><span class="line">print(scores)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'武则天'</span> <span class="keyword">in</span> scores:</span><br><span class="line">    print(scores[<span class="string">'武则天'</span>])</span><br><span class="line">print(scores.get(<span class="string">'武则天'</span>))</span><br><span class="line"><span class="comment"># get方法也是通过键获取对应的值但是可以设置默认值</span></span><br><span class="line">print(scores.get(<span class="string">'武则天'</span>, <span class="number">60</span>))</span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line">print(scores.popitem())</span><br><span class="line">print(scores.popitem())</span><br><span class="line">print(scores.pop(<span class="string">'骆昊'</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">scores.clear()</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA下maven命令报错</title>
      <link href="/2020/01/17/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_maven_1/"/>
      <url>/2020/01/17/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_maven_1/</url>
      
        <content type="html"><![CDATA[<center>IDEA的maven插件可用,命令行不可用</center><a id="more"></a><p>最近倒腾硬盘将编程相关的环境,目录等等进行了修改,结果….Boom!</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在IDEA中的命令杠执行mvn命令报错</p><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h4><p>运行mvn命令时报空指针异常</p><h4 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h4><p>环境变量修改不合理</p><p>由于修改了maven的目录所以,要同步修改maven在系统中的环境变量.</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>由于我重新修改maven环境变量后无效(别人不一定)</p><p>所以从新安装了一个maven,并将环境变量中的值修改成了新的Maven,重新打开IDEA在命令行中运行maven命令,解决!</p>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_MongoDB</title>
      <link href="/2019/12/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_MongoDB/"/>
      <url>/2019/12/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_MongoDB/</url>
      
        <content type="html"><![CDATA[<center>工作需要,学习一下</center><a id="more"></a><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>非关系型文档数据库</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>MongoDB是为了快速开发互联网Web应用儿设计的数据库系统.</li><li>MongoDB的设计目标是极简,灵活,作为Web应用栈的一部分.</li><li>MongoDB的数据模型是面向文档的,所谓文档是一种类似于JSON的结构,简单理解MongoDB这个数据库中存的是各种各样的JSON.(BSON)</li></ul><h3 id="初试mongdb"><a href="#初试mongdb" class="headerlink" title="初试mongdb"></a>初试mongdb</h3><h4 id="下载MongoDB"><a href="#下载MongoDB" class="headerlink" title="下载MongoDB"></a>下载MongoDB</h4><ul><li>下载地址:<a href="https://www.mongodb.org/dl/win32/" target="_blank" rel="noopener">https://www.mongodb.org/dl/win32/</a></li><li>MongoDB的版本,偶数版为稳定版,奇数版为开发版.</li><li>MongoDB对于32位系统支持不佳,所以3.2版本以后没有再对32位系统的支持.</li></ul><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul><li>将mongoDB的bin目录添加到系统变量的path中</li></ul><h4 id="创建数据库目录"><a href="#创建数据库目录" class="headerlink" title="创建数据库目录"></a>创建数据库目录</h4><ul><li><p>在c盘根目录创建文件夹    data</p></li><li><p>在data下创建文件夹db</p><blockquote><p>默认创建在c盘下</p></blockquote></li></ul><h4 id="启动mongoDB服务器"><a href="#启动mongoDB服务器" class="headerlink" title="启动mongoDB服务器"></a>启动mongoDB服务器</h4><ul><li>在cmd命令行输入<code>mongod</code>启动mongdb服务器</li></ul><h4 id="启动mongoDB客户端"><a href="#启动mongoDB客户端" class="headerlink" title="启动mongoDB客户端"></a>启动mongoDB客户端</h4><ul><li><p>再启一个cmd(旧的别关),输入mongo连接服务器</p></li><li><p>出现<code>&gt;</code>表示连接成功</p></li></ul><h3 id="指定端口和路径"><a href="#指定端口和路径" class="headerlink" title="指定端口和路径"></a>指定端口和路径</h3><p>在控制台启动MongoDB </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath &lt;路径&gt; --port &lt;端口&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意:    打开的命令行窗口不能关闭</p><p>​            端口号不要超过65535</p></blockquote><h3 id="MongoDB设置为系统服务"><a href="#MongoDB设置为系统服务" class="headerlink" title="MongoDB设置为系统服务"></a>MongoDB设置为系统服务</h3><ul><li><p>开机自启</p><ol><li><p>在c盘根目录下创建data目录</p></li><li><p>在data目录下创建db(已创建)和log两个目录</p></li><li><p>创建配置文件<code>mongd.cfg</code>,在软件目录下(和bin目录同级)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: e:\programme\Servers\MongoDB\log</span><br><span class="line">   logAppend: true</span><br><span class="line">storage:</span><br><span class="line">dbPath: c:\data\db</span><br></pre></td></tr></table></figure></li><li><p>以管理员的身份打开命令行</p></li><li><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe create MongoDB binPath=&quot;\&quot;e:\programme\Servers\MongoDB\bin\mongod.exe\&quot; --service --config=\&quot;e:\programme\Servers\MongoDB\mongod.cfg\&quot;&quot; DisplayName= &quot;MongDB&quot; start= &quot;auto&quot;</span><br></pre></td></tr></table></figure></li><li><p>在任务管理器的服务中找到mongodb服务,启动</p></li><li><p>如果启动失败,则操作有误,</p><p>在控制台输入 sc delete MongoDB 删除之前配置的服务</p><p>然后从第一步从新来过</p></li></ol></li></ul><h3 id="安装图像化界面"><a href="#安装图像化界面" class="headerlink" title="安装图像化界面"></a>安装图像化界面</h3><p>推荐Robo3T</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="文档-document"><a href="#文档-document" class="headerlink" title="文档(document)"></a>文档(document)</h4><ul><li>类似于JS中的对象,在MongoDB中每一条数据都是一个文档</li></ul><h4 id="集合-collection"><a href="#集合-collection" class="headerlink" title="集合(collection)"></a>集合(collection)</h4><ul><li>集合就是一组<strong>文档</strong>,也就是集合是用来存放文档的</li><li>集合中存储的文档可以说各种各样的,没有格式要求</li><li>多个文档组成集合,多个集合组成数据库</li></ul><h4 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库(database)"></a>数据库(database)</h4><ul><li>数据库是一个仓库,在仓库中可以存放集合.</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示当前所有数据库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="meta">#</span><span class="bash">使用数据库</span></span><br><span class="line">user  &lt;dbname&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">当前所处的数据库</span></span><br><span class="line">db</span><br><span class="line"><span class="meta">#</span><span class="bash">显示当前库中所有的集合</span></span><br><span class="line">show collections</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong>在MongoDB中,数据库和集合都不需要手动创建,当我们创建文档是,文档所在的集合或数据库不存在,会自动创建(第一次插入文档时自动创建).</p><p>db相当于一个this变量,它指代当前数据库</p></blockquote><h3 id="数据库的CRUD"><a href="#数据库的CRUD" class="headerlink" title="数据库的CRUD"></a>数据库的CRUD</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">向数据库中插入文档</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#向集合中插入一个文档或多个文档</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##插入一个</span></span></span><br><span class="line">db.&lt;collectionName&gt;.insert(doc)</span><br><span class="line">db.&lt;collectionName&gt;.insertOne()</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##插入多个</span></span></span><br><span class="line">db.&lt;collectionName&gt;.insert([doc1,doc2,doc3])</span><br><span class="line">db.&lt;collectionName&gt;.insertMany()</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##生成_id</span></span></span><br><span class="line">ObjectId()</span><br></pre></td></tr></table></figure><blockquote><p>还是那句话,想学一个什么东西,去看第一手资料,官方文档,<strong>英语学习刻不容缓</strong>.</p><p><strong>注:</strong>当我们向及各种插入文档时,如果没有给定文档<code>_id</code>属性,则系统会自动生成一个,该属性作为文档的唯一标识,也可以自己指定,如果我们自己指定了,则系统不会自动生成</p></blockquote><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询数据库文档</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查询当前集合中的所有符合条件的文档</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##参数:&#123;&#125;:所有</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## &#123;字段名:值&#125;:字段名为指定值,多个条件用逗号分隔</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##方法:.count()/.length()统计条数</span></span></span><br><span class="line">db.&lt;collectionName&gt;.find()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查询当前集合中的一个符合条件的文档对象,可以直接跟方法,如.name</span></span></span><br><span class="line">db.&lt;collectionName&gt;.findOne()</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改数据库文档</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#注意:update()会使用新对象替换旧对象</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#    默认只修改第一个</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##参数multi:true是否修改多个(可不写)</span></span></span><br><span class="line">db.&lt;collectionName&gt;.update(查询条件,新对象,&#123;multi:true&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#如果需要修改指定的属性,而不是替换需要使用"修改操作符"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># $set可以用来修改文档中的指定属性</span></span></span><br><span class="line">db.&lt;collectionName&gt;.update(查询条件,&#123;$set:&#123;属性名:"值"&#125;&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># $unset用来删除文档中的指定属性</span></span></span><br><span class="line">db.&lt;collectionName&gt;.update(查询条件,&#123;$unset:&#123;属性名:随便(反正都要删了)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#同时修改多个符合条件的文档</span></span></span><br><span class="line">db.&lt;collectionName&gt;.updateMany()</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改一个符合条件的文档</span></span></span><br><span class="line">db.&lt;collectionName&gt;.updateOne()</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#替换一个文档</span></span></span><br><span class="line">db.&lt;collectionName&gt;.replaceOne()</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除数据库文档</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#根据条件删除文档,条件和find一样</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#第二个条件为仅删除一个,可选填ture/false</span></span></span><br><span class="line">db.&lt;collectionName&gt;.remove(条件,&lt;justOne&gt;)</span><br><span class="line">db.&lt;collectionName&gt;.deleteOne()</span><br><span class="line">db.&lt;collectionName&gt;.deleteMany()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##清空集合(集合还在)</span></span></span><br><span class="line">db.&lt;collectionName&gt;.remove(&#123;&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##删除集合(集合一起没)</span></span></span><br><span class="line">db.&lt;collectionName&gt;.drop();</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="内嵌文档"><a href="#内嵌文档" class="headerlink" title="内嵌文档"></a>内嵌文档</h4><blockquote><p>MongoDB的文档属性值也可以是一个文档,当一个文档的属性值是文档是,我们称之为内嵌文档.</p><p>MongoDB支持内嵌属性的查询如果要查询内嵌文档可以通过.的方式执行</p><p>如果要通过内嵌文档查询,属性名必须加引号</p></blockquote><h4 id="集合添加"><a href="#集合添加" class="headerlink" title="集合添加"></a>集合添加</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用于向数组中添加一个新的元素(会添加重复)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">push</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 向集合中添加一个新元素(有则不添加)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">addToSet</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i=1;i&lt;=20000;i++)&#123;</span><br><span class="line">db.numbers.insert(&#123;num:i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么减少方法执行次数?</p><p>先把数据push进数组里,然后执行插入(1次)</p><blockquote><p><strong>数据库的方法能少调用就少调用</strong></p></blockquote><h4 id="查询操作符"><a href="#查询操作符" class="headerlink" title="查询操作符"></a>查询操作符</h4><p>老铁($lt),干他($gt)……见<a href="https://docs.mongodb.com/manual/tutorial/query-documents/" target="_blank" rel="noopener">官方文档</a></p><p>可以传多个~</p><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">limit</span>设置显示数据的上限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> skip跳过</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#skip和limit顺反了也没关系,mongoDB会自动调整</span></span></span><br><span class="line">db.&lt;collectionName&gt;.find().skip(num).limit(num);</span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><ul><li>选中集合</li><li>右键import</li><li>选中文件</li><li>填写相关信息</li><li>执行</li></ul><h4 id="或关系"><a href="#或关系" class="headerlink" title="或关系"></a>或关系</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$or[&#123;a:1&#125;,&#123;b:2&#125;]&#125;</span><br></pre></td></tr></table></figure><h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在原来值的基础上自增(update相关方法的参数)</span></span><br><span class="line">&#123;$inc:&#123;sal:300&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="文档间的关系"><a href="#文档间的关系" class="headerlink" title="文档间的关系"></a>文档间的关系</h3><ul><li>一对一(one to one)</li><li>一对多(one to many)/多对一(many to one)</li><li>多对多(many to many)</li></ul><h3 id="sort和投影"><a href="#sort和投影" class="headerlink" title="sort和投影"></a>sort和投影</h3><p>MongoDB查询默认是按照<code>_id</code>的值升序排列的(创建时间)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">sort() 可以用来指定文档的排序规则</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#参数:必须传递一个对象(或多个)来指定排序规则,优先级从左向右</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#&#123;sal:1&#125;按什么列排序1表示升,-1表示降</span></span></span><br><span class="line">db.&lt;collectionName&gt;.find(...).sort(参数)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在查询时,可以在第二个参数的位置来设置查询结果的投影</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#&#123;ename:1&#125;显示ename1为显示,不显示的可以不写</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#id默认显示,不显示id可以用_id:0来消除</span></span></span><br><span class="line">db.&lt;collectionName&gt;.find(查询条件,&#123;投影&#125;)</span><br></pre></td></tr></table></figure><h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h3><p>Mongoose就是一个让我们通过Node来操作MongoDB的模块.</p><p>Mongoose是一个对象文档模型(ODM)库,他对Node原生的MongoDB模块进行了进一步的优化分装,并提供了更多的功能.</p><p>大多数情况下,他被用来把结构化的模式应用到一个MongoDB集合,并提供了验证和类型转换等好处.</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处:"></a>好处:</h4><ul><li><p>可以为文档创建一个模式结构(Schema)</p><blockquote><p>什么是模式结构(Schema)</p><p>就是约束:由于MongoDB没有任何约束,所以需要外在的约束使数据标准化,再存入前进行数据验证.</p><ul><li>字段</li><li>字段类型</li></ul></blockquote></li><li><p>可以对模型中的对象/文档进行验证</p></li><li><p>数据可以通过类型转换转换为对象模型</p></li><li><p>可以使用中间件来应用业务逻辑挂钩</p></li><li><p>比Node原生的MongoDB驱动更容易(我用Java…)</p></li></ul><h4 id="新的对象"><a href="#新的对象" class="headerlink" title="新的对象"></a>新的对象</h4><ul><li><p>mongoose中提供了几个新的对象:</p><ul><li><p>Schema(模式对象)</p><p>Schema对象定义约束了数据库文档结构</p></li><li><p>Model</p><p>Model对象作为集合中的所有文档的表示,相当于MongoDB数据库中的集合collection</p></li><li><p>Document</p><p>Document表示集合中的具体文档,相当于集合中的一个具体的文档.</p></li></ul><blockquote><p><strong>注:</strong>创建是有顺序的先是Schema,然后是Model,最后是Document.</p></blockquote></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><p>第一步:下载安装mongoose</p></li><li><p>在项目中引入</p></li><li><p>连接MongDB数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(....);</span><br></pre></td></tr></table></figure></li><li><p>断开数据库连接(一般不需要调用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.disconnect();</span><br></pre></td></tr></table></figure></li><li><p>建听连接状态</p><p>在mongoose对象中有一个属性叫做connection,该对象表示的是数据库连接,用过监视该对象的状态,可以来监听数据库的连接于断开</p><ul><li><p>数据库连接成功事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connction.once(&quot;open&quot;,function()&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数据库断开的事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connection.once(&quot;close&quot;,function()&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Schema和Model"><a href="#Schema和Model" class="headerlink" title="Schema和Model"></a>Schema和Model</h4><h5 id="定义Schema"><a href="#定义Schema" class="headerlink" title="定义Schema"></a>定义Schema</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//将mongoose.Schema 赋值给一个变量</span></span><br><span class="line">  <span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="comment">//创建Schema(模式)对象</span></span><br><span class="line">  <span class="keyword">var</span> blogSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    title:  <span class="built_in">String</span>,</span><br><span class="line">    author: <span class="built_in">String</span>,</span><br><span class="line">    body:   <span class="built_in">String</span>,</span><br><span class="line">    comments: [&#123; <span class="attr">body</span>: <span class="built_in">String</span>, <span class="attr">date</span>: <span class="built_in">Date</span> &#125;],</span><br><span class="line">    date: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">    hidden: <span class="built_in">Boolean</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      votes: <span class="built_in">Number</span>,</span><br><span class="line">      favs:  <span class="built_in">Number</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h5 id="通过Schema创建Model"><a href="#通过Schema创建Model" class="headerlink" title="通过Schema创建Model"></a>通过Schema创建Model</h5><p>Model代表的是数据库中的集合,通过Model才能对数据库进行操作.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//model代码内的构造</span></span><br><span class="line"><span class="comment">//modelName要映射的集合名</span></span><br><span class="line"><span class="comment">//mongoose会自动将Name变为负数</span></span><br><span class="line"><span class="comment">//schema创建的schema</span></span><br><span class="line"><span class="keyword">var</span> model = mongoose.model(modelName,schema);</span><br></pre></td></tr></table></figure><h5 id="向数据库中插入一个文档"><a href="#向数据库中插入一个文档" class="headerlink" title="向数据库中插入一个文档"></a>向数据库中插入一个文档</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.create(doc,<span class="function"><span class="keyword">function</span>);</span></span><br></pre></td></tr></table></figure><h4 id="Model的方法"><a href="#Model的方法" class="headerlink" title="Model的方法"></a>Model的方法</h4><p>有了model我们就可以对数据库进行增删改查的操作了</p><p>model创建的对象就是文档(doucument)</p><h5 id="Model-create-doc-s-callback"><a href="#Model-create-doc-s-callback" class="headerlink" title="Model.create(doc(s), [callback])"></a>Model.create(doc(s), [callback])</h5><ul><li>用来创建一个或多个文档并添加到数据库</li><li>参数:<ul><li><code>doc(s)</code>    可以是一个文档对象,也可以是一个文档对象数组</li><li><code>callback</code> 当操作完成以后调用的回调函数<ul><li><code>err</code>  error实例,可作为function参数</li><li><code>arguments</code>  文档实例,本次插入的部分</li></ul></li></ul></li></ul><h5 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h5><ul><li><p><code>Model.find(conditions,[projection],[options],[callback])</code></p><p>查询所有符合条件的文档,总会返回一个数组</p></li><li><p><code>Model.findById(id,[projection],[options],[callback])</code></p><p>根据文档 的id属性查询文档 </p></li><li><p><code>Model.findOne([conditions],[projection],[option],[callback])</code></p><p>查询符合条件的第一个文档,总会返回一个具体的对象</p></li></ul><ul><li><ul><li><p>选项</p><p><code>conditions</code>    查询的条件</p><p><code>projection</code>    投影(要什么写什么,不要加个<code>-</code>)</p><p><code>options</code>          查询选项(skip limit)</p><p><code>callbacks</code>      回调函数,查询结果会通过回调函数返回(<strong>回调函数必传</strong>)</p><ul><li><code>err</code>    error实例</li><li><code>docs</code>  查询结果的数组</li></ul></li></ul></li></ul><h5 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h5><ul><li><p><code>Model.update(conditions,doc,[options],[callback])</code></p></li><li><p><code>Model.updateMany(conditions,doc,[options],[callback])</code></p></li><li><p><code>Model.updateOne(conditions,doc,[options],[callback])</code></p><p>用于修改一个或多个文档</p></li></ul><ul><li>参数:<ul><li><code>conditions</code>    查询条件</li><li><code>doc</code>                   修改后的对象</li><li><code>options</code>           配置参数</li><li><code>callback</code>         回调函数</li></ul></li></ul><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><ul><li><code>remove(condition,[callback])</code></li><li><code>deleteOne(condition,[callback])</code></li><li><code>deleteMany(condition,[callback])</code></li></ul><h4 id="Document的方法"><a href="#Document的方法" class="headerlink" title="Document的方法"></a>Document的方法</h4><p>通过Model查询到的结果都是document</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> StuModel(&#123;</span><br><span class="line">name:<span class="string">"八戒"</span>,</span><br><span class="line">age:<span class="number">40</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p><code>save([options],[options.safe],[options.balidateBeforeSave],[fn])</code></p><h5 id="修改-2"><a href="#修改-2" class="headerlink" title="修改"></a>修改</h5><p><code>update(update,[options],[callback])</code></p><ul><li>修改对象</li></ul><h5 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h5><p><code>remove([callback])</code></p><ul><li>删除对象</li></ul><h5 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h5><p><code>doc.get(name)</code></p><ul><li>获取指定值</li></ul><h5 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h5><p><code>doc.set(name,value)</code></p><ul><li>设置字段为指定值,但需要调<code>save()</code>保存</li></ul><h5 id="id"><a href="#id" class="headerlink" title="id"></a>id</h5><p><code>doc.id</code></p><ul><li>获取文档id </li></ul><blockquote><p>调用转换方法转成普通的对象九不能调用相关方法了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_集群搭建</title>
      <link href="/2019/12/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/12/30/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<center>    容量不够,Redis如何进行扩容?<br>    并发写操作,redis如何分摊?</center><a id="more"></a><h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><h4 id="好处"><a href="#好处" class="headerlink" title="好处:"></a>好处:</h4><ul><li>实现扩容</li><li>分摊压力</li><li>无中心配置相对简单</li></ul><p>#### </p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><ul><li>多键操作是不被支持的</li><li>多键的Redis事务是不被支持的</li><li>lua脚本不被支持</li><li>由于集权方案出现较晚,很多公司使用了其他集群,迁移复杂.</li></ul><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="1-安装ruby环境"><a href="#1-安装ruby环境" class="headerlink" title="1.安装ruby环境"></a><strong>1.安装ruby环境</strong></h4><ul><li>执行安装命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br></pre></td></tr></table></figure><h4 id="2-拷贝redis-3-4-0-gem到-opt目录下"><a href="#2-拷贝redis-3-4-0-gem到-opt目录下" class="headerlink" title="2.拷贝redis-3.4.0.gem到/opt目录下"></a><strong>2.拷贝redis-3.4.0.gem到/opt目录下</strong></h4><h4 id="3-执行opt目录下执行-germ-install-local-redis-3-2-0-gem"><a href="#3-执行opt目录下执行-germ-install-local-redis-3-2-0-gem" class="headerlink" title="3.执行opt目录下执行 germ install-local redis-3.2.0.gem"></a><strong>3.执行opt目录下执行</strong> <code>germ install-local redis-3.2.0.gem</code></h4><blockquote><p>redis去中心化的配置至少需要六台redis服务器</p></blockquote><h4 id="4-安装redis-cluster配置修改"><a href="#4-安装redis-cluster配置修改" class="headerlink" title="4.安装redis-cluster配置修改"></a><strong>4.安装redis-cluster配置修改</strong></h4><p>相关配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cluster-enabled yes打开集群模式</span><br><span class="line">cluster-config-filenodes-6379.conf设置节点配置文件名</span><br><span class="line">cluster-node-timeout15000 设定节点失恋时间,超过改时间(毫米),集群自动进行主从切换.</span><br></pre></td></tr></table></figure><h4 id="5-将六个节点合成一个集群"><a href="#5-将六个节点合成一个集群" class="headerlink" title="5.将六个节点合成一个集群"></a><strong>5.将六个节点合成一个集群</strong></h4><ul><li><p>组合之前,确保所用的redis实例启动后,nodes-xxxx.comf文件都能正常生成.</p></li><li><p>合体</p><ul><li><p>切换到redis的src目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis-3.2.5/src</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 &lt;ip:port&gt; &lt;ip:port&gt; &lt;ip:port&gt; &lt;ip:port&gt; &lt;ip:port&gt; &lt;ip:port&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注:此处不要用127.0.0.1 ,请用真实IP地址</p></blockquote></li><li><p>连接某一台机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379</span><br></pre></td></tr></table></figure></li><li><p>查询集群信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure></li></ul><p>但是上面的启动会有一个问题:<strong>插入数据不会自动分配</strong>,如果不在对应的区间内会报错如何自动分配呢?</p><ul><li><p>连接机器(自动分配)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -p 6379</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Redis-cluster-如何分配这六个节点"><a href="#Redis-cluster-如何分配这六个节点" class="headerlink" title="Redis cluster 如何分配这六个节点?"></a><strong>Redis cluster 如何分配这六个节点?</strong></h3><ul><li>一个集群至少要有<strong>三个主节点</strong>.</li><li>选项<code>--replicas 1</code>表示我们希望为集权中的每个主节点创建一个从节点.</li><li>分配原则尽量暴增每个主数据库运行在不同的IP地址,二秘阁从库和主库不在一个IP地址上.</li></ul><h3 id="什么是slots"><a href="#什么是slots" class="headerlink" title="什么是slots?"></a>什么是slots?</h3><ul><li>一个Redis集群包括 16384 个插槽(hash slot),数据库中的每个键都属于这16384 个插槽其中的一个,集群使用公式CRC16(key)%16384来计算key属于哪个槽,其中CRC16(key)语句用于计算key的CRC(16)校验和.</li><li>集群中每个节点负责处理一部分插槽.</li></ul><h3 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值?"></a>在集群中录入值?</h3><ul><li><p>在redis-cli每次录入,查询键值,redis都会计算出该key应该送往的插槽,如果不是该客户端对应服务器的插槽,redis会报错,并报告应该前往的redis实例地址和端口.</p></li><li><p>redis-cli客户端提供了<code>-c</code>参数实现自动重定向.</p><p>如redis-cli -c -p 6379 登入后,在录入,查询键值对可以自动重定向.</p></li><li><p>不在一个slot下的键值,是不能使用mget,mset等多键操作的.</p></li><li><p>可以通过{}来定义组的概念,从而使key中{}内容相同的键值对放到一个slot中去.</p></li></ul><h3 id="查询集群中的值"><a href="#查询集群中的值" class="headerlink" title="查询集群中的值"></a>查询集群中的值</h3><ul><li><p>计算key应该被放在那个槽上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER KEYSLOT &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回槽slot目前包含的键值对数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER COUNTKEYSINSLOT &lt;slot&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回count的shot槽中的键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTER GETKEYSINSLOT &lt;slot&gt; &lt;count&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_Redis的主从复制</title>
      <link href="/2019/12/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2019/12/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<center>   如何将Redis持久化?</center><a id="more"></a><h2 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h2><h3 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制?"></a>什么是主从复制?</h3><ul><li>主从复制,就是主机数据更新后根据配置和策略,自动同步到备机的master/slaver机制,<strong>Master以写为主,Slave以度为主</strong>.</li></ul><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><ul><li>读写分离,性能扩展</li><li>容灾快速恢复</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>每次从机联通后,都会给主机发送sync指令</li><li>主机立刻进行存盘操作,发送RDB文件,给从机</li><li>从机收到RDB文件后,进行全盘加载</li><li>之久每次主机的写操作,都会立刻发送给从机,从机执行相同的命令.</li></ul><h3 id="配从-服务器-不配主-服务器"><a href="#配从-服务器-不配主-服务器" class="headerlink" title="配从(服务器)不配主(服务器)"></a>配从(服务器)不配主(服务器)</h3><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段:"></a>准备阶段:</h4><ul><li><p><strong>拷贝多个redis.conf文件include</strong></p><p>新建一个.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /path/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>开启daemonize yes</p></li><li><p><strong>Pid文件名字pidfile</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidfile /path/xxxx.pid</span><br></pre></td></tr></table></figure></li><li><p><strong>指定端口port</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure></li><li><p>Log文件名字</p></li><li><p><strong>Dump.rdb名字dbfilename</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbfilename xxxx.db</span><br></pre></td></tr></table></figure></li><li><p>Appendonly关掉或者换名字</p></li></ul><h4 id="连接"><a href="#连接" class="headerlink" title="连接:"></a>连接:</h4><ul><li><p><code>info replication</code></p><p>打印 主从复制的相关信息</p></li></ul><ul><li><p><code>slaveof &lt;ip&gt; &lt;port&gt;</code></p><p>成为某个实例的从服务器</p></li></ul><blockquote><p>相关问题:</p><p>1.从切入点开始复制,还是从头开始复制?</p><p>答:从头</p><p>2.从机是否可以写?set可否?</p><p>答:不可</p><p>3.主机shutdown后情况如何?从机 是上位还是原地待命?</p><p>答:原地待命</p><p>4.主机又回来后,主机新增记录,从机是否还能顺利复制?</p><p>答:能</p><p>5.其中一台从机down后情况如何?依照原有它能跟上大部队么?</p><p>答:自成主机</p></blockquote><h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><ul><li><p>上一个slave可以是下一个slave的Master,slave同样可以接收其他slaves的连接和同步请求,那么该slave作为了链条中下一个的master,可以有效减轻master的写压力,去中心化降低风险.</p></li><li><p>用<code>slaveof &lt;ip&gt; &lt;port&gt;</code></p></li><li><p>中图变更转向:会清除之前的数据,重新建立拷贝最新的</p></li><li><p>风险是一旦某个slave宕机,后面的slave都没法备份.</p></li></ul><h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><ul><li><p>当一个master宕机后,后面的slave可以立刻升为master,其后面的slave不用做任何修改.</p></li><li><p>用<code>slaveof no one</code> 将从机变为主机.</p></li><li><p>通过配置设置默认上位从机</p></li></ul><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><ul><li>反客为主的自动版,能够后台监控主机是否故障,如果故障了根据投票自动将从库转换为主库</li></ul><h4 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h4><ul><li><p>调整为一主二仆模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义的/myredis目录下新建sentinel.conf文件</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中填写内容:</p><p><code>sentinel monitor mymaster 127.0.0.1 6379 1</code></p><ul><li>其中mymaster为监控对象起的服务器名称,1为至少有多少个哨兵统一迁移的数量.</li></ul></li></ul><h4 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h4><ul><li>执行<code>redis-sentinel /myredis/sentinel.conf</code>.</li></ul><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p>从下线主机的所有从服务中挑选一个从服务,将其转成主服务(新主登基)</p><p><strong>选择条件:</strong></p><ul><li><p><strong>选择优先级靠前的</strong></p><p>优先级设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-priority 10</span><br></pre></td></tr></table></figure></li><li><p><strong>选择偏移量大的</strong></p><p>偏移量只获得原主数据最多的</p></li><li><p><strong>选择runid最小的从服务</strong></p><p>每个redis启动后会随机生成一个4位的runid</p></li></ul><p>挑选出新的主服务后,sentinel向原主服务的从服务发送slaveof新主服务的命令,复制新的master(群仆俯首)</p><p>当已下线的主服务从新上线时,sentienl会向其发送slaveof命令,让其成为新的从服务.(旧主俯首)</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_Redis持久化</title>
      <link href="/2019/12/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2019/12/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<center>   如何将Redis持久化?</center><a id="more"></a><h2 id="持久化Redis"><a href="#持久化Redis" class="headerlink" title="持久化Redis"></a>持久化Redis</h2><h3 id="Redis持久化的方式"><a href="#Redis持久化的方式" class="headerlink" title="Redis持久化的方式:"></a>Redis持久化的方式:</h3><h4 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h4><ul><li><p>默认开启 存在启动Redis的目录下</p></li><li><p>当<code>shutdown</code>时会持久化</p></li><li><p>在<strong>指定时间间隔内</strong>将内存中的数据集快照写入磁盘,也就是行话讲的Snapshot快照,他恢复时直接将快照恢复到内存里. </p><blockquote><p><strong>备份是如何执行的?</strong></p><ul><li>Redis会单独创建(fork)一个子进程来进行持久化,会先将数据写入到一个临时文件中,待持久化过程结束了,再用这个文件替换上次持久化好的文件.整个过程中,主进程是不进行任何IO操作的,这就确保了极高的性能,如果<strong>需要进行大规模数据恢复,且对于数据恢复的完整性不是非常敏感</strong>,那<strong>RDB方式</strong>要比AOF方式更加高效.<strong>RDB的缺点是最后一次持久化后的数据可能丢失.</strong></li></ul><p><strong>关于fork</strong></p><ul><li>在Linux程序中,fork()会产生一个和父进程完全相同的子进程,但子进程在此后多会进行exec调用,处于效率考虑,Linux中引入了”写时赋值技术”,<strong>一般情况下父进程和子进程会共用同一段物理内存</strong>,只有进程空间的各段的内容要发生变化时,才会将父进程的内容赋值一份给子进程.</li></ul></blockquote></li></ul><ul><li><p><strong>rdb的保存文件</strong></p><ul><li><p>在redis.conf中配置文件名称,<strong>默认为dump.db</strong></p><blockquote><p>dbfilename  dump.rdb</p></blockquote></li><li><p>rdb文件的保存路径,也可以修改.<strong>默认为Redis启动时命令所在的目录下</strong>.</p><blockquote><p>dir ./</p></blockquote></li></ul></li></ul><ul><li><p><strong>rdb的保存策略</strong></p><ol><li><p>900s至少内1个key发生了变化</p><blockquote><p>save 900 1</p></blockquote></li><li><p>300s至少内10个key发生了变化</p><blockquote><p>save 300 10</p></blockquote></li><li><p>60s内至少10000个key发生了变化</p><blockquote><p>save 60 10000</p></blockquote></li></ol></li></ul><ul><li><p><strong>手动保存快照</strong></p><ul><li><p>命令save :只管保存,其它不管,全部阻塞</p></li><li><p>命令bgsave:BGSAVE 命令执行之后立即返回 OK ，然后 Redis fork 出一个新子进程，原来的 Redis 进程(父进程)继续处理客户端请求，而子进程则负责将数据保存到磁盘，然后退出。</p><blockquote><p>客户端可以通过 LASTSAVE 命令查看相关信息，判断 BGSAVE 命令是否执行成功。</p><p>save vs bgsave</p><p>SAVE  保存是阻塞主进程，客户端无法连接redis，等SAVE完成后，主进程才开始工作，客户端可以连接</p><p>BGSAVE  是fork一个save的子进程，在执行save过程中，不影响主进程，客户端可以正常链接redis，等子进程fork执行save完成后，通知主进程，子进程关闭。很明显BGSAVE方式比较适合线上的维护操作，两种方式的使用一定要了解清楚在谨慎选择。</p></blockquote></li></ul></li></ul><ul><li><p><strong>配置文件中的其他属性</strong></p><ul><li><p><code>stop-writes-on-bgsave-error yes</code></p><p>当Redis无法写入磁盘的话,直接关掉redis的写操作.</p></li><li><p><code>rdbcompression yes</code></p><p>进行rdb保存时,将文件压缩</p></li><li><p><code>rdbchecksum yes</code></p><p>在存储快照后,还可以让redis使用CRC64算法来进行数据校验,但是这样做会增加大约10%的性能消耗,如果希望获取到最大性能提升,可以关闭此功能.</p></li></ul></li></ul><ul><li><strong>rdb的备份</strong><ul><li>先通过<code>config get dir</code> 查询rdb文件的目录</li><li>将*.rdb的文件拷贝到别的地方</li></ul></li></ul><ul><li><strong>rdb的恢复</strong><ul><li>关闭Redis</li><li>先把备份的文件拷贝到工作目录下</li><li>启动Redis,备份数据会直接加载</li></ul></li></ul><ul><li><strong>RDB的优点</strong><ul><li>节省空间</li><li>恢复速度快</li></ul></li></ul><ul><li><strong>RDB的缺点</strong><ul><li>虽然使用了写时拷贝技术,但是如果数据庞大还是比较消耗性能的.</li><li>在备份周期间意外down掉会丢失最后一次快照的所有修改.</li></ul></li></ul><h4 id="AOF-Append-Of-File"><a href="#AOF-Append-Of-File" class="headerlink" title="AOF(Append Of File)"></a>AOF(Append Of File)</h4><ul><li><strong>以日志的形式来记录每个写操作</strong>,将Redis执行过的所有指令记录下来(读操作不记录),只需追加文件但不可以改写文件,Redis启动之初会读取该文件重构数据,换而言之,Redis重启的话就根据日志文件的内容将写指令从前到后执行一次已完成数据的恢复工作.</li></ul><ul><li><p><strong>AOF默认不开启,需要手动在配置文件中配置</strong></p><blockquote><p>appendonly no</p></blockquote></li></ul><ul><li><p><strong>AOF的保存</strong></p><p>可以在redis.conf中配置文件名称,默认为appendonly.aof</p><blockquote><p>appendfilename “appendonly.aof”</p></blockquote><p>AOF文件的保存路径,同RDB的路径一致.</p><blockquote><p>修改完配置以后要重新启动服务</p></blockquote></li></ul><ul><li><strong>AOF文件故障备份</strong><ul><li>AOF的备份机制和性能虽然和RDB不同,但是备份和恢复的操作同RDB一样,都是拷贝文件,需要恢复时再拷贝到Redis工作目录下,启动系统即加载.</li><li>AOF和RDB同时开启,系统默认取AOF的数据****</li></ul></li></ul><ul><li><strong>AOF文件故障恢复</strong><ul><li>如果遇到AOF文件损坏,可通过redis-check-aof –fix appendonly.aof 进行恢复</li></ul></li></ul><ul><li><strong>AOF同步频率设置</strong><ul><li>始终同步,每次Redis的写入都会立刻记入日志</li><li>每秒同步,每一秒记入日志一次,如果宕机,本秒的数据可能丢失</li><li>不主动进行同步,把同步时机交给操作系统.</li></ul></li></ul><ul><li><p><strong>Rewrite</strong></p><ul><li>AOF采用文件追加方式,文件会越来越大,为了避免出现这种情况,新增了重写机制,当AOF文件的大小超过所设定的阈值时,Redis就会启动AOF文件的内容压缩,只保留可以恢复数据的最小指令.可以使用命令:<code>bgrewriteaof</code>.</li></ul></li></ul><ul><li><p>Redis如何实现重写?</p><p>AOF文件持续增长而过大时,会fork出一条新的进程来将文件重写(也是先写临时文件最后再rename),遍历新进程的内存中数据,每条记录有一条Set语句.    重写aof文件的操作,并没有读取旧的aof文件,而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件,这点和快照有点像.</p></li></ul><ul><li><p>何时重写?</p></li><li><p>重写虽然可以节约大量磁盘空间,减少恢复时间.丹斯每次重写还是有一定的负担的,因此设定Redis要满足一定条件才会进行重写.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure></li><li><p>系统载入时或者上次重写完毕时,Redis会记录此时AOF大小,设为base_size,如果Redis的AOF当前大小&gt;=base_size+base_size*100%(默认)且当前大小&gt;=64mb(默认)的情况下,Redis会对AOF进行重写.</p></li></ul><ul><li><p><strong>AOF的优点</strong></p><ul><li><p>备份机制更稳健,丢失数据概率更低</p></li><li><p>可读的日志文本,通过操作AOF文件,可以处理误操作.</p></li></ul></li></ul><ul><li><p><strong>AOF的缺点</strong></p><ul><li>比起RDB占用更多的磁盘空间</li><li>恢复备份速度慢</li><li>每次读写都同步的话,有一定的性能压力.</li><li>存在个别bug,造成恢复不能.</li></ul></li></ul><h3 id="用哪个好"><a href="#用哪个好" class="headerlink" title="用哪个好?"></a>用哪个好?</h3><ul><li>官方推荐两个都启用.</li><li>如果对数据不敏感,可以单独用RDB.</li><li>不建议单独用AOF,因为可能会出现bug.</li><li>如果只是做纯内存缓存,可以都不用. </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_Redis事务</title>
      <link href="/2019/12/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_Redis%E4%BA%8B%E5%8A%A1/"/>
      <url>/2019/12/26/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_Redis%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<center>   没有事务的Redis中的事务</center><a id="more"></a><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><h3 id="Redis的事务定义"><a href="#Redis的事务定义" class="headerlink" title="Redis的事务定义"></a>Redis的事务定义</h3><ul><li><p>Redis事务是一个单独的隔离操作:事务中的所有命令都会序列化,按顺序执行.书屋在执行过程中,不会被其他客户端发送来的命令请求所打断.</p></li><li><p>Redis事务的主要作用就是<strong>串联多个命令防止被别的命令插队</strong>.</p></li></ul><h3 id="为什么要做事务"><a href="#为什么要做事务" class="headerlink" title="为什么要做事务"></a>为什么要做事务</h3><p>和MySQL一样防止业务中一件事的整个流程被打断.</p><blockquote><p><strong>锁机制</strong></p><p>悲观锁(Pessimistic Lock):</p><ul><li><p>一步一步执行,不够就不操作.</p></li><li><p>每次拿数据的时候都认为别人会修改,所以在每次拿数据时都会上锁,这样别人想拿就会block直到拿到锁.传统关系型数据库里边就用到了很多这种锁机制.</p></li></ul><p>乐观锁:</p><ul><li><p>同时执行,执行成功的更新版本,执行后的新值如果不够并行的其他记录执行,则不执行.</p></li><li><p>每次取数据时,都认为别人不会修改,所以不会上锁,但更新时会判断一下是否有人系修改过这个数据,可以使用版本号等机制.</p></li><li><p><strong>乐观锁适用于多读的应用类型,这样就可以提高吞吐量.Redis就是利用的这种check-and-set机制实现事务的.</strong></p></li></ul></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h4><ul><li><p>从输入Multi命令开始,输入的命令都会依次进入命令队列中,但不会执行,直至到输入Exec后,Redis会将之前的命令队列中的命令依次执行.</p><blockquote><p>Redis中的事务分为<strong>组队阶段</strong>和<strong>执行阶段</strong>,在组队阶段如果出现了错误可以通过<code>discard</code>来放弃组队.</p></blockquote><table><thead><tr><th align="center"></th><th align="center">组队阶段</th><th align="center">执行阶段</th></tr></thead><tbody><tr><td align="center">队列中某条语句出错</td><td align="center">执行时整个队列都会被取消</td><td align="center">跳过这条命令继续执行</td></tr></tbody></table></li></ul><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><ul><li>执行队列中的命令</li></ul><h4 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h4><ul><li><p>组队阶段取消事务</p><blockquote><p>会取消整个队列</p></blockquote></li></ul><h3 id="如何给Redis上锁"><a href="#如何给Redis上锁" class="headerlink" title="如何给Redis上锁?"></a>如何给Redis上锁?</h3><ul><li><p>在执行multi之前,先执行<code>watch key1 [key2]</code>,可以监视一个(或多个)key,如果在事务执行之前,这个(或这些个)被其他命令所改动,那么事务将被打断.</p><blockquote><p>可以用来预防事务执行阶段,某条语句出错的问题.</p></blockquote></li></ul><h3 id="事务的三特性"><a href="#事务的三特性" class="headerlink" title="事务的三特性"></a>事务的三特性</h3><h4 id="单独的隔离操作"><a href="#单独的隔离操作" class="headerlink" title="单独的隔离操作"></a>单独的隔离操作</h4><ul><li>食物中所有的命令都会序列化,按顺序地执行,事务在执行的过程中,不会被其他客户端发来的命令请求所打断.</li></ul><h4 id="没有隔离级别的概念"><a href="#没有隔离级别的概念" class="headerlink" title="没有隔离级别的概念"></a>没有隔离级别的概念</h4><ul><li>队列中的命令没有提交之前都不会实际被的执行,应为事务提交前任何命令都不会被实际执行,也就不存在”事务内的查询要看到事务里的更新,在事务外查询不能被看到”这个让人万分头痛的问题.</li></ul><h4 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h4><ul><li>Redis同一个事务中如果有一条命令执行失败,其后的命令仍然会被执行,没有回滚.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_Jedis</title>
      <link href="/2019/12/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_Jedis/"/>
      <url>/2019/12/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_Jedis/</url>
      
        <content type="html"><![CDATA[<center>    怎么在java中连接Redis</center><a id="more"></a><h2 id="Java中的Redis客户端Jedis"><a href="#Java中的Redis客户端Jedis" class="headerlink" title="Java中的Redis客户端Jedis"></a>Java中的Redis客户端Jedis</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>Jar包:</strong></p><ul><li>Commons-pool-1.6.jar</li><li>Jedis-2.1.0.jar</li></ul><p><strong>用windows中的eclipse连接虚拟机的Redis的注意事项:</strong></p><ul><li>禁用Linux的防火墙<ul><li>临时禁用:<code>service iptables stop</code></li><li>关闭开机自启:<code>chjconfig iptables off</code></li></ul></li><li>redis.conf中注释掉bind 127.0.0.1(61行),然后protect-mode(80行)设置为no.</li></ul><h3 id="Jedis测试连通性"><a href="#Jedis测试连通性" class="headerlink" title="Jedis测试连通性"></a>Jedis测试连通性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJedis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Jedis对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.72.128"</span>, <span class="number">6379</span>);</span><br><span class="line">        String ping = jedis.ping();</span><br><span class="line">        <span class="comment">//查看服务是否运行,打出pong表示OK</span></span><br><span class="line">        System.out.println(ping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis-API"><a href="#Jedis-API" class="headerlink" title="Jedis-API"></a>Jedis-API</h3><h4 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">for</span> (Iterator iterator = keys.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">    String key = (String) iterator.next();</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查给定key是否存在</span></span><br><span class="line">System.out.println(<span class="string">"jedis.exists====&gt;"</span>+jedis.exists(<span class="string">"k2"</span>));</span><br><span class="line"><span class="comment">//查看ke还有多少秒过期</span></span><br><span class="line">System.out.println(jedis.ttl(<span class="string">"k1"</span>));</span><br></pre></td></tr></table></figure><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取key对应的value</span></span><br><span class="line">System.out.println(jedis.get(<span class="string">"k1"</span>));</span><br><span class="line"><span class="comment">//创建/修改key-value</span></span><br><span class="line">jedis.set(<span class="string">"k4"</span>,<span class="string">"k4_Redis"</span>);</span><br><span class="line">System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line"><span class="comment">//多条插入</span></span><br><span class="line">jedis.mset(<span class="string">"str1"</span>,<span class="string">"v1"</span>,<span class="string">"str2"</span>,<span class="string">"v2"</span>,<span class="string">"str3"</span>,<span class="string">"v3"</span>);</span><br><span class="line">System.out.println(jedis.mget(<span class="string">"str1"</span>,<span class="string">"str2"</span>,<span class="string">"str3"</span>));</span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回区间(全部)元素</span></span><br><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">"mylist"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(String element : list)&#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加元素</span></span><br><span class="line">jedis.sadd(<span class="string">"orders"</span>,<span class="string">"jd001"</span>);</span><br><span class="line">jedis.sadd(<span class="string">"orders"</span>,<span class="string">"jd002"</span>);</span><br><span class="line">jedis.sadd(<span class="string">"orders"</span>,<span class="string">"jd003"</span>);</span><br><span class="line"><span class="comment">//获取集合中所有元素</span></span><br><span class="line">Set&lt;String&gt; set1 = jedis.smembers(<span class="string">"orders"</span>);</span><br><span class="line"><span class="keyword">for</span>(Iterator iterator = set1.interator();iterator.hasnext();)&#123;</span><br><span class="line">    String string = (String)iterator.next();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">jedis.srem(<span class="string">"orders"</span>,<span class="string">"jd002"</span>);</span><br></pre></td></tr></table></figure><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置值</span></span><br><span class="line">jedis.hset(<span class="string">"hash1"</span>,<span class="string">"userName"</span>,<span class="string">"lisi"</span>);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">System.out.println(jedis.hget(<span class="string">"hash1"</span>,<span class="string">"userName"</span>));</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">"telphone"</span>,<span class="string">"13810169999"</span>);</span><br><span class="line">map.put(<span class="string">"address"</span>,<span class="string">"atguigu"</span>);</span><br><span class="line">map.put(<span class="string">"email"</span>,<span class="string">"abc@163.com"</span>);</span><br><span class="line"><span class="comment">//一次设置多个值</span></span><br><span class="line">jedis.hmset(<span class="string">"hash2"</span>,map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(<span class="string">"hash2"</span>, <span class="string">"telphone"</span>,<span class="string">"email"</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加值</span></span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">60</span>d,<span class="string">"v1"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">70</span>d,<span class="string">"v2"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">80</span>d,<span class="string">"v3"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">90</span>d,<span class="string">"v4"</span>);</span><br><span class="line"><span class="comment">//获取某个范围内的值</span></span><br><span class="line">Set&lt;String&gt; s1 = jedis.zrange(<span class="string">"zset01"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (Iterator iterator = s1.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">    String string = (String) iterator.next();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记_内存区域</title>
      <link href="/2019/12/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_Java%E8%99%9A%E6%8B%9F%E6%9C%BA_%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>/2019/12/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_Java%E8%99%9A%E6%8B%9F%E6%9C%BA_%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<center>读书总结<br>总解之前看过的内存部分</center><a id="more"></a><h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>​        程序计数器(Program Counter Register)是一块较小的内存空间,可以看作是当前线程所执行的字节码的行号指示器.换句话说,就是<strong>记录了当前JVM字节码指令的地址</strong>,如果正在执行的是本地方法(Native)则为空.</p><p>​        在虚拟机的概念模型里,字节码解释器工作时就是通过改变这个这个计数器的值来选取吓一条指令.</p><p>​        由于Java虚拟机的多线程是通过轮流切换并分配处理器时间片的方式来实现的,所以任何一个时间一个处理器只能执行一个线程,为了在切换后能恢复到正确的位置,每条线程都有自己独立的程序计数器(线程私有).</p><p>​        此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域.</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><ul><li><p>线程私有</p></li><li><p>生命周期和线程相同</p><p>虚拟机栈描述的是Java方法执行的内存模型:每个方法在执行的同时都会创建一个 栈帧,用于存储:</p><ul><li><p>局部变量表</p><ul><li><p>我们常说的栈就是指虚拟机栈中的<strong>局部变量表</strong>部分</p><p>局部变量表存放了编译期可知的各种基本数据类型(boolean,byte,char,short,int,float,long,double),<strong>对象引用</strong>(reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向一条字节码指令的 地址).</p><p>其中64位长度的long和double类型占用两个局部变量空间(Slot),其余的数据类型只占用1个.局部变量表所需的内存空间在编译期间完成分配.方法运行期间不会改变局部变量表的大小.</p></li></ul></li><li><p>操作数栈</p></li><li><p>动态连接</p></li><li><p>方法出口</p></li><li><p>…..</p></li></ul><p>每一个方法从调用到执行完成的过程,就对应着一个栈帧在虚拟机栈中入栈到出栈的过程.</p></li><li><p><strong>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。</strong></p><ul><li><strong>StackOverFlowError：</strong> 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。</li><li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出 OutOfMemoryError 错误。</li></ul></li></ul><blockquote><p><strong>问:</strong>那么方法/函数如何调用？</p><p>Java 栈可用类比数据结构中栈，Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。</p><p>Java 方法有两种返回方式：</p><ol><li>return 语句。</li><li>抛出异常。</li></ol><p>不管哪种返回方式都会导致栈帧被弹出。</p></blockquote><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈和虚拟机栈所发挥的作用非常相似,他们之间的区别在于:<strong>虚拟机栈为虚拟机执行Java方法(也就是字节码)服务,而本地方法栈为虚拟机使用到的Native方法服务.</strong>在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种错误。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Java堆是所有线程共享的一块内存区域,在虚拟机启动时创建.</p><p>此区域的文艺目的就是<strong>存放实例对象</strong>,几乎所有的实例对象都在这儿分配内存.</p><blockquote><p>Java虚拟机规范中的相关描述是:所有的对象实例以及数组都要在这里分配,但随着JIT编译器的发展和逃逸分析技术的逐渐成熟,栈上分配,标量替换技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐变得不那么”绝对”了.</p></blockquote><p>Java堆是垃圾收集器管理的主要区域.因此很多时候又被称为”GC堆”.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p><p>如果在堆中没有内存完成实例分配,并且堆也无法在扩展时,会抛出<code>OutOfMenoryError</code>异常.</p><p>堆这里最容易出现的就是 OutOfMemoryError 错误，并且出现这种错误之后的表现形式还会有几种，比如：</p><ol><li><strong><code>OutOfMemoryError: GC Overhead Limit Exceeded</code></strong> ： 当JVM花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。</li><li><strong><code>java.lang.OutOfMemoryError: Java heap space</code></strong> :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发<code>java.lang.OutOfMemoryError: Java heap space</code> 错误。(和本机物理内存无关，和你配置的对内存大小有关！)</li><li>……</li></ol><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区(Method Area)与Java堆一样,是各个线程共享的内存区域,它用于存储已被虚拟机加载的类信息,常量,静态常量,即时编译器编译后的代码等数据.虽然Java虚拟机规范把方法区描述为堆得一个逻辑部分,但是它却有一个别名叫做Non-Heap(非堆),目的应该是与堆区分开来.</p><blockquote><p><strong>方法区与永久代的关系:</strong></p><p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 <strong>方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。</strong> 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p></blockquote><p><strong>常用参数</strong></p><p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize=N //方法区 (永久代) 初始大小</span><br><span class="line">-XX:MaxPermSize=N //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span><br></pre></td></tr></table></figure><p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p>下面是一些常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）</span><br><span class="line">-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小</span><br></pre></td></tr></table></figure><p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p><blockquote><p><strong>为什么要将永久代(PermGen)替换为元空间(MetaSpace)?</strong></p><ol><li><p>整个永久代有一个 JVM 本身设置固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</p><blockquote><p> 当你元空间溢出时会得到如下错误： <code>java.lang.OutOfMemoryError: MetaSpace</code></p></blockquote><p>你可以使用 <code>-XX：MaxMetaspaceSize</code> 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。<code>-XX：MetaspaceSize</code> 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p></li><li><p>元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 <code>MaxPermSize</code> 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。</p></li><li><p>在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。</p></li></ol></blockquote><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池(Runtime Constant Pool)是方法区的一部分.因此内存收到方法区内存的限制,当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。</p><p>常量池中用于存放编译期生成的各种字面量和符号引用的部分将在类加载后进入方法区的运行时常量池中存放.</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备<strong>动态性</strong>.,即运行期也可能将新的常量放入池中.</p><p><strong>JDK1.7 及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong></p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p><strong>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</strong></p><p>JDK1.4 中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><h2 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>在虚拟机中一个对象是怎么创建的(只限Java普通对象,不包括数组和Class对象)?</p><ol><li><p><strong>类加载检测</strong></p><p>虚拟机遇到一条new指令时,首先将检查这个指令的参数是否能够在常量池中定位到一个类的符号引用,并检查这个符号引用代表的类是否已经被加载,解析和初始化过.如果没有,那必须先执行相应的类的加载过程.</p></li><li><p><strong>分配内存</strong></p><p>在类加载检查通过后,接下来虚拟机将为新生对象分配内存.对象所需内存的大小在类加载完成后便可完全确定,为对象分配内存的方法相当于把一块确定大小的内存从Java堆中划分出来.<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择那种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p><blockquote><p><strong>内存的两种分配方式:</strong></p><p>选择哪种方式取决于Java堆是否规整决定,取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的.</p><ul><li><strong>指针碰撞:</strong><ul><li>适用场景:堆内存规整(即没有内存碎片的情况)下</li><li>原理:用过的内存全部整合到一边,没有用过的放在另一边,中间有一个分界值指针,只需要没用过的内存方向将该指针移动对象内存大小位置即可.</li><li>GC收集器:Serial,ParNew</li></ul></li><li><strong>空闲列表:</strong><ul><li>适用场景:堆内存不规整的情况下</li><li>原理:虚拟机会维护一个列表,该列表会记录哪些内存是可用的,在分配时找一块儿足够打的内存块来划分给对象的实例,最后更新列表记录.</li><li>GC收集器:CMS</li></ul></li></ul><p><strong>内存并发分配问题:</strong></p><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><ul><li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li><li><strong>TLAB：</strong> 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配</li></ul></blockquote></li><li><p><strong>初始化零值</strong></p><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p></li><li><p><strong>设置对象头</strong></p><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p></li><li><p><strong>执行init方法</strong></p><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p></li></ol><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>在HotSpot虚拟机中,对象在内存中存储的布局可以分为2块区域:<strong>对象头(Header),实例数据(Instance Data)和对其填充(Padding)</strong>.</p><p>HotSpot虚拟机的对象头包括<strong>两部分</strong>信息,第一部分用与存储<strong>对象自身运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等）,第二部分是<strong>类型指针</strong>,即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。</p><blockquote><p>并不是所有的虚拟机实现都必须在对象在对象数据上保留类型指针,换句话说,查找对象的元数据信息并不一定要经过对象本身.另外,如果对象是一个数组,那在对象头中还必须有一块用于记录数组长度的数据,因为虚拟机可以通过普通Java对象的元数据信息确定Java对象大小,但是从数组中的元数据缺无法确定数组大小.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_Redis的数据类型</title>
      <link href="/2019/12/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/12/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<center>    与MySQL不同,Redis中的数据是以键值对的形式存在的</center><a id="more"></a><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h3><blockquote><p>在redis中的命令语句中，命令是忽略大小写的，而key是不忽略大小写的。</p></blockquote><h4 id="首先-选择数据库"><a href="#首先-选择数据库" class="headerlink" title="首先 选择数据库"></a>首先 选择数据库</h4><ul><li>命令:<code>select 数据库编号</code></li></ul><h4 id="关于Key"><a href="#关于Key" class="headerlink" title="关于Key"></a>关于Key</h4><p><code>dbsize</code>    查看当前数据库的key的数量</p><p><code>flushdb</code>    清空当前数据库</p><p><code>flushall</code>    通杀全部库</p><p><code>expire &lt;key&gt; &lt;seconds&gt;</code>    为键值设置过期时间,单位为秒</p><p><code>ttl &lt;key&gt;</code>    查看还有多少秒过期,-1表示永不过期,-2表示已经过期</p><blockquote><p><strong>注意:</strong>redis的命令具有原子性</p></blockquote><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li><p><strong>赋值</strong></p><p>语法:<code>SET key value</code></p></li></ul><ul><li><p><strong>取值</strong></p><p>语法:<code>GET key</code></p></li></ul><ul><li><p><strong>设置/获取多个值</strong></p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MSET key value[key2 value2 key3 value3...]</span><br><span class="line">MGET key [key1 key2....]</span><br></pre></td></tr></table></figure></li><li><p><strong>取值并赋值</strong></p><p>语法:<code>GETSET key value</code></p><blockquote><p>允许key不存在,key不存在的话,取值为<code>nil</code></p></blockquote></li></ul><ul><li><p><strong>删除</strong></p><p>语法:<code>DEL key</code></p><blockquote><p>结果为受影响行数</p></blockquote></li></ul><ul><li><p><strong>数值增减</strong></p><ul><li><p>数值递增(实现指定key的值增长)</p><p>语法:<code>INCR key</code></p></li></ul></li></ul><ul><li><p>增长指定整数</p><p>语法:<code>INCERBY key increment</code></p></li></ul><ul><li><p><strong>数值递减</strong></p><ul><li><p>数值递减</p><p>语法:<code>DECR key</code></p></li></ul></li></ul><ul><li><p>减少指定整数</p><p>语法:<code>DECERBY key increment</code></p></li></ul><ul><li><p><strong>向尾部追加值</strong></p><p>APPEND的作用是向键值的末尾追加value。如果键不存在则将该键的值设置为value，即相当于 SET key value。返回值是追加后字符串的总长度。 </p><p> 语法：<code>APPEND key value</code></p></li></ul><ul><li><p><strong>获取字符串长度</strong></p><p>STRLEN命令返回键值的长度，如果键不存在则返回0。</p><p>语法：<code>STRLEN key</code></p></li></ul><blockquote><p>补充:</p><p><code>setnx &lt;key&gt; &lt;value&gt;</code>    只有在key不存在的时候设置key的值</p><p><code>incrby/decrby &lt;key&gt; &lt;步长&gt;</code>    将key中存储的数字值增减,自定义步长</p><p><code>msetnx &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt; ...</code>    同时设置一个或多个key-value对,当且仅当所有给定key都不存在.</p><p><code>getrange &lt;key&gt; &lt;起始位置&gt; &lt;结束位置&gt;</code>    获得值的范围,类似java中的substring</p><p><code>setrange &lt;key &lt;起止位置&gt; &lt;value&gt;</code>    用<code>&lt;value&gt;</code>复写<code>&lt;key&gt;</code>所存储的字符串值,从&lt;起始位置&gt;开始.</p><p><code>setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</code>    设置键值的同时,设置过期时间,单位秒.</p></blockquote><h4 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h4><p>hash叫散列类型，它提供了字段和字段值的映射。字段值只能是字符串类型，不支持散列类型、集合类型等其它类型。</p><ul><li><p><strong>赋值</strong></p><ul><li><p>一次设置一个</p><p>语法:<code>HSET key field value</code></p><blockquote><p>HSET命令不区分插入和更新操作，当执行插入操作时HSET命令返回1，当执行更新操作时返回0。</p></blockquote></li><li><p>一次设置多个</p><p>语法:<code>HMSET key field value [field value ...]</code></p></li></ul></li></ul><ul><li><p><strong>取值</strong></p><ul><li><p>一次获取一个值</p><p>语法:<code>HGET key field</code></p></li><li><p>一次获取多个值</p><p>语法:<code>HMGET key field [field ...]</code></p></li><li><p>获取所有字段值</p><p>语法:<code>HGETALL key</code></p></li></ul></li></ul><ul><li><p><strong>删除字段</strong></p><p>可以删除一个或多个字段，返回值是被删除的字段个数</p><p>语法:<code>HDEL key field [field ...]</code></p></li></ul><ul><li><p><strong>增加数字</strong></p><p>语法:<code>HINCRBY key field increment</code></p></li></ul><ul><li><h5 id="判断字段是否存在"><a href="#判断字段是否存在" class="headerlink" title="判断字段是否存在"></a>判断字段是否存在</h5><p>语法:<code>HEXISTS key field</code></p></li></ul><ul><li><p><strong>只获取字段名或字段值</strong></p><p>语法:<code>HKEYS key</code></p><p>​        <code>HVALS key</code></p></li></ul><ul><li><p><strong>获取字段数量</strong></p><p>语法:<code>HLEN key</code></p></li></ul><h4 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h4><p>​    列表类型（list）可以存储一个有序的字符串列表，常用的操作是向<strong>列表两端添加元素</strong>，或者<strong>获得列表的某一个片段</strong>。</p><p>​     <strong>列表类型内部是使用的是双向链表（double linked list</strong>），所以向列表两端添加元素的时间复杂度为0(1)，获取越接近两端的元素速度就越快。这意味着即使是一个有几千万个元素的列表，获取头部或尾部的10条记录也是极快的。</p><ul><li><p><strong>向列表两端增加元素</strong></p><ul><li><p>向列表左边增加元素</p><p><code>LPUSH key value [value ...]</code></p></li><li><p>向列表右边增加元素</p><p><code>RPUSH key value [value ...]</code></p></li></ul></li></ul><ul><li><p><strong>查看列表</strong></p><p>语法:<code>LRANGE key start stop</code></p><blockquote><p>将返回start、stop之间的所有元素（包含两端的元素），索引从0开始。索引可以是负数，如：“-1”代表最后边的一个元素。</p></blockquote></li></ul><ul><li><p><strong>从列表两端弹出元素</strong></p><ul><li><p>从左边弹出</p><p><code>LPOP key</code></p></li><li><p>从右边弹出</p><p><code>RPOP key</code></p></li></ul><blockquote><p>返回值为弹出的值</p><p>值在键在,值亡键亡</p></blockquote></li></ul><ul><li><p><strong>获取列表中元素的个数</strong></p><p>语法:<code>LLEN key</code></p></li></ul><ul><li><p><strong>删除列表指定的值</strong></p><p>语法:<code>LREM key count value</code></p><blockquote><p>LREM命令会删除列表中前count个值为value的元素，返回实际删除的元素个数。根据count值的不同，该命令的执行方式会有所不同： </p><ul><li><p>当count&gt;0时， LREM会从列表左边开始删除一个。</p></li><li><p>当count&lt;0时， LREM会从列表后边开始删除一个。</p></li><li><p>当count=0时， LREM删除所有值为value的元素。 </p></li></ul></blockquote></li></ul><ul><li><p><strong>获得指定索引的元素值</strong></p><p>语法:<code>LINDEX key index</code></p></li></ul><ul><li><p><strong>设置指定索引的元素值</strong></p><p>语法:<code>LSET key index value</code></p></li></ul><ul><li><p><strong>只保留列表指定片段</strong></p><p>语法:<code>LTRIM key start stop</code></p></li></ul><ul><li><p><strong>向列表中插入元素</strong></p><p>该命令首先会在列表中从左到右查找值为pivot的元素，然后根据第二个参数是BEFORE还是AFTER来决定将value插入到该元素的前面还是后面.</p><p>语法:<code>LINSERT key BEFORE|AFTER pivot value</code></p></li></ul><ul><li><p><strong>将元素从一个列表转移到另一个列表中</strong></p><p>语法：<code>RPOPLPUSH source destination</code></p></li></ul><ul><li><p><strong>按照索引下标获得元素(从左向右)</strong></p><p>语法:<code>LRANGE &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code></p></li></ul><ul><li><p><strong>按照索引下标获得元素(从左向右)</strong></p><p>语法:<code>LINDEX &lt;key&gt; &lt;value&gt;</code></p></li></ul><h4 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h4><ul><li><p><strong>增加元素</strong></p><p>语法:<code>SADD key member [member1 ...]</code></p></li></ul><ul><li><p><strong>删除元素</strong></p><p>语法:<code>SREM key member [member2 ...]</code></p></li></ul><ul><li><p><strong>获取集合中的所有元素</strong></p><p>语法:<code>SMEMBERS key</code></p></li></ul><ul><li><p><strong>判断元素是否在集合中</strong></p><p>语法:<code>SISMEMBER key member</code></p></li></ul><ul><li><p><strong>运算相关</strong></p><ul><li><p>集合的差集运算A-B</p><p>(属于A并且不属于B的元素构成的集合)</p><p>语法:<code>SDIFF keyA keyB</code></p></li></ul></li></ul><ul><li><p>集合的交集运算A∩B</p><p>(属于A且属于B的元素)</p><p>语法:<code>SINTER keyA keyB</code></p></li></ul><ul><li><p>集合的并集运算A∪B</p><p>(属于A或者属于B)</p><p>语法:<code>SUNION keyA keyB</code></p></li></ul><ul><li><p><strong>获得集合中元素大的个数</strong></p><p>语法:<code>SCRAD key</code></p></li></ul><ul><li><p><strong>从集合中弹出一个元素</strong></p><p>语法:<code>SPOP key</code></p></li></ul><h4 id="SortedSet类型zset"><a href="#SortedSet类型zset" class="headerlink" title="SortedSet类型zset"></a>SortedSet类型zset</h4><p>有序的集合,相较于set而言更消耗性能</p><ul><li><p><strong>添加元素</strong></p><p>语法:<code>ZADD key score member [score member]</code></p></li></ul><ul><li><p><strong>获取元素的分数(在Redis中的顺序)</strong></p><p>语法:<code>ZSOCRE key member</code></p></li></ul><ul><li><p><strong>删除元素</strong></p><p>语法:<code>ZREM key member [member ...]</code></p><blockquote><p>移除有序集key中的一个或多个成员，不存在的成员将被忽略。</p><p>当key存在但不是有序集类型时，返回一个错误。</p></blockquote></li></ul><ul><li><p><strong>获得排名在某个范围的元素列表</strong></p><p>语法：<code>ZRANGE key start stop [WITHSCORES]</code></p><blockquote><p>按照元素分数<strong>从小到大</strong>的顺序返回索引从start到stop之间的所有元素（包含两端的元素）如果需要<strong>获得元素的分数</strong>的可以在命令尾部加上<strong><em>WITHSCORES\</em></strong>参数 </p></blockquote></li></ul><ul><li><p><strong>其它命令</strong></p><ul><li><p>获得指定分数范围的元素 </p><p>语法：<code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code></p></li></ul></li></ul><ul><li><p>增加某个元素的分数</p><p>语法：<code>ZINCRBY key increment member</code></p><blockquote><p>返回值是更改后的分数</p></blockquote></li></ul><ul><li><p>获得集合中元素的数量 </p><p>语法：<code>ZCARD key</code></p></li></ul><ul><li><p>获得指定分数范围内的元素个数 </p><p>语法：<code>ZCOUNT key min max</code></p></li></ul><ul><li><p>按照排名范围删除元素 </p><p>语法：<code>ZREMRANGEBYRANK key start stop</code></p></li></ul><ul><li><p>按照分数范围删除元素 </p><p>语法：<code>ZREMRANGEBYSCORE key min max</code></p></li></ul><ul><li><p>获取元素的排名 </p><p>从小到大 语法：<code>ZRANK key member</code></p><p>从大到小 语法：<code>ZREVRANK key member</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Redis_初试Redis</title>
      <link href="/2019/12/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E5%88%9D%E8%AF%95redis/"/>
      <url>/2019/12/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Redis_%E5%88%9D%E8%AF%95redis/</url>
      
        <content type="html"><![CDATA[<center>    面试总要考<br>    学学呗</center><a id="more"></a><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>MySQL数据库,数据以<strong>“文件形式存储”</strong>在硬盘里.</p><p>整个系统中最容易出现瓶颈的地方就是数据库..</p><p><strong>如何解决?</strong></p><p>将常用的数据直接读出出来放在内存中,减少数据库的读写次数.</p><p>所以引进了<strong>Reids</strong>.</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis?"></a>什么是Redis?</h4><p>Redis是Remote Dictionary Server(远程数据服务)的缩写</p><p>对一级缓存和二级缓存的补充</p><p>是一款开源的<strong>高性能键值对(key-value)数据库</strong>.</p><p>Redis是单线程+多路IO复用技术</p><blockquote><p>多路复用是指使用一个线程来检查多个文件描述符(Socket)的就绪状态,比如调用select和poll函数,传入多个文件描述符,如过有一个文件描述符就绪,则返回,否则阻塞直到超时.得到就绪状态后进行真正的操作可以在同一个线程里执行,也可以启动线程执行</p><p><strong>串行 VS 多线程+锁(memcached) VS 单线程 + 多路IO复用(Redis)</strong></p><p><strong>串行</strong>:一个厨子,一支锅,给一排人做饭,一个一个做</p><p><strong>多线程+锁</strong>:每人给配一个厨子,但是锅只有一支,其中一个人做,其他人就得等着.</p><p><strong>单线程+多路IO复用</strong>:一个厨子一支锅,但是吃了药,效率贼高.</p></blockquote><p><strong>数据模型</strong>为key-value模型</p><p>支持丰富的数据结构(类型):</p><ul><li><strong>字符串类型</strong></li><li><strong>散列类型</strong></li><li><strong>列表类型</strong></li><li><strong>集合类型</strong></li><li><strong>有序集合类型</strong></li></ul><p>可<strong>持久化</strong>,保证数据安全.</p><h4 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h4><ul><li><p>缓存（数据查询、短连接、新闻内容、商品内容等等）。（<strong>最多使用</strong>）</p></li><li><p>分布式集群架构中的session分离。</p></li><li><p>聊天室的在线好友列表。</p></li><li><p>任务队列。（秒杀、抢购、12306等等）</p></li><li><p>应用排行榜。</p></li><li><p>网站访问统计。</p></li><li><p>数据过期处理（可以精确到毫秒）</p></li></ul><h4 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL?"></a>什么是NoSQL?</h4><p>NoSQL(No Only SQL),意为”不仅仅是SQL”,泛指非关系型数据库.</p><p>不依赖业务逻辑方式存储,而是key-value模式存储,且大大增加了扩展能力.</p><ul><li>不遵循SQL标准</li><li>不支持ACID(原子性,一致性,隔离性,持久性)</li><li>远超于SQL的性能</li></ul><p>为了解决高并发、高可扩展、高可用、大数据存储问题而产生的数据库解决方案，就是NoSQL数据库。</p><p>它可以作为关系型数据库的良好补充。</p><h4 id="NoSQL的适用场景"><a href="#NoSQL的适用场景" class="headerlink" title="NoSQL的适用场景:"></a>NoSQL的适用场景:</h4><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li><li><strong>用不着sql的和用了sql也不行的情况,可以考虑用NoSQL</strong></li></ul><h4 id="NoSQL不适用的场景"><a href="#NoSQL不适用的场景" class="headerlink" title="NoSQL不适用的场景:"></a>NoSQL不适用的场景:</h4><ul><li>需要事务支持</li><li>基于sql的结构化查询存储,处理复杂的关系,需要即席查询.</li></ul><h4 id="NoSQL数据库分类"><a href="#NoSQL数据库分类" class="headerlink" title="NoSQL数据库分类:"></a>NoSQL数据库分类:</h4><ul><li><p><strong>键值(Key-Value)存储数据库</strong></p><ul><li><p>相关产品： Tokyo Cabinet/Tyrant、<strong>Redis</strong>、Voldemort、Berkeley DB</p></li><li><p>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。</p></li><li><p>数据模型： 一系列键值对</p></li><li><p>优势： 快速查询</p></li><li><p>劣势： 存储的数据缺少结构化</p></li></ul></li></ul><ul><li>列存储数据库<ul><li>相关产品：Cassandra, <strong>HBase</strong>, Riak</li><li>典型应用：分布式的文件系统</li><li>数据模型：以列簇式存储，将同一列数据存在一起</li><li>优势：查找速度快，可扩展性强，更容易进行分布式扩展</li><li>劣势：功能相对局限</li></ul></li></ul><ul><li><p>文档型数据库</p><ul><li><p>相关产品：CouchDB、<strong>MongoDB</strong></p></li><li><p>典型应用：Web应用（与Key-Value类似，Value是结构化的）</p></li><li><p>数据模型： 一系列键值对</p></li><li><p>优势：数据结构要求不严格</p></li><li><p>劣势： 查询性能不高，而且缺乏统一的查询语法</p></li></ul></li></ul><ul><li><p>图形(Graph)数据库</p><ul><li><p>相关数据库：Neo4J、InfoGrid、Infinite Graph</p></li><li><p>典型应用：社交网络</p></li><li><p>数据模型：图结构</p></li><li><p>优势：利用图结构相关算法。</p></li><li><p>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p></li></ul></li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>有两种类型:</p><ul><li>数据缓存</li><li>页面缓存(smarty)</li></ul><h3 id="Redis安装配置"><a href="#Redis安装配置" class="headerlink" title="Redis安装配置"></a>Redis安装配置</h3><h4 id="Redis下载"><a href="#Redis下载" class="headerlink" title="Redis下载"></a>Redis下载</h4><p>官网地址：<a href="http://redis.io/" target="_blank" rel="noopener">http://redis.io/</a></p><p>linux安装指令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.0.0.tar.gz</span><br></pre></td></tr></table></figure><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><ol><li><p>在VMware中安装CentOS</p></li><li><p>在Linux下安装gcc环境(该步骤可以省略.CentOS中默认自带C环境)</p><blockquote><p>如果没有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># yum install gcc-c++</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可以通过<code>rpm -qa | grep gcc</code>来查询是否已经安装了gcc.</p></blockquote></li><li><p>将Redis源码包上传至Linux服务器(linux直接下载忽略这一步)</p></li><li><p>解压缩Redis源码包<code>tar -zxf [filename]</code>.</p></li><li><p>在redis目录下编译Redis源码<code>make</code></p></li><li><p>安装Redis<code>make install PREFIX=/home/software/redis</code></p></li></ol><h4 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h4><ul><li><p><strong>前端启动</strong></p><p>启动方式:</p><p>直接运行bin/redis-server将以前端模式启动.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server</span><br></pre></td></tr></table></figure><ul><li><p>启动缺点：</p><p>ssh命令窗口关闭则redis-server程序结束，<strong>不推荐使用此方法</strong></p></li><li><p>关闭方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+C</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>后端启动</strong></p><ol><li><p>将redis源码包中的redis.conf配置文件复制到/usr/local/redis/bin/下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf /usr/local/redis/bin/</span><br></pre></td></tr></table></figure></li><li><p>修改redis.conf,将daemonize由no改为<strong>yes</strong></p></li><li><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>后端启动的关闭方式</p><ul><li><p>非正常关闭(不推荐)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill 5528</span><br></pre></td></tr></table></figure></li><li><p>正常关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h3><h4 id="Redis自带的客户端"><a href="#Redis自带的客户端" class="headerlink" title="Redis自带的客户端"></a>Redis自带的客户端</h4><p>  启动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure><blockquote><p>-h：redis服务器的ip地址    默认:127.0.0.1</p><p>-p：redis实例的端口号        默认:6379</p></blockquote><p>  不指定主机和端口也可以</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><p>  退出<code>exit</code></p><blockquote><p><strong>注意:</strong>如果桌面软件连接linux的Redis服务器失败,原因是服务器防火墙没有关闭,在linux中关闭即可.</p></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h3><p><strong>技术分类:</strong></p><ul><li>解决功能性问题:Java,Jsp,RDBMS,Tomcat,HTML,Linux,Jdbc,SVN</li><li>解决扩展性功能:各种框架</li><li>解决性能问题:NoSQL,Java线程,Hadoop,Nginx,MQ,ElasticSearch</li></ul><p><strong>如何解决IO压力?</strong></p><p>使用缓存数据库(Cache):减少io的读操作</p><p>一个MySQL表大概可以存储500W条数据.当数据量过大时就需要切表:</p><ul><li><p>水平切分</p></li><li><p>垂直切分</p></li><li><p>读写分离</p></li></ul><p>但是这样会破坏一定的业务逻辑,如何在不破坏的情况下解决这个问题呢?</p><p>使用非关系型数据库:</p><ul><li>列式数据库</li><li>文档数据库</li></ul><p>这种 数据库打破了传统关系型数据库以业务逻辑为依据的存储模式,改为以性能优先的存储方式..</p><p><strong>行式存储和列式存储的区别:</strong></p><p><strong>行式存储:</strong>    查询快统计慢     MySQL,关系型数据库都是行式存储的.    </p><p><strong>列式存储:</strong>    查询慢统计快</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap(JDK1.8)源码学习</title>
      <link href="/2019/11/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<center>    HashMap学习笔记........</center><a id="more"></a><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>用于存放<strong>键值对</strong></p></li><li><p>基于<strong>哈希表</strong>的<strong>Map接口</strong>实现</p></li><li><p>不支持数据保存的顺序</p></li><li><p>非线程安全</p></li></ul><p>JDK1.8之前底层为<strong>链表散列</strong>,1.8之后将当 链表长度大于阈值（默认为 8）时，将链表转化为红黑树 .</p><p>( 将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间 )</p><blockquote><p>Q:什么是链表散列?</p><p>链表散列为一种<strong>数组</strong>+<strong>链表</strong>的结构.</p><p>Q:为什么用链表散列?</p><p>为了解决<strong>哈希冲突</strong></p><p>Q:什么是哈希冲突?</p><p>哈希算法的目的就是<strong>努力的把比较大的数据存放到相对较小的空间中.</strong></p><p>为了实现这个目的就需要将数据通过计算将其放在一个有限的区间内,比如将1–10000通过计算放在1–100这个区间.</p><p>这样就会重复(计算后两个数值一样)这就形成了哈希冲突</p><p>Q:怎么解决?</p><p>将重复的数据,经过哈希处理后,以链表的形式放入对应的链表中.(拉链法)</p></blockquote><h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><p><strong>散列链表</strong></p><blockquote><p><strong>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 n 指的是数组的长度），</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">&gt;     <span class="keyword">int</span> h;</span><br><span class="line">&gt;     <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">&gt;     <span class="comment">// ^ ：按位异或</span></span><br><span class="line">&gt;     <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">&gt;     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</strong></p><p><strong>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。</strong></p><p>引用自–<strong><a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">JavaGuide</a></strong></p></blockquote><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 序列号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;    </span><br><span class="line">    <span class="comment">// 默认的初始容量是16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;   </span><br><span class="line">    <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>; </span><br><span class="line">    <span class="comment">// 默认的填充因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数大于这个值时会转成红黑树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; </span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数小于这个值时树转链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 桶中结构转化为红黑树对应的table的最小大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// 存储元素的数组，总是2的幂次倍</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;k,v&gt;[] table; </span><br><span class="line">    <span class="comment">// 存放具体元素的集</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;map.entry&lt;k,v&gt;&gt; entrySet;</span><br><span class="line">    <span class="comment">// 存放元素的个数，注意这个不等于数组的长度。</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">// 每次扩容和更改map结构的计数器</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;   </span><br><span class="line">    <span class="comment">// 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line">    <span class="comment">// 加载因子</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Q:</strong>为什么加载因子为0.75?</p><p><strong>A:</strong> 加载因子设置为0.75而不是1，是因为设置过大，桶中键值对碰撞的几率就会越大，同一个桶位置可能会存放好几个value值，这样就会增加搜索的时间，性能下降，设置过小也不合适 </p><p><strong>Q:</strong>为什么hashMap的大小是2的n次?</p><p><strong>A:</strong> HashMap为了存取高效，要尽量较少碰撞，就是要尽量把数据分配均匀，每个链表长度大致相同，这个实现就在把数据存到哪个链表中的算法；<br>这个算法实际就是取模，hash%length，计算机中直接求余效率不如位移运算，源码中做了优化hash&amp;(length-1)，<br>hash%length==hash&amp;(length-1)的前提是length是2的n次方；</p><p><strong>Q:</strong>为什么这样能均匀分布减少碰撞呢？</p><p><strong>A:</strong>2的n次方实际就是1后面n个0，2的n次方-1 实际就是n个1； </p><p><strong>Q:</strong>threshold的计算公式</p><p><strong>A:</strong> threshold = loadFactor * capacity </p></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashMap提供了四个构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all   other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含另一个“Map”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);<span class="comment">//下面会分析到这个方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注 :这里的initialCapacity为数组table的大小，即bucket的个数。</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> + loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//putMapEntries方法</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="comment">// 未初始化，s为m的实际元素个数</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="comment">// 计算得到的t大于阈值，则初始化阈值</span></span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 将m中的所有元素添加至HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashMap只提供了put方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//putVal只提供给put方法使用,不给用户使用</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 桶中已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等，即key不相等；为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get方法"><a href="#Get方法" class="headerlink" title="Get方法"></a>Get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 数组元素相等</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 桶中不止一个节点</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 在树中get</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 在链表中get</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩容会伴随着,一次重新hash分配,还会遍历Hash表中的所有元素,非常耗时,编写程序要尽量避免.</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算新的resize上限</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ? (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; </span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记_class拆解</title>
      <link href="/2019/11/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_java%E8%99%9A%E6%8B%9F%E6%9C%BA_%E7%B1%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2019/11/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_java%E8%99%9A%E6%8B%9F%E6%9C%BA_%E7%B1%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<center>读书总结<br>看到了class的拆解部分,真的是又细又杂<br>笔记备忘</center><a id="more"></a><h2 id="Class内部结构"><a href="#Class内部结构" class="headerlink" title="Class内部结构"></a>Class内部结构</h2><p><strong>写在前面:</strong></p><p>​    JVM的趋势–语言无关性</p><p>​    实现无关性的基础:<strong>虚拟机</strong>和<strong>字节码储存格式</strong></p><h3 id="Class文件结构"><a href="#Class文件结构" class="headerlink" title="Class文件结构"></a>Class文件结构</h3><p>​    任何一个Class文件都对应着唯一一个类接口的定义信息,但类或接口并不一定都得定义在文件里(有些类或接口也可以通过类加载器直接生成)</p><p>​    Class文件是一组以8位字节为基础的2进制流,各个数据项目严格按照顺序紧凑的排列在Class文件之中,<strong>中间没有添加任何分隔符</strong>,从而使得整个Class文件中存储的内容几乎全是程序运行时的必要数据,没有空隙存在.<strong>当遇到需要占用8位以上空间的数据项时,则会按照高位在前的方式分隔成若干个8位字节进行存储.</strong></p><p><strong>Class文件格式:</strong></p><ul><li><p>采用了一种类似于C语言结构体的伪结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic; <span class="comment">//Class 文件的标志</span></span><br><span class="line">    u2             minor_version;<span class="comment">//Class 的小版本号</span></span><br><span class="line">    u2             major_version;<span class="comment">//Class 的大版本号</span></span><br><span class="line">    u2             constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">    cp_info        constant_pool[constant_pool_count<span class="number">-1</span>];<span class="comment">//常量池</span></span><br><span class="line">    u2             access_flags;<span class="comment">//Class 的访问标记</span></span><br><span class="line">    u2             this_class;<span class="comment">//当前类</span></span><br><span class="line">    u2             super_class;<span class="comment">//父类</span></span><br><span class="line">    u2             interfaces_count;<span class="comment">//接口</span></span><br><span class="line">    u2             interfaces[interfaces_count];<span class="comment">//一个类可以实现多个接口</span></span><br><span class="line">    u2             fields_count;<span class="comment">//Class 文件的字段属性</span></span><br><span class="line">    field_info     fields[fields_count];<span class="comment">//一个类会可以有个字段</span></span><br><span class="line">    u2             methods_count;<span class="comment">//Class 文件的方法数量</span></span><br><span class="line">    method_info    methods[methods_count];<span class="comment">//一个类可以有个多个方法</span></span><br><span class="line">    u2             attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">    attribute_info attributes[attributes_count];<span class="comment">//属性表集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>只有两种数据类型:<strong>无符号数</strong>和<strong>表</strong></p><blockquote><p><strong>无符号数:</strong></p><ul><li><p>属于基本数据类型,以u1,u2,u4,u8来分别代表1个字节,两个字节,4个字节,8个字节的无符号数</p></li><li><p>可以用来描述数字,索引引用,数量值或者按照 UTF-8编码构成的字符串值.</p></li></ul><p><strong>表:</strong></p><ul><li>由上面代码中的字段构成.</li></ul><p><strong>注:</strong>无论是无符号数还是表,当需要描述同类型但数量不定的多个数据时,经常会使用一个前置的<strong>容量计数器</strong>加<strong>若干个连续的数据项</strong>的形式,这时称这一系列连续的莫某一类型的数据的<strong>集合</strong></p></blockquote></li></ul><h3 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h3><p>​    每个Class文件的头4个字节称为<strong>魔数</strong>(Magic Number),唯一的作用是<strong>确定这个文件是否为一个能被虚拟机接受的Class文件</strong>.</p><h3 id="版本标记"><a href="#版本标记" class="headerlink" title="版本标记"></a>版本标记</h3><p>​    紧接着魔数的四个字节存储的是 Class 文件的版本号：第五和第六是<strong>次版本号</strong>，第七和第八是<strong>主版本号</strong>。</p><p>​    高版本的 Java 虚拟机可以执行低版本编译器生成的 Class 文件，但是低版本的 Java 虚拟机不能执行高版本编译器生成的 Class 文件。所以，我们在实际开发的时候要确保开发的的 JDK 版本和生产环境的 JDK 版本保持一致。    </p><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>​    紧接着主次版本号之后的是常量池入口,常量池可以理解为Class文件中资源仓库.</p><p>​    由于常量池中的常量数量是不固定的,所以在常量池的入口需要放置一项<strong>u2类型的数据,代表常量池容量计数器(constant_pool_count)</strong>.</p><p>​    常量池的数量是<strong>constant_pool_count-1,从1开始( 常量池计数器是从1开始计数的，将第0项常量空出来是有特殊考虑的，索引值为0代表“不引用任何一个常量池项)</strong>.</p><p>​    常量池主要 存放两大常量:<strong>字面量</strong>和<strong>符号引用</strong></p><blockquote><p><strong>字面量:</strong>比较接近于Java语言层面的常量,如文本字符串,声明为final的常量值等.</p><p><strong>引用类型则包含:</strong></p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul></blockquote><blockquote><p>注:Java代码在编译时并不像C,C++有”连接”这一步骤,而是在虚拟机加载Class文件的时候进行的动态连接</p></blockquote><p>常量池中每一项常量都是一个表，这14种表有一个共同的特点：<strong>开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型．</strong>除此之外每个常量类型均有自己的结构.</p><table><thead><tr><th>类型</th><th>标志（tag）</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>UTF-8编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整形字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>５</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>６</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>７</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>８</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>９</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>字段或方法的符号引用</td></tr><tr><td>CONSTANT_MothodType_info</td><td>16</td><td>标志方法类型</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>表示一个动态方法调用点</td></tr></tbody></table><p><code>.class</code> 文件可以通过<code>javap -v class类名</code> 指令来看一下其常量池中的信息</p><p> (<code>javap -v class类名-&gt; temp.txt</code> ：将结果输出到 temp.txt 文件)</p><blockquote><p><strong>Q:</strong>为什么Java程序中定义了超过64KB英文字符的变量就无法编译?</p><p><strong>A:</strong>CONSTANT_Utf8_info型常量的结构如表</p><table><thead><tr><th align="center">类型</th><th align="center">名称</th><th align="center">数量</th></tr></thead><tbody><tr><td align="center">u1</td><td align="center">tag</td><td align="center">1</td></tr><tr><td align="center">u2</td><td align="center">length</td><td align="center">1</td></tr><tr><td align="center">u1</td><td align="center">bytes</td><td align="center">length</td></tr></tbody></table><p>由于Class文件中方法,字段等都需要引用CONSTANT_Utf8_info型常量来描述名称,所以CONSTANT_Utf8_info型常量最大长度也就是Java中方法,字段名的最大长度.而这里的最大长度就是length的最大值,既u2类型能表达的最大值65535.</p></blockquote><p>​    </p><h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><p> 在常量池结束之后，紧接着的两个字节代表<strong>访问标志(access_flags)</strong>，这个标志<strong>用于识别一些类或者接口层次的访问信息</strong>，包括：</p><ul><li>这个 Class 是类还是接口</li><li>是否为 public 或者 abstract 类型</li><li>如果是类的话是否声明为 final</li><li>等等 </li></ul><table><thead><tr><th align="center">标志名称</th><th align="center">标志值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ACC_PUBLIC</td><td align="center">0x0001</td><td align="center">是否为public类型</td></tr><tr><td align="center">ACC_FINAL</td><td align="center">0x0010</td><td align="center">是否被声明为final,只有类可设置</td></tr><tr><td align="center">ACC_SUPER</td><td align="center">0x0020</td><td align="center">是否允许使用invokespecial字节码的新语意,invokespecial指令的语意在JDK1.0.2发生过改变,为了区别这条指令使用的是哪种语义,JDK1.0.2之后编译出来的类的这个标志都必须为真</td></tr><tr><td align="center">ACC_INTERFACE</td><td align="center">0x0200</td><td align="center">标识这是一个接口</td></tr><tr><td align="center">ACC_ABSTRACT</td><td align="center">0x0400</td><td align="center">是否为abstract类型,对于接口或者抽象类来说,此标志值为真,其他类值为假</td></tr><tr><td align="center">ACC_SYNTHETIC</td><td align="center">0x1000</td><td align="center">标识这个类并非有用户代码产生的</td></tr><tr><td align="center">ACC_ANNOTATION</td><td align="center">0x2000</td><td align="center">标识这是一个注解</td></tr><tr><td align="center">ACC_ENUM</td><td align="center">0x4000</td><td align="center">标识这是一个枚举</td></tr></tbody></table><blockquote><p>access_flags中一共有16个标识位可用,当前只定义了其中8个,没有使用到的标志位一律为0.</p><p> 通过<code>javap -v class类名</code> 指令来看一下类的访问标志</p></blockquote><h3 id="类索引-父类索引与接口索引集合"><a href="#类索引-父类索引与接口索引集合" class="headerlink" title="类索引,父类索引与接口索引集合"></a>类索引,父类索引与接口索引集合</h3><p>接口类索引(this_class)和父类索引(super_class)都是一个u2类型的数据,而接口索引集合是(interface)一组u2类型的数据集合,Class文件中由这三项数据来确认这个类的继承关系.</p><blockquote><p><strong>索引的作用:</strong></p><p><strong>类索引用于确定这个类的全限定名(指向一个类型为CONSTANT_Utf8_info型常量)，父类索引用于确定这个类的父类的全限定名(指向一个类型为CONSTANT_Utf8_info型常量)，由于 Java 语言的单继承，所以父类索引只有一个，除了 <code>java.lang.Object</code>之外，所有的 java 类都有父类，因此除了 <code>java.lang.Object</code> 外，所有 Java 类的父类索引都不为 0。</strong></p><p><strong>接口索引集合(入口第一项为u2类型的接口计数器,表示索引表容量,如果没实现任何接口则为0)用来描述这个类实现了那些接口，这些被实现的接口将按<code>implents</code>(如果这个类本身是接口的话则是<code>extends</code>) 后的接口顺序从左到右排列在接口索引集合中。</strong></p></blockquote><h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p>字段表(field_info)<strong>用于描述接口或者类中声明的变量</strong>.</p><p>字段(field)包括:</p><ul><li><strong>类级变量</strong>( 又称全局级变量或静态变量，需要使用static关键字修饰。类级变量在类定义后就已经存在，占用内存空间，可以通过类名来访问，不需要实例化 )</li><li><strong>实例级变量</strong>(就是在类中定义的变量,是成员变量，实例化后才会分配内存空间，才能访问。)</li></ul><blockquote><p><strong>注意:</strong>不包含方法内部声明的局部变量</p></blockquote><p>字段信息应该包括:</p><ul><li>字段作用域(public,private,protected修饰符)</li><li>是实例变量还是类变量(static修饰符)</li><li>可变性(final)</li><li>并发可见性(volatile修饰符,是否强制从主存读写)</li><li>可否被序列化(tansient修饰符)</li><li>字段类型(基本类型,对象,数组)</li><li>字段名称</li></ul><blockquote><p> 上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型这些都是无法固定的，只能引用常量池中常量来描述。</p></blockquote><p>对应表格:</p><table><thead><tr><th align="center">标志名称</th><th align="center">标志值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ACC_PUBLIC</td><td align="center">0x0001</td><td align="center">字段是否public</td></tr><tr><td align="center">ACC_PRIVATE</td><td align="center">0x0002</td><td align="center">字段是否private</td></tr><tr><td align="center">ACC_PROTECTED</td><td align="center">0x0004</td><td align="center">字段是否protected</td></tr><tr><td align="center">ACC_STATIC</td><td align="center">0x0008</td><td align="center">字段是否static</td></tr><tr><td align="center">ACC_FINAL</td><td align="center">0x0010</td><td align="center">字段是否final</td></tr><tr><td align="center">ACC_VOLATILE</td><td align="center">0x0040</td><td align="center">字段是否volatile</td></tr><tr><td align="center">ACC_TRANSIENT</td><td align="center">0x0080</td><td align="center">字段是否transient</td></tr><tr><td align="center">ACC_SYNTHETIC</td><td align="center">0x1000</td><td align="center">字段是否由编译器自动产生</td></tr><tr><td align="center">ACC_ENUM</td><td align="center">0x4000</td><td align="center">字段是否enum</td></tr></tbody></table><blockquote><p>在实际情况中,public,private,protected三个关键字对应的标志最多只能选一个,而final和volatile不能同时选择,接口之中的字段必须有ACC_PUBLIC,ACC_STATIC,ACC_FINAL标志.</p></blockquote><p><strong>字段表结构:</strong></p><table><thead><tr><th align="center">类型</th><th align="center">名称</th><th align="center">数量</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">u2</td><td align="center">access_flags</td><td align="center">1</td><td align="center">用于记录字段信息,但不包括字段名称</td></tr><tr><td align="center">u2</td><td align="center">name_index</td><td align="center">1</td><td align="center"><strong>对常量池的引用</strong>，表示的字段的简单名称</td></tr><tr><td align="center">u2</td><td align="center">description_index</td><td align="center">1</td><td align="center"><strong>对常量池的引用</strong>，表示字段和方法的描述符</td></tr><tr><td align="center">u2</td><td align="center">attribute_count</td><td align="center">1</td><td align="center">一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数</td></tr><tr><td align="center">attribute_info</td><td align="center">attributes</td><td align="center">accributes_count</td><td align="center">存放具体属性具体内容</td></tr></tbody></table><blockquote><p>什么是全限定名?什么是简单名称?什么是描述符?</p><p><strong>全限定名</strong>是指把类全名中的<code>.</code>换成<code>/</code>后的名字,比如<code>org/tests/clazz/testClass</code>,为了使多个全限定名之间不产生混淆,一般会加入`;表示全限定名结束</p><p><strong>简单名称:</strong>是指没有类型和参数修饰符的方法或字段名称.</p><p><strong>描述符:</strong>用来描述字段的数据类型,方法的参数列表(包括数量,类型以及顺序)和返回值.</p></blockquote><p><strong>关于描述符:</strong></p><p>​        根据描述符的规则,基本数据类型以及代表无返回值的void类型都用一个大写字符来表示,而对象类型则用字符L加对象全限定名来表示.</p><p>​        其中需要注意的是<code>Long</code>类型用<code>J</code>表示,<code>boolean</code>类型为<code>z</code>,其他的均为关键词首字母大写来表示.</p><p>​        对应数组类型,唯一维度将使用一个前置的<code>[</code>字符来描述,如果定义一个<code>java.lang.String[][]</code>类型的二维数组,将被记录为:<code>[[Ljava/lang/String;</code>.</p><p>​        用描述符来描述方法时,按照<strong>先参数列表,后返回值的顺序描述,参数列表按照参数的严格顺序放在一组小括号之内</strong>.如:方法<code>int indexOf(int num,char[] target)</code>的描述符为<code>(I[C)I</code>.</p><p><strong>另外还有些值得注意的地方:</strong></p><p>​    字段表集合不会列出从超类或者父类接口中继承而来的字段,但有可能列出原本Java代码中不存在的字段.</p><p>​    在Java语言中字段是无法重载的,两个字段的数据类型,修饰符不管是否相同,都必须使用不一样的名称,但对于字节码来讲,如果两个字段的描述符不一致,那字段重名就是合法的.</p><h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><p>Class文件储存格式中对方法的描述与对字段的描述采用了几乎一样的方式.</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构:"></a>结构:</h4><p>依次为:</p><ul><li>访问标志(access_flags)</li><li>名称索引(name_index)</li><li>描述符索引(descriptor_index)</li><li>属性表集合(attributes)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method_info&#123;</span><br><span class="line">u2 access_flags;</span><br><span class="line">u2name_index;</span><br><span class="line">u2decriptor_index;</span><br><span class="line">u2attributes_count;</span><br><span class="line">attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法里的Java代码,经过编译器编译成字节码指令后,存放在方法属性表集合中的一个名为”<strong>Code</strong>“的属性里.</p></li><li><p>与字段表集合相对应,如果父类方法在子类每中没有被重写(Override),方法表集合中就不会出现来着父类的方法信息.</p></li></ul><p>access_flags取值表:</p><table><thead><tr><th align="center">标志名称</th><th align="center">标志值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ACC_PUBLIC</td><td align="center">0x0001</td><td align="center">方法是否为public</td></tr><tr><td align="center">ACC_PRIVATE</td><td align="center">0x0002</td><td align="center">方法是否为private</td></tr><tr><td align="center">ACC_PROTECTED</td><td align="center">0x0004</td><td align="center">方法是否为protected</td></tr><tr><td align="center">ACC_STATIC</td><td align="center">0x0008</td><td align="center">方法是否为static</td></tr><tr><td align="center">ACC_FINAL</td><td align="center">0x0010</td><td align="center">方法是否为final</td></tr><tr><td align="center">ACC_SYNCHRONIZED</td><td align="center">0x0020</td><td align="center">方法是否为synchronized</td></tr><tr><td align="center">ACC_BRIDGE</td><td align="center">0x0040</td><td align="center">方法是否是由编译器产生的桥接方法</td></tr><tr><td align="center">ACC_VARARGS</td><td align="center">0x0080</td><td align="center">方法是否接受不定参数</td></tr><tr><td align="center">ACC_NATIVE</td><td align="center">0x0100</td><td align="center">方法是否为native</td></tr><tr><td align="center">ACC_ABSTRACT</td><td align="center">0x0400</td><td align="center">方法是否为abstract</td></tr><tr><td align="center">ACC_STRICTFP</td><td align="center">0x0800</td><td align="center">方法是否为strictfp</td></tr><tr><td align="center">ACC_SYNTHETIC</td><td align="center"></td><td align="center">方法是否是由编译器自动产生的</td></tr></tbody></table><p>另外,方法里的Java代码,经过编译器编译成字节码指令后,存放在方法属性表集合中一个名为”Code”的属性里面.</p><blockquote><p><strong>方法的重载和重写</strong></p><p>父类方法没有在子类中被重写(Override),方法表集合就不会出现来自父类方法信息.但同样的,有可能会出现由编译器添加自动添加的方法.</p><p>在Java中要重载(Overload)一个方法,除了要与原方法有相同的简单名称之外,还要求有不同的特征签名.</p><blockquote><p><strong>特征签名:</strong>一个方法中各个参数在常量池中的字段符号引用的集合</p></blockquote><p>因为返回值不会包含在特征签名中,所以Java语言无法只靠返回值的不同来对一个已有方法进行重载,</p><p><strong>但是,</strong> 在Class文件中特征签名的范围会更大些,<strong>只要描述符不是完全一致的两个方法也可以共存.</strong></p><p>也就是说,如果两个方法有相同的名称和特征签名,但返回值不同,也是可以合法共存于同一个Class文件中的.</p></blockquote><h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> u2             attributes_count;//此类的属性表中的属性数</span><br><span class="line">attribute_info attributes[attributes_count];//属性表集合</span><br></pre></td></tr></table></figure><p>在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList源码分析</title>
      <link href="/2019/11/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/21/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<center>    LinkedList学习笔记........</center><a id="more"></a><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>LinkedList是一个实现了<strong>List接口</strong>和<strong>Deque接口</strong>的双端链表.</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>支持高效的插入和删除操作(底层的链表结构)</li><li>具有队列特性(实现Deque接口导致)</li><li><strong>不是线程安全</strong>(如果想要LinkedList线程安全可以调用静态类Collections类的synchronizedList方法:<code>List list=Collections.synchronizedList(new LinkedList(...));</code></li></ul><h3 id="内部结构分析"><a href="#内部结构分析" class="headerlink" title="内部结构分析"></a>内部结构分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的链表结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;<span class="comment">//节点值</span></span><br><span class="line">        Node&lt;E&gt; next;<span class="comment">//后继节点</span></span><br><span class="line">        Node&lt;E&gt; prev;<span class="comment">//前驱节点</span></span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="空构造方法"><a href="#空构造方法" class="headerlink" title="空构造方法:"></a>空构造方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用已有的集合创建链表的结构方法"><a href="#用已有的集合创建链表的结构方法" class="headerlink" title="用已有的集合创建链表的结构方法:"></a>用已有的集合创建链表的结构方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h4><h5 id="add-E-e-方法-将元素添加到链表尾部"><a href="#add-E-e-方法-将元素添加到链表尾部" class="headerlink" title="add(E e)方法:将元素添加到链表尾部"></a>add(E e)方法:将元素添加到链表尾部</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span> <span class="params">(E e)</span></span>&#123;</span><br><span class="line">    linkList(e);<span class="comment">//调用链尾添加方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 链接使e作为最后一个元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;<span class="comment">//新建节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;<span class="comment">//指向后继元素也就是指向下一个元素</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="add-int-index-E-e-：在指定位置添加元素"><a href="#add-int-index-E-e-：在指定位置添加元素" class="headerlink" title="add(int index,E e)：在指定位置添加元素"></a><strong>add(int index,E e)</strong>：在指定位置添加元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index); <span class="comment">//检查索引是否处于[0-size]之间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)<span class="comment">//添加在链表尾部</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//添加在链表中间</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>linkBefore</code>方法需要给定两个参数，一个插入节点的值，一个指定的<code>node</code>，所以我们又调用了<code>Node(index)</code>去找到<code>index</code>对应的<code>node</code></p><h5 id="addAll-Collection-c-将集合插入到链表尾部"><a href="#addAll-Collection-c-将集合插入到链表尾部" class="headerlink" title="addAll(Collection c):将集合插入到链表尾部"></a>addAll(Collection c):将集合插入到链表尾部</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="addAll-int-index-Collection-c-将集合从指定位置开始插入"><a href="#addAll-int-index-Collection-c-将集合从指定位置开始插入" class="headerlink" title="addAll(int index,Collection c):将集合从指定位置开始插入"></a>addAll(int index,Collection c):将集合从指定位置开始插入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1:检查index范围是否在size之内</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2:toArray()方法把集合的数据存到对象数组中</span></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3：得到插入位置的前驱节点和后继节点</span></span><br><span class="line">        Node&lt;E&gt; pred, succ;</span><br><span class="line">        <span class="comment">//如果插入位置为尾部，前驱节点为last，后继节点为null</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            succ = <span class="keyword">null</span>;</span><br><span class="line">            pred = last;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，调用node()方法得到后继节点，再得到前驱节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            succ = node(index);</span><br><span class="line">            pred = succ.prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4：遍历数据将数据插入</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">            <span class="comment">//创建新节点</span></span><br><span class="line">            Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//如果插入位置在链表头部</span></span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                first = newNode;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = newNode;</span><br><span class="line">            pred = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果插入位置在尾部，重置last节点</span></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = pred;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，将插入的链表与先前链表连接起来</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pred.next = succ;</span><br><span class="line">            succ.prev = pred;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size += numNew;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p> 上面可以看出addAll方法通常包括下面四个步骤：</p><ol><li>检查index范围是否在size之内</li><li>toArray()方法把集合的数据存到对象数组中</li><li>得到插入位置的前驱和后继节点</li><li>遍历数据，将数据插入到指定位置</li></ol></blockquote><h5 id="addFirst-E-e-：-将元素添加到链表头部"><a href="#addFirst-E-e-：-将元素添加到链表头部" class="headerlink" title="addFirst(E e)： 将元素添加到链表头部"></a><strong>addFirst(E e)：</strong> 将元素添加到链表头部</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);<span class="comment">//新建节点，以头节点为后继节点</span></span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="comment">//如果链表为空，last节点也指向该节点</span></span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="comment">//否则，将头节点的前驱指针指向新节点，也就是指向前一个元素</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="addLast-E-e-：-将元素添加到链表尾部，与-add-E-e-方法一样"><a href="#addLast-E-e-：-将元素添加到链表尾部，与-add-E-e-方法一样" class="headerlink" title="addLast(E e)： 将元素添加到链表尾部，与 add(E e) 方法一样"></a><strong>addLast(E e)：</strong> 将元素添加到链表尾部，与 <strong>add(E e)</strong> 方法一样</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据位置获取数据的方法"><a href="#根据位置获取数据的方法" class="headerlink" title="根据位置获取数据的方法"></a>根据位置获取数据的方法</h4><h5 id="int-index-Object-o-从头遍历找"><a href="#int-index-Object-o-从头遍历找" class="headerlink" title="int index(Object o):从头遍历找"></a>int index(Object o):从头遍历找</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从头遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//从头遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="int-lastIndexOf-Object-o-：-从尾遍历找"><a href="#int-lastIndexOf-Object-o-：-从尾遍历找" class="headerlink" title="int lastIndexOf(Object o)： 从尾遍历找"></a><strong>int lastIndexOf(Object o)：</strong> 从尾遍历找</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = size;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//从尾遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从尾遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="检查链表是否包含某对象的方法"><a href="#检查链表是否包含某对象的方法" class="headerlink" title="检查链表是否包含某对象的方法"></a>检查链表是否包含某对象的方法</h4><h5 id="contains-Object-o-：-检查对象o是否存在于链表中"><a href="#contains-Object-o-：-检查对象o是否存在于链表中" class="headerlink" title="contains(Object o)： 检查对象o是否存在于链表中"></a><strong>contains(Object o)：</strong> 检查对象o是否存在于链表中</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h4><h5 id="remove-removeFirst-pop-删除头节点"><a href="#remove-removeFirst-pop-删除头节点" class="headerlink" title="remove() ,removeFirst(),pop(): 删除头节点"></a><strong>remove()</strong> ,<strong>removeFirst(),pop():</strong> 删除头节点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="removeLast-pollLast-删除尾节点"><a href="#removeLast-pollLast-删除尾节点" class="headerlink" title="removeLast(),pollLast(): 删除尾节点"></a><strong>removeLast(),pollLast():</strong> 删除尾节点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>区别：</strong> removeLast()在链表为空时将抛出NoSuchElementException，而pollLast()方法返回null。</p><h5 id="remove-Object-o-删除指定元素"><a href="#remove-Object-o-删除指定元素" class="headerlink" title="remove(Object o): 删除指定元素"></a>remove(Object o): 删除指定元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果删除对象为null</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从头开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="comment">//找到元素</span></span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//从链表中移除找到的元素</span></span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//从头开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="comment">//找到元素</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                <span class="comment">//从链表中移除找到的元素</span></span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当删除指定对象时，只需调用remove(Object o)即可，不过该方法一次只会删除一个匹配的对象，如果删除了匹配对象，返回true，否则false。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*unlink(Node x) 方法：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = x.next;<span class="comment">//得到后继节点</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="comment">//得到前驱节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除前驱指针</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;<span class="comment">//如果删除的节点是头节点,令头节点指向该节点的后继节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;<span class="comment">//将前驱节点的后继节点指向后继节点</span></span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除后继指针</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;<span class="comment">//如果删除的节点是尾节点,令尾节点指向该节点的前驱节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>remove(int index)</strong>：删除指定位置的元素 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查index范围</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">//将节点删除</span></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码分析</title>
      <link href="/2019/11/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<center>    ArrayList学习笔记........</center><a id="more"></a><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><blockquote><p>要想深入的了解集合就必须要通过分析源码来了解它，那如何来看源码，要看什么东西呢？主要从三个方面：</p><p>　　<strong>1、看继承结构</strong></p><p>　　　　看这个类的继承结构，处于一个什么位置，不需要背记，有个大概的感觉就可以，我自己感觉了解了之后心里都舒服些。</p><p>　　<strong>2、看构造方法</strong></p><p>　　　　很重要，一般在构造方法中会做很多事情，要跟踪方法中的方法。</p><p>　　<strong>3、看常用方法</strong></p><p>　　　　没必要所有方法都去了解，知道常用、核心的方法实现即可</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h3><p>ArrayList是我们常见的集合类型.</p><h4 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现:"></a>底层实现:</h4><p>ArrayList 的底层是数组队列，相当于动态数组</p><blockquote><p>与数组的区别:</p><p> 与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用<code>ensureCapacity</code>操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。 </p></blockquote><p><strong>继承:</strong> <strong>AbstractList</strong> </p><p><strong>实现:</strong> </p><ul><li><strong>List</strong></li><li><strong>RandomAccess(标志接口:支持快速访问)</strong> </li><li><strong>Cloneable(覆盖clone()方法,能被克隆)</strong></li><li><strong>java.io.Serializable(支持序列化，能通过序列化去传输)</strong> </li></ul><p>arrayList可以<strong>存放null</strong></p><p> arrayList<strong>本质上就是一个elementData数组。</strong> </p><p><strong>另外</strong>, 和 Vector 不同，<strong>ArrayList 中的操作不是线程安全的</strong>！所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Vector 或者 CopyOnWriteArrayList。 </p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析:"></a>源码解析:</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"><span class="comment">// 默认容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 空对象数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">// 默认空对象数组（用于空实例）</span></span><br><span class="line"><span class="comment">//我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少</span></span><br><span class="line"><span class="comment">//如果给定值就不会过分扩容,如果不给,就会扩到默认容量的大小(10),见构造函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">// 元素数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="comment">// 实际元素大小，默认为0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// 最大数组容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure><blockquote><p>为什么无法创建更大的数组:</p><p>创建过大的数组容易出现两种错误:</p><ol><li><code>OutOfMemoryError: Java heap space</code>堆区内存不足 </li><li><code>OutOfMemoryError: Requested array size exceeds VM limit</code> 超过了JVM虚拟机的最大限制，我的window64就是 <em>Integer.MAX_VALUE-1 .</em> </li></ol><p>为什么数组长度的最大值是Integer.MAX_VALUE - 8</p><p>数组作为一个对象，需要一定的内存存储对象头信息(散列码,是否是数组,大小,同步信息)，对象头信息最大占用内存不可超过8字节。</p></blockquote><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法:"></a>构造方法:</h4><ol><li><p>无参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *默认构造函数，DEFAULTCAPACITY_EMPTY_ELEMENTDATA 为0.初始化为10，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有参构造函数一 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//创建initialCapacity大小的数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//创建空数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有参构造函数二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="comment">//如果指定集合元素个数不为0</span></span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray 可能返回的不是Object类型的数组所以加上下面的语句用于判断，</span></span><br><span class="line">        <span class="comment">//这里用到了反射里面的getClass()方法</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 用空数组代替</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法:"></a>核心方法:</h4><ol><li><h5 id="添加方法-常用的有两个"><a href="#添加方法-常用的有两个" class="headerlink" title="添加方法(常用的有两个)"></a><strong>添加方法</strong>(常用的有两个)</h5><ol><li><p>boolean add(E) //默认直接在末尾添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//确定容量</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到最小扩容量并调用判断扩容方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="comment">// 获取默认的容量和传入参数的较大值</span></span><br><span class="line">        <span class="comment">//在这个过程中容量扩为10</span></span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">    <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//再检查新容量是否超出了ArrayList所定义的最大容量，</span></span><br><span class="line">    <span class="comment">//若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span></span><br><span class="line">    <span class="comment">//如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较minCapacity和 MAX_ARRAY_SIZE</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//过大超过Integer的最大值,从而转为负数</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>void add(int，E)；在特定位置添加元素，也就是插入元素 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查插入位置(index)是否合理</span></span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"><span class="comment">//得到最小扩容量并调用判断扩容方法</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>); </span><br><span class="line"><span class="comment">//用来在插入元素之后，要将index之后的元素都往后移一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    <span class="comment">//存放</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="comment">//size+1</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p><strong>删除方法</strong></p><ol><li><p>remove(int)：通过删除指定位置上的元素 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="comment">//从列表中删除的元素 </span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>remove(Object)：这个方法可以看出来，arrayList是可以存放null值得。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从列表中删除指定元素的第一个出现（如果存在）。 如果列表不包含该元素，则它不会更改。</span></span><br><span class="line"><span class="comment">     *返回true，如果此列表包含指定的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>clear()：将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// 把数组中所有的元素的值设为null</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>removeAll(collection c)批量删除 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从此列表中删除指定集合中包含的所有元素。 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="comment">//如果此列表被修改则返回true</span></span><br><span class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个方法，用于两处地方，如果complement为false，则用于removeAll如果为true，则给retainAll()用，retainAll（）是用来检测两个集合是否有交集的。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData; <span class="comment">//将原集合，记名为A</span></span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;   <span class="comment">//r用来控制循环，w是记录有多少个交集</span></span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">            <span class="comment">//参数中的集合C一次检测集合A中的元素是否有，</span></span><br><span class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                <span class="comment">//有的话，就给集合A</span></span><br><span class="line">                elementData[w++] = elementData[r];</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">        <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">        <span class="comment">//如果contains方法使用过程报异常</span></span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">            <span class="comment">//将剩下的元素都赋值给集合A，</span></span><br><span class="line">            System.arraycopy(elementData, r,</span><br><span class="line">                             elementData, w,</span><br><span class="line">                             size - r);</span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">            <span class="comment">//这里有两个用途，在removeAll()时，w一直为0，就直接跟clear一样，全是为null。</span></span><br><span class="line">            <span class="comment">//retainAll()：没有一个交集返回true，有交集但不全交也返回true，而两个集合相等的时候，返回false，所以不能根据返回值来确认两个集合是否有交集，而是通过原集合的大小是否发生改变来判断，如果原集合中还有元素，则代表有交集，而元集合没有元素了，说明两个集合没有交集。</span></span><br><span class="line">            <span class="comment">// clear to let GC do its work</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            modCount += size - w;</span><br><span class="line">            size = w;</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h5 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从首开始查找数组里面是否存在指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">// 查找的元素为空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) <span class="comment">// 遍历数组，找到第一个为空的元素，返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 查找的元素不为空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) <span class="comment">// 遍历数组，找到第一个和指定元素相等的元素，返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 没有找到，返回空</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此列表中指定位置的元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用指定的元素替换此列表中指定位置的元素。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对index进行界限检查</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="comment">//返回原来在这个位置的元素</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法:"></a>其他方法:</h4><ol><li><p>添加</p><ol><li>boolean addAll(Collection&lt;? extends E&gt; c) </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>boolean addAll(int index, Collection&lt;? extends E&gt; c) </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定集合中的所有元素插入到此列表中，从指定的位置开始。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew,numMoved);</span><br><span class="line">    </span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改ArrayList容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改这个ArrayList实例的容量是列表的当前大小。 应用程序可以使用此操作来最小化ArrayList实例的存储。 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == <span class="number">0</span>)</span><br><span class="line">            ? EMPTY_ELEMENTDATA</span><br><span class="line">            : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回列表元素数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意=和==的区别</span></span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果此列表包含指定的元素，则返回true 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//indexOf()方法：返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1 </span></span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="comment">//equals()方法比较</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回此ArrayList实例的浅拷贝。 （元素本身不被复制。）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">//Arrays.copyOf功能是实现数组的复制，返回复制后的数组。参数是被复制的数组和复制的长度</span></span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        v.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// 这不应该发生，因为我们是可以克隆的</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 </span></span><br><span class="line"><span class="comment">     *返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。</span></span><br><span class="line"><span class="comment">     *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; </span></span><br><span class="line"><span class="comment">     *返回的数组的运行时类型是指定数组的运行时类型。 如果列表适合指定的数组，则返回其中。 </span></span><br><span class="line"><span class="comment">     *否则，将为指定数组的运行时类型和此列表的大小分配一个新数组。 </span></span><br><span class="line"><span class="comment">     *如果列表适用于指定的数组，其余空间（即数组的列表数量多于此元素），则紧跟在集合结束后的数组中的元素设置为null 。</span></span><br><span class="line"><span class="comment">     *（这仅在调用者知道列表不包含任何空元素的情况下才能确定列表的长度。） </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">        <span class="comment">// 新建一个运行时类型的数组，但是ArrayList数组的内容</span></span><br><span class="line">        <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">    <span class="comment">//调用System提供的arraycopy()方法实现数组之间的复制</span></span><br><span class="line">    System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">        a[size] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。</span></span><br><span class="line"><span class="comment">     *将任何后续元素移动到左侧（减少其索引）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - toIndex;</span><br><span class="line">    System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                     numMoved);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">        elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    size = newSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查给定的索引是否在范围内。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除集合中不存在的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(c);</span><br><span class="line">       <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>从指定位置开始的迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。</span></span><br><span class="line"><span class="comment">     *指定的索引表示初始调用将返回的第一个元素为next 。 初始调用previous将返回指定索引减1的元素。 </span></span><br><span class="line"><span class="comment">     *返回的列表迭代器是fail-fast 。 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**返回列表中的列表迭代器（按适当的顺序）。 </span></span><br><span class="line"><span class="comment">     *返回的列表迭代器是fail-fast 。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *以正确的顺序返回该列表中的元素的迭代器。 </span></span><br><span class="line"><span class="comment">     *返回的迭代器是fail-fast 。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt;  </span></span><br><span class="line"><span class="class">(2)<span class="title">private</span> <span class="title">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt;  </span></span><br><span class="line"><span class="class">(3)<span class="title">private</span> <span class="title">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span>  </span></span><br><span class="line"><span class="class">(4)<span class="title">static</span> <span class="title">final</span> <span class="title">class</span> <span class="title">ArrayListSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure><p> ArrayList有四个内部类，其中的<strong>Itr是实现了Iterator接口</strong>，同时重写了里面的<strong>hasNext()</strong>， <strong>next()</strong>， <strong>remove()</strong> 等方法；其中的<strong>ListItr</strong> 继承 <strong>Itr</strong>，实现了<strong>ListIterator接口</strong>，同时重写了<strong>hasPrevious()</strong>， <strong>nextIndex()</strong>， <strong>previousIndex()</strong>， <strong>previous()</strong>， <strong>set(E e)</strong>， <strong>add(E e)</strong> 等方法，所以这也可以看出了 :</p><p><strong>Iterator和ListIterator的区别:</strong> ListIterator在Iterator的基础上增加了添加对象，修改对象，逆向遍历等方法，这些是Iterator不能实现的。 </p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记_命令</title>
      <link href="/2019/11/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Linux_%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/11/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Linux_%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<center>    正好赶上这门儿课程<br>    Linux主流的操作方式</center><a id="more"></a><h3 id="命令相关概念"><a href="#命令相关概念" class="headerlink" title="命令相关概念"></a>命令相关概念</h3><p>命令提示符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#     #/root</span><br><span class="line"></span><br><span class="line">[hahaha@localhost ~]$    #/home/chenzhe</span><br></pre></td></tr></table></figure><p>从上面两个命令提示符可以看的出来中括号后的符号不同，其中#表示超级权限(管理员/root)，$表示普通用户的权限</p><p>中括号中的内容分别是：</p><table><thead><tr><th align="center">内容</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">root |  hahaha</td><td align="center">登录的账户名称</td></tr><tr><td align="center">@localhost</td><td align="center">主机名</td></tr><tr><td align="center">~</td><td align="center">表示当前账户的家目录</td></tr></tbody></table><h4 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令 选项 参数</span><br></pre></td></tr></table></figure><blockquote><p>命令、选项、参数之间，<strong>必须有空格！</strong></p><p>执行的时候，命令本身必须存在，选项和参数可有可无。<br>选项和参数也可以有多个的存在。</p></blockquote><p>执行时，如果有多个选项，可以拼在一起写:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -a -l 可以写成</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>执行时，如果有多个参数，参数之间必须有空格隔开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /root /etc</span><br></pre></td></tr></table></figure><p>执行时可以没有选项、参数的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>执行是有参数的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifup eth0</span><br></pre></td></tr></table></figure><h5 id="获取命令帮助："><a href="#获取命令帮助：" class="headerlink" title="获取命令帮助："></a>获取命令帮助：</h5><table><thead><tr><th align="center">方法</th><th align="center">好处</th></tr></thead><tbody><tr><td align="center">man</td><td align="center">man 命令，优点是，内核自带，缺点，大部分的帮助都是英文</td></tr><tr><td align="center">–help</td><td align="center">命令 –help 优点是：部分命令提供中文，缺点：不是所有的命令都有这个帮助文件</td></tr><tr><td align="center">命令大全手册</td><td align="center"></td></tr><tr><td align="center">问度娘</td><td align="center"></td></tr></tbody></table><h4 id="和目录相关的命令"><a href="#和目录相关的命令" class="headerlink" title="和目录相关的命令:"></a>和目录相关的命令:</h4><table><thead><tr><th align="center">命令</th><th align="center">作用及参数</th></tr></thead><tbody><tr><td align="center">pwd</td><td align="center">用于显示当前所在的完整路径</td></tr><tr><td align="center">mkdir</td><td align="center">用于创建一个目录。  -p 该选项用于创建多级目录。</td></tr><tr><td align="center">cd</td><td align="center">用于切换目录 | 路径  . 表示当前目录  .. 表示上级(父级)目录  ~ 表示用户的家目录，如果在~跟用户名，就表示要去到该用户的家目录。  “-“  表示与上次所在目录进行切换。  相对路径：相对于当前所在位置而出发的路径。  绝对路径：以/(根目录)开始的路径。</td></tr><tr><td align="center">ls</td><td align="center">用于显示目录 | 文件的信息  -a：显示所有的文件夹内容(包括隐藏)  -l：用于显示文件/夹的详细信息  -h：与-l配合使用，可以显示文件的体积大小(自适应单位b,k,m,g …)  -d：跟上指定的目录时，就会显示该目录的信息，不会显示目录下的文件</td></tr></tbody></table><p><strong>mkdir案例</strong>：</p><p>​    mkdir 默认只能创建一个级别的目录，如果想要创建多级目录时，需要配合-p选项来使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/1/2/3/4/5</span><br></pre></td></tr></table></figure><p>此命令必然失败，因为mkdir默认不支持多级目录,需要这样:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/1/2/3/4/5</span><br></pre></td></tr></table></figure><p><strong>cd 案例：</strong></p><p>进入指定用户(zhangssan)的家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~zhangsan</span><br></pre></td></tr></table></figure><p>去到/root/目录下(说明：当前在/etc/sysconfig/network-scripts/)</p><p>相对路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ../../../root</span><br></pre></td></tr></table></figure><p>绝对路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">命令</th><th align="center">作用即参数</th></tr></thead><tbody><tr><td align="center">cp</td><td align="center">语法：cp [path]/file1 [path]/file2  用于copy(拷贝)文件/夹的命令  如果<strong>拷贝的是一个文件夹</strong>时，需要配合选项<strong>-r</strong>来使用</td></tr><tr><td align="center">mv</td><td align="center">语法：mv [path]/file [path]/  改名：mv fileName1 fileName2</td></tr><tr><td align="center">touch</td><td align="center">用于创建一个空白的文本文件，也可以修改文件/夹的时间戳</td></tr><tr><td align="center">rm</td><td align="center">-r 表示递归处理  -f 表示强制执行</td></tr><tr><td align="center">rmdir</td><td align="center">用于删除目录使用，但只能删除空目录。</td></tr></tbody></table><p><strong>案例：</strong></p><p>拷贝一个文件到别的目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /root/install.log /home</span><br></pre></td></tr></table></figure><p>拷贝整个目录到其它目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r /root/ /home/  # 将root目录拷贝到home目录下</span><br><span class="line">cp -r /root/* /home  # 将root目录下的所有内容拷贝到/home目录下</span><br></pre></td></tr></table></figure><p>移动文件和修改名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /home/install.log /tmp  # 移动了文件到/tmp目录下</span><br><span class="line">mv /tmp/install.log /home/1 # 移动/tmp目录下的install文件到/home目录下，并同时修改文件名为"1"</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>用法及参数</th></tr></thead><tbody><tr><td>rename</td><td>语法：rename 修改谁 改成啥样 谁符合条件  批量改名  ? 代表一个字符  ?? 代表两个字符</td></tr></tbody></table><p><strong>案例：</strong></p><p>通过修改文件名称让文件可以得到一个正确的排序(升序)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch foo&#123;1..199&#125;</span><br></pre></td></tr></table></figure><p><strong>语法：</strong>rename 修改谁 改成是样 谁符合条件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename foo foo0 foo?</span><br></pre></td></tr></table></figure><blockquote><p> 修改之后文件名foo1..foo9就变成foo01..foo09</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename foo foo0 foo??</span><br></pre></td></tr></table></figure><blockquote><p> 修改之后文件名foo01..foo99就变成了foo001..foo099</p></blockquote><p>此时就完成了文件的排序</p><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别:"></a>运行级别:</h4><p><strong>级别：</strong></p><table><thead><tr><th align="center">代码</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户 # 注意该模式下不提供网络连接，所以无法使用超级终端进行连接。</td></tr><tr><td align="center">2</td><td align="center">无网络多用户</td></tr><tr><td align="center">3</td><td align="center">命令行模式</td></tr><tr><td align="center">4</td><td align="center">官方预留，未定义内容</td></tr><tr><td align="center">5</td><td align="center">图形化模式</td></tr><tr><td align="center">6</td><td align="center">重启</td></tr></tbody></table><p><strong>如何进行运行级别的切换：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 运行级别的数字</span><br></pre></td></tr></table></figure><p><strong>修改默认的运行级别：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/inittab</span><br></pre></td></tr></table></figure><blockquote><p> 在文件的最后一行内容中，将默认的5修改为3，就表示以后开机时以命令行模式运行。 </p><p> <strong>注：</strong></p><p> 默认运行级别不要设置为0或6，因为Linux系统启动是，执行的第一个进程就是init。默认会去读取inittab配置文件</p></blockquote><p> <strong>如何进入单用户模式</strong></p><ol><li>在系统启动,进入 4 秒等待时,敲击回车或方向键</li><li>出现CentOS…..,按字母e</li><li>然后选择kernel打头的,接着按e</li><li>进入有KEYTABLE=us的界面, 请输入 <code>空格 1</code>，输入完毕之后按一下 <code>Enter</code> 键 </li><li>此时回回到步骤三的界面,按b</li></ol><p><strong>忘记root密码后怎么办?</strong></p><p>可以通过上面的案例进入单用户模式：</p><p>进入单用户模式的步骤省略~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd    # 修改root账户的密码</span><br></pre></td></tr></table></figure><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理:"></a>用户管理:</h4><p>在Linux的系统中有如下几个概念:</p><p><strong>用户,用户组,其他人</strong></p><p>用我们家庭的关系比喻可以这样理解:</p><table><thead><tr><th align="center">概念</th><th align="center">比喻</th></tr></thead><tbody><tr><td align="center">用户</td><td align="center">一个户口本中的每一个成员</td></tr><tr><td align="center">用户组</td><td align="center">户口本中的所有成员组成的一个组</td></tr><tr><td align="center">其他人</td><td align="center">除用户本人(户主)和用户组(户口本中的成员)外的成员都是其他人</td></tr></tbody></table><blockquote><p><strong>注:</strong></p><p>每一个用户都可以拥有多个用户组。</p><p>每一个用户组都可以容纳多个用户。</p></blockquote><h5 id="用户及UID"><a href="#用户及UID" class="headerlink" title="用户及UID"></a>用户及UID</h5><p>在Linux系统中，每一个用户默认都对应了一个UID，而这个UID可以理解是用户的身份证号。</p><p>CentOS系统中：</p><table><thead><tr><th align="center">UID</th><th align="center">用户</th></tr></thead><tbody><tr><td align="center">UID 0</td><td align="center">root</td></tr><tr><td align="center">UID 1-499</td><td align="center">系统预留，作为系统用户来使用</td></tr><tr><td align="center">UID 500 -  65535</td><td align="center">自定义账户 (注意，此处仅指的是CentOS6.5系统，其他系统的自定义账户则不一定是从500开始，例如Ubuntu系统是从1000开始。)</td></tr></tbody></table><h5 id="用户信息存储的位置："><a href="#用户信息存储的位置：" class="headerlink" title="用户信息存储的位置："></a>用户信息存储的位置：</h5><table><thead><tr><th align="center">信息</th><th align="center">路径</th></tr></thead><tbody><tr><td align="center">用户信息</td><td align="center">/etc/passwd</td></tr><tr><td align="center">密码信息</td><td align="center">/etc/shadow</td></tr><tr><td align="center">用户组信息</td><td align="center">/etc/group</td></tr></tbody></table><blockquote><p><strong>注:</strong></p><p>passwd、shadows、group这三个文件不要随意的进行修改，如果想要进行文件内容的查看，建议大家copy出一份，对copy的文件进行修改。</p><p>或</p><p>把文件copy出来之后，进行保存，再去修改原文件。这样做即便是写错了文件也可以通过单用户的方式将文件恢复。</p></blockquote><h5 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令:"></a>相关命令:</h5><blockquote><p>就是用于对passwd,shadow,group三个文件的增删改.</p></blockquote><p>新建的用户，默认的情况下是无法登录的。</p><p>创建一个用户的时候，默认情况下，会为其创建一个同名的用户组</p><h6 id="创建："><a href="#创建：" class="headerlink" title="创建："></a><strong>创建：</strong></h6><p><strong>语法：</strong><code>useradd [选项] {UserName}</code></p><p>选项：</p><table><thead><tr><th>-c comment</th><th>指定一段注释性描述</th></tr></thead><tbody><tr><td>-d 目录</td><td>指定用户主目录，如果目录不存在，则同时使用-m选项，可以创建主目录。</td></tr><tr><td>-g 用户组</td><td>指定用户所属的主用户组。</td></tr><tr><td>-G 用户组,用户组</td><td>指定用户所属的附加组。</td></tr><tr><td>-s Shell文件</td><td>指定用户的登录Shell。有一个特殊的shell程序叫nologin，如果某帐号使用此shell，就表示用户不允许登录，该用户通常成为<strong>伪用户</strong>。</td></tr><tr><td>-u 用户号</td><td>指定用户的用户号</td></tr></tbody></table><p><strong>案例:</strong></p><p>创建一个普通用户，使用默认值即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd tom</span><br></pre></td></tr></table></figure><blockquote><p> 说明：该账户被创建完之后，会有哪些信息</p><ol><li><p>UID，由于是当前系统的第一个账户，那么它的UID是500。</p></li><li><p>家目录(主目录)，因为是默认创建，所以它的家目录所在位置是/home/tom</p></li><li><p>用户组，创建用户的同时，会为其创建一个同名的用户组，tom组</p></li></ol></blockquote><p>创建一个普通用户，其家目录是在/tedu/jerry，主组root,附加组tom,adm。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /tedu/jerry -m -g root -G tom,adm jerry</span><br></pre></td></tr></table></figure><p>执行用户的shell程序为/bin/sh，UID为80000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /bin/sh -u 80000 test1</span><br></pre></td></tr></table></figure><blockquote><p>说明：虽然CentOS系统中默认的UID是65536个(0-65535)，但是可以手动指定它的UID超出此范围。</p></blockquote><p>测试再创建账户是UID会不会延续上案例的UID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd test2</span><br></pre></td></tr></table></figure><p>正常来应该按照上次创建用户的UID往后+1。但是80000已超过系统默认的范围，所以不会根据超出范围后UID进行+1延续。</p><p>创建伪用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin test3</span><br></pre></td></tr></table></figure><h6 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h6><p><strong>语法：</strong><code>usermod [选项] {UserName}</code></p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-c comment</td><td align="center">指定一段注释性描述</td></tr><tr><td align="center">-d</td><td align="center">目录  指定用户主目录，如果目录不存在，则同时使用-m选项，可以创建主目录。</td></tr><tr><td align="center">-g 用户组</td><td align="center">指定用户所属的用户组。</td></tr><tr><td align="center">-G 用户组,用户组</td><td align="center">指定用户所属的附加组。如果想要在原有的基础上追加附加组，使用-aG的方式。</td></tr><tr><td align="center">-s Shell文件</td><td align="center">指定用户的登录Shell。有一个特殊的shell程序叫nologin，如果某帐号使用此shell，就表示用户不允许登录，该用户通常成为伪用户。</td></tr><tr><td align="center">-u 用户号</td><td align="center">指定用户的用户号</td></tr></tbody></table><p><strong>案例：</strong></p><p>修改test账户的UID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -u 9000 test1</span><br></pre></td></tr></table></figure><p>修改账户的附加组为test、test1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G test,test1 jerry</span><br></pre></td></tr></table></figure><p>为账户追加附加组件root、adm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG root,adm jerry</span><br></pre></td></tr></table></figure><p>将test5的伪用户状态修改为正常普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /bin/bash test5</span><br></pre></td></tr></table></figure><blockquote><p>说明：test5之前的shell程序是/sbin/nologin</p></blockquote><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p><strong>语法</strong>：<code>userdel [选项] {UserName}</code></p><p>选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">删除账户的同时删除该账户的家目录</td></tr></tbody></table><p><strong>案例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel zhangsan</span><br></pre></td></tr></table></figure><blockquote><p> 说明：该命令执行完成之后，在home目录下依然保留了zhangsan的家目录。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r lisi</span><br></pre></td></tr></table></figure><blockquote><p> 说明：该命令之后之后，home目录中的lisi目录会被一并删除，且不保留它的工作文件。</p></blockquote><p>一般来说，公司中删除账户的操作比较少，就算删除账户时，一般也不用-r的选项，因为人虽然离职，但是有可能此人还会回来继续任职~</p><p>如果员工离职，完全没有必要删除账户，可以使账户无法登录即可，比如nologin，锁定账户，删除密码等手段都是可以防止资料泄漏。</p><blockquote><p><strong>注：</strong></p><p>Windows和Linux系统(其他系统没测试)，没有密码的账户都是不允许通过远程的方式进行访问的。</p></blockquote><h6 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h6><p><strong>语法</strong>：<code>passwd [选项] {UserName}</code></p><p>选项：</p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">锁定账户</td></tr><tr><td align="center">-u</td><td align="center">解锁账户</td></tr><tr><td align="center">-d</td><td align="center">删除密码</td></tr></tbody></table><p>passwd 可以不跟选项、用户名，默认是修改自己的帐号密码。</p><p>修改他人密码，必须具备管理员权限(并不一定非要是root账户)</p><blockquote><p>普通账户，只能修改自己的密码。</p></blockquote><blockquote><p>管理员修改他人的密码，不需要满足密码策略。</p></blockquote><blockquote><p>普通账户修改密码时，必须满足密码安全策略。</p></blockquote><p>管理员修改他人密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd &#123;UserName&#125;</span><br></pre></td></tr></table></figure><p>修改自己的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><p>锁定zhangsan账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -l zhangsan</span><br></pre></td></tr></table></figure><p>解锁zhangsan账户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -u zhangsan</span><br></pre></td></tr></table></figure><p>删除zhangsan账户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd -d zhangsan</span><br></pre></td></tr></table></figure><p>案例中，锁定账户和删除账户密码都是可以达到不允许账户远程登录的效果。</p><h6 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a><strong>用户身份切换</strong></h6><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">su  {UserName}</td><td align="center">表示切换用户之后，依然停留在当前目录</td></tr><tr><td align="center">su -  {UserName}</td><td align="center">表示切换用户之后，去到该用户的家目录</td></tr></tbody></table><blockquote><p>普通用户切换root时，书写格式不需要写成su - root，直接su即可。</p></blockquote><p><strong>案例：</strong></p><p>当前位置，在/root下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su zhangsan</span><br></pre></td></tr></table></figure><p>该命令执行过后，切换到zhangsan账户，但是路径依然停留在/root目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - zhangsan</span><br></pre></td></tr></table></figure><p>该命令执行过后，切换到zhangsan账户，同时会去到zhangsan账户的家目录下。</p><p><strong>小总结</strong>，su与账户名之间加不加”-“区别在于路径。</p><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="用户组的增删改"><a href="#用户组的增删改" class="headerlink" title="用户组的增删改"></a>用户组的增删改</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p><strong>语法</strong>：<code>groupadd [选项] {groupName}</code></p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-g GID</td><td align="center">指定新用户组的GID</td></tr><tr><td align="center">-o</td><td align="center">通常与-g同时使用，使新用户组可以与系统已有的组ID系统。</td></tr></tbody></table><p>系统底层会将两个GID相同用户组识别为同一个用户组，这样做的目的是让两个用户组的权限相同。识别规则，后者遵循前者。</p><p><strong>案例：</strong></p><p>新建一个用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd group1</span><br></pre></td></tr></table></figure><blockquote><p> 此命令向系统中增加了一个新组group1，新组的组标识号，在当前已有的最大组标识号的基础上加1</p></blockquote> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 101 group2</span><br></pre></td></tr></table></figure><blockquote><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p></blockquote><p>创建一个普通的用户组，并将该组添加为tom账户的附加组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG group1 tom</span><br></pre></td></tr></table></figure><p>创建一个与上面案例GID相同的用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 1000 -o group2</span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p><strong>语法</strong>：<code>groupmod [选项] {groupName}</code></p><p>选项：</p><table><thead><tr><th>-g GID</th><th>指定新用户组的GID</th></tr></thead><tbody><tr><td>-o</td><td>通常与-g同时使用，使新用户组可以与系统已有的组ID系统。</td></tr><tr><td>-n</td><td>用来修改组ID  group -n newGroupName  oldGroupName</td></tr></tbody></table><p><strong>案例：</strong></p><p>将组group2的组标识号修改为102。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g 102 group2</span><br></pre></td></tr></table></figure><p>新建一个group3，并将其组名修改成big1902</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd group3</span><br><span class="line">groupmod -n big1902 group3</span><br></pre></td></tr></table></figure><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a><strong>删除</strong></h5><p><strong>语法</strong>：<code>groupdel {groupName}</code></p><p><strong>案例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel big1902</span><br></pre></td></tr></table></figure><blockquote><p> 注：</p><p>如果删除的用户组，已经被用户追加为附件组，对应的所有用户的该附件组会被撤销掉。</p><p>如果被删除的用户组，已经被用户指定为主组，则该用户组无法被删除。(可以理解为像Windows中文件被占用时不能被删除。)</p></blockquote><h5 id="用户组的切换"><a href="#用户组的切换" class="headerlink" title="用户组的切换"></a>用户组的切换</h5><p>某用户属于多个用户组时，想要访问其他用户组中的内容时，必须切换用户组才行。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp &#123;GroupName&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前提是该账户确实是拥有多个用户组。</p></blockquote><h4 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h4><p><strong>权限</strong></p><p>在Linux系统对于权限的设定非常的敏感，如果某个用户执行一个操作时，提示权限不足，那么根据Linux系统的权限设定的思想(没有权限绝对不会睁一只眼闭一只眼)，就能够判断出该用户不具备此文件的执行权限。</p><p>在Linux系统中，有以下的权限表示。业内人士称之为：</p><ul><li><p>逻辑权限</p></li><li><p>物理权限</p></li><li><p>普通用户的root的权限。</p></li></ul><p><strong>逻辑权限：</strong></p><p>在Linux系统中不管是文件还是目录。(在Linux系统中，将所有的东西都视为文件。)都有固定权限表示。</p><p>例：</p><p><code>drwxr-xr-x. 2 root root 4096 5月 13 15:27 home</code></p><p><code>-rw-r--r--. 1 root root 45537 5月 13 11:15 install.log</code></p><p>两个文件分别是：第一个是目录，第二个是普通文件</p><p>根据信息的<strong>第一个字母(文件类型)</strong>来查看，d表示该文件是一个目录文件，-表示该文件是一个普通文件。</p><p>后面每三个权限成为一组，每组中分别有三个权限：</p><table><thead><tr><th align="center">字符</th><th align="center">权限</th><th align="center">数字</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">读</td><td align="center">4</td></tr><tr><td align="center">w</td><td align="center">写</td><td align="center">2</td></tr><tr><td align="center">x</td><td align="center">执行</td><td align="center">1</td></tr></tbody></table><p>除了第一个字母不参与权限的表示，其他的都为权限标识符。</p><p>每三个为一组，共有三组：</p><table><thead><tr><th align="center">第几组</th><th align="center">什么人</th><th align="center">前面的英语</th></tr></thead><tbody><tr><td align="center">第一组</td><td align="center">用户</td><td align="center">user</td></tr><tr><td align="center">第二组</td><td align="center">用户组</td><td align="center">group</td></tr><tr><td align="center">第三组</td><td align="center">其他人</td><td align="center">other</td></tr></tbody></table><blockquote><p><strong>说明：Linux系统中，不管是什么系统，权限的标识符号的位置是不会发生任何的改变，也就是说，</strong></p><p><strong>第1个永远是文件类型，</strong></p><p><strong>第2-4(第一组)永远是读、写、执行，用户的权限，</strong></p><p><strong>第5-7(第二组)永远是读、写、执行，用户组的权限，</strong></p><p><strong>第8-10(第三组)永远是读、写、执行，其他人的权限。</strong></p><p><strong>如果某个文件权限标识为———-，那么则说明此文件不允许任何的读取、写入、执行</strong></p></blockquote><h5 id="修改文件-夹的权限："><a href="#修改文件-夹的权限：" class="headerlink" title="修改文件/夹的权限："></a>修改文件/夹的权限：</h5><p>chmod命令可以用来修改某个文件或文件夹的权限。</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归处理</td></tr></tbody></table><blockquote><p><strong>修改文件/夹的权限时，可以使用字符权限，也可以使用数字权限。</strong></p></blockquote><p><strong>案例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch test_1 # 当前文件的权限是-rw-r--r--</span><br></pre></td></tr></table></figure><p>将此文件的权限修改为———-</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 000 test_1</span><br></pre></td></tr></table></figure><p>为此文件，每组都增加一个读的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 444 test_1</span><br><span class="line">or</span><br><span class="line">chmod +r test_1</span><br></pre></td></tr></table></figure><blockquote><p>a=all,u=user,g=group,o=other</p></blockquote><p>为此文件的用户增加一个rw-，组增加一个r-x，其他人—。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+rw,g+rx test_1</span><br><span class="line">or</span><br><span class="line">chmod 650 test_1</span><br></pre></td></tr></table></figure><blockquote><p>0表示没有权限</p></blockquote><p><strong>chmod在修改文件权限的时候，哪个便捷用哪个方法。</strong></p><blockquote><p><strong>比如：</strong></p><p>如果要是给三组增加执行权限的时候，+x就数字计算要快。字符权限就比数字要便捷(不需要计算)如果是为每组增加不同权限的时候，用数字比较便捷(书写便捷)。</p></blockquote><p><strong>物理权限：</strong></p><p>修饰某个文件/夹不允许被修改。注意：不能给/ p/tm /dev /var 加保护</p><p>即便是root权限也不一定所有的文件都可以删</p><p><code>chattr [选项] file/dir</code></p><table><thead><tr><th align="center">选项</th><th>功能</th></tr></thead><tbody><tr><td align="center">i</td><td>表示不能以任何方式进行文件/夹的修改，增加，删除</td></tr><tr><td align="center">S</td><td>即时更新文件或 目录</td></tr><tr><td align="center">s</td><td>保密性删除文件或目录</td></tr><tr><td align="center">a</td><td>表示文件/夹只能追加，不能修改，删除</td></tr><tr><td align="center">+  &lt;属性&gt;</td><td>表示开启某文件/夹的权限</td></tr><tr><td align="center">&lt;属性&gt;</td><td>表示关闭某文件/夹的权限</td></tr><tr><td align="center">R</td><td>表示递归处理。</td></tr></tbody></table><p><strong>案例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch big1902</span><br><span class="line">chattr +i big1902  # 表示该文件不允许修改，删除，增加。</span><br><span class="line">touch big 1902_1 </span><br><span class="line">chattr +a big1902_1 # 表示该文件只允许追加内容，不允许删除和修改。</span><br></pre></td></tr></table></figure><p><strong>a、i的使用场景：</strong></p><p>通常情况，log文件用a的属性。如果是cfg（配置文件）文件用i的属性。</p><p><strong>lsattr查看文件的物理权限(属性)</strong></p><p><code>lsattr [选项] 文件/夹</code></p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">R</td><td align="center">表示递归处理</td></tr><tr><td align="center">a</td><td align="center">表示查看所有文件的属性，包括隐藏</td></tr><tr><td align="center">d</td><td align="center">显示目录的属性，而不是目录下的文件的属性</td></tr></tbody></table><p><strong>普通用户的超级权限：</strong></p><p>sudo(SuperUser Do)，它可以让普通用户执行root的权限。sudo可以限制用户执行部分root的权限。</p><p>sudo会记录用户执行过的每一条命令，便于查阅服务起出事之前的状态。</p><p><strong>好处：</strong></p><p>使用自己配置好的用户环境</p><p>不需要知道root密码，保证root的密码安全</p><p>可以限制用户执行有限的root权限</p><p>sudo执行的每条命令都会被记录，便于日后的日志审计，例如用户执行过高危操作命令。</p><h4 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h4><h5 id="通过主机名查看IP："><a href="#通过主机名查看IP：" class="headerlink" title="通过主机名查看IP："></a>通过主机名查看IP：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host www.baidu.com</span><br></pre></td></tr></table></figure><p>返回的结果中有该域名的IP地址。</p><h5 id="远程拷贝："><a href="#远程拷贝：" class="headerlink" title="远程拷贝："></a>远程拷贝：</h5><p>从本机拷贝数据到远程的服务器上</p><p><strong>要求</strong>：必须知道对方的账户和密码，且具备相应的权限。</p><p><strong>语法</strong>：<code>scp [-r] [path]/fie | dir {UserName}@Host_IP:/[path]</code></p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">该选项用于传输文件夹的时候使用。</td></tr></tbody></table><p><strong>案例</strong>：</p><p><strong>将本机的文件拷贝到远程服务器上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /root/install.log root@192.168.89.128:/home</span><br></pre></td></tr></table></figure><blockquote><p>注意， 如果是第一次访问该服务器，那么会询问，是否要继续连接。每次访问都需要输入远程服务器的密码。</p></blockquote><p><strong>从远程服务器上拷贝数据到本机：</strong></p><p><strong>要求</strong>：必须知道对方的账户和密码，且具备相应的权限。</p><p><strong>语法</strong>：<code>scp {UserName}@Host_IP:/[path]/file /[path]</code></p><h5 id="登录远程服务器："><a href="#登录远程服务器：" class="headerlink" title="登录远程服务器："></a>登录远程服务器：</h5><p><strong>语法</strong>：<code>ssh {UserName}@Host_IP</code></p><p>回车之后，如果首次访问，会提示是否继续连接。接下来要求输入远程服务器的密码。</p><p><strong>案例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.89.128</span><br></pre></td></tr></table></figure><p>如果想退出当前登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>Linux系统下，ssh服务的默认端口是22。如果在访问是没有指明端口，默认按照22端口访问，如果远程服务器，提供的端口不是22，那么就需要在访问的时候指定远程服务器的端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [-p port] &#123;UserName&#125;@Host_IP</span><br></pre></td></tr></table></figure><h4 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h4><p><strong>如何查看进程：</strong></p><p>在Linux系统中，不像windows那样方便，可以通过快捷键调出图形化的任务管理器来管理进程。</p><h5 id="静态查询："><a href="#静态查询：" class="headerlink" title="静态查询："></a>静态查询：</h5><p><code>ps:</code></p><blockquote><p>将某个时间点的程序运作情况截取下来 </p></blockquote><p><strong>常用组合选项 -aux</strong></p><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">关联的所有  process，通常与x一起使用，列出完整信息。</td></tr><tr><td align="center">x</td><td align="center">后台进程</td></tr><tr><td align="center">u</td><td align="center">有效使用者的相关联的进程</td></tr><tr><td align="center">ajxf</td><td align="center">可以让ps的结果以树状的格式显示出来。</td></tr></tbody></table><blockquote><p>举例：当我们新开一个通道编辑一个文件的时候，我们通过ps -aux可以查看到</p></blockquote><h6 id="查询特定进程用"><a href="#查询特定进程用" class="headerlink" title="查询特定进程用"></a>查询特定进程用</h6><p>查询sshd服务:</p><p><code>ps -aux | grep sshd</code></p><table><thead><tr><th align="center">查询结果</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">USER</td><td align="center">用户</td></tr><tr><td align="center">PID</td><td align="center">进程ID</td></tr><tr><td align="center">%CPU</td><td align="center">cpu占用率</td></tr><tr><td align="center">%MEM</td><td align="center">内存使用率</td></tr><tr><td align="center">VSS</td><td align="center">虚拟内存使用量</td></tr><tr><td align="center">RSS</td><td align="center">物理内存使用量</td></tr><tr><td align="center">TTY</td><td align="center">tty1-tty6  是本机上面的登入者程序。  pts/0  等等的,则表示为由网络连接进主机的程序。  如果显示？则表示与终端机无关。</td></tr><tr><td align="center">STAT</td><td align="center">进程的状态</td></tr><tr><td align="center">START</td><td align="center">进程启动的时间</td></tr><tr><td align="center">TIME</td><td align="center">累计消耗CPU的时间</td></tr><tr><td align="center">COMMAND</td><td align="center">表示哪个命令/程序运行的该进程</td></tr></tbody></table><table><thead><tr><th align="center">状态标识</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">R</td><td align="center">正在运行，或在队列中的进程</td></tr><tr><td align="center">S</td><td align="center">处于休眠状态</td></tr><tr><td align="center">l</td><td align="center">多进程</td></tr><tr><td align="center">Z</td><td align="center">僵尸进程</td></tr><tr><td align="center">T</td><td align="center">停止或者被追踪</td></tr><tr><td align="center">&lt;</td><td align="center">高优先级</td></tr><tr><td align="center">N</td><td align="center">低优先级</td></tr><tr><td align="center">s</td><td align="center">包含子进程</td></tr><tr><td align="center">+</td><td align="center">位于后台的进程组</td></tr></tbody></table><p><strong><em>僵尸进程：</em></strong></p><p>由于该进程已经执行完毕，但是父进程没有终止或其他原因导致该进程并没有真正的结束，所形成的进程称之为僵尸进程。</p><p>此进程对服务器的危害在于它会持续的消耗服务器资源，消耗量会越来越大。最终导致其他的进程无资源可用，服务器崩溃。</p><p><code>pstree</code></p><table><thead><tr><th align="center">选项</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">各程序之间的连接以ASCII字符来连接</td></tr><tr><td align="center">U</td><td align="center">各程序之间的连接以UTF-8的字符来连接</td></tr><tr><td align="center">u</td><td align="center">列出每个process的所属账号名称</td></tr><tr><td align="center">p</td><td align="center">同时列出每个程序的进程的ID</td></tr></tbody></table><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -up</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：使用哪个账户运行此命令，那么与其相关的进程则不会显示用户名</strong></p></blockquote><h5 id="动态查询："><a href="#动态查询：" class="headerlink" title="动态查询："></a>动态查询：</h5><p><code>top：</code></p><p>动态查询系统的进程状态。默认是3秒一更新。</p><table><thead><tr><th align="center">选项</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-d</td><td align="center">跟时间，可以修改top默认更新(刷新)的时间</td></tr><tr><td align="center">-b :</td><td align="center">以批次的方式执行 top  ,还有更多的参数可以使用,通常会搭配数据流 重导向来将批次的结果输出成为档案;</td></tr><tr><td align="center">-n Number：</td><td align="center">与 -b 搭配,意义是需要进行几次 top  的输出结果;</td></tr><tr><td align="center">-p :</td><td align="center">指定某些个 PID 来进行观察监测而已;</td></tr></tbody></table><p><strong>案例：</strong></p><p>每秒刷新一次top</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -d 1</span><br></pre></td></tr></table></figure><p>每2秒刷新一次top，以批次输出2次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -d 2 -n 2</span><br></pre></td></tr></table></figure><p>每秒刷新一次top，以批次输出5次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -d 1 -b -n 5 &gt;&gt; top.log   # &gt;&gt;表示以追加的方式输出，&gt;表示以覆盖的方式输出</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">交互式按键：(并不常用)</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">? :</td><td align="center">显示在 top 当中可以输入的按键指令</td></tr><tr><td align="center">P :</td><td align="center">以CPU的使用资源排序显示</td></tr><tr><td align="center">M :</td><td align="center">以Memory的使用资源排序显示</td></tr><tr><td align="center">N :</td><td align="center">以PID来排序</td></tr><tr><td align="center">T :</td><td align="center">由该Process使用的CPU时间累积  (TIME+) 排序</td></tr><tr><td align="center">q :</td><td align="center">离开top软件的按键</td></tr></tbody></table><h5 id="进程的管理："><a href="#进程的管理：" class="headerlink" title="进程的管理："></a>进程的管理：</h5><h6 id="单进程的管理："><a href="#单进程的管理：" class="headerlink" title="单进程的管理："></a>单进程的管理：</h6><p>kill：结束某个进程</p><p><strong>语法</strong>：<code>kill 信号量 PID</code></p><table><thead><tr><th align="center">信号量</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-15:</td><td align="center">以正常的程序方式终止一个进程！！！</td></tr><tr><td align="center">-9 :</td><td align="center">立刻强制终止一个进程！！！（！！不能强制结束系统级别的进程）</td></tr><tr><td align="center">-2 :</td><td align="center">代表由键盘输入 [ctrl] + c  同样的动作;</td></tr><tr><td align="center">-1 :</td><td align="center">对于sshd这样的守护进程，重新读取一次参数的配置文件      (类似 reload)，如果进程为非守护进程，默认为终止进程; ！！</td></tr></tbody></table><h6 id="多进程的管理："><a href="#多进程的管理：" class="headerlink" title="多进程的管理："></a>多进程的管理：</h6><p>killall：结束基于某个程序运行进程。</p><p>语法：<code>killall 信号量 程序名/命令名</code></p><table><thead><tr><th align="center">信号源</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-15:</td><td align="center">以正常的程序方式终止一个进程！！！</td></tr><tr><td align="center">-9 :</td><td align="center">立刻强制终止一个进程！！！（！！不能强制结束系统级别的进程）</td></tr><tr><td align="center">-2 :</td><td align="center">代表由键盘输入 [ctrl] + c  同样的动作;</td></tr><tr><td align="center">-1 :</td><td align="center">对于sshd这样的守护进程，重新读取一次参数的配置文件      (类似 reload)，如果进程为非守护进程，默认为终止进程; ！！</td></tr></tbody></table><p><strong>案例：</strong></p><p>结束所有httpd的进程（如果没有可以先安装一下yum install -y httpd）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 httpd</span><br></pre></td></tr></table></figure><p>结束所有java的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 java</span><br></pre></td></tr></table></figure><h4 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h4><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><p><strong>前台任务：</strong>可以控制与执行命令的bash环境称为前台。</p><p><strong>后台任务：</strong>在操作系统中自行运行,你无法使用[ctrl]+c终止称为后台。</p><h5 id="管理："><a href="#管理：" class="headerlink" title="管理："></a>管理：</h5><h6 id="将前台任务放置后台暂停："><a href="#将前台任务放置后台暂停：" class="headerlink" title="将前台任务放置后台暂停："></a>将前台任务放置后台暂停：</h6><p>Ctrl + z就可以将前台的任务放置后台</p><p><strong>如何运行任务时，使其在后台运行：</strong></p><p>在运行命令之前加上”&amp;”</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp file1 file2 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>不是所有的任务都能够在后台运行的，比如需要与用户进行交互的程序或命令就不允许在后台运行， 比如vi文本编辑器</p></blockquote><h6 id="用来查看后台任务："><a href="#用来查看后台任务：" class="headerlink" title="用来查看后台任务："></a>用来查看<strong>后台任务</strong>：</h6><p><code>jobs</code></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-r</td><td>仅查看后台运行的任务</td></tr><tr><td>-s</td><td>仅查看后台暂停的任务</td></tr><tr><td>-l</td><td>查看后台的任务，并显示其PID</td></tr></tbody></table><h6 id="将后台任务调至前台："><a href="#将后台任务调至前台：" class="headerlink" title="将后台任务调至前台："></a>将后台任务调至前台：</h6><p><code>fg命令+jobnumber</code>来把后台任务调至前台。(无论在后台是暂停还是运行)</p><blockquote><p>fg命令不加jobnumber也是可以调后台的任务，但是默认就会调取后台带有+号的那个任务。最后放置后台的任务就会带有+号。</p></blockquote><blockquote><p>+ 表示最近一次防止在后台的任务</p></blockquote><p><strong>案例：</strong></p><p>调取2号任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fg 2</span><br></pre></td></tr></table></figure><p><strong>将后台任务修改为运行状态：</strong></p><p><code>bg命令 + jobnumber</code>可以将后台任务的暂停状态修改为运行状态。(交互式的应用无法修改为运行状态)</p><blockquote><p>bg命令不加jobnumber也是可以调后台的任务，但是默认就会调取后台带有+号的那个任务。（最后放置后台的任务就会带有+号。）</p></blockquote><p><strong>案例：</strong></p><p>修改2号任务的后台状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bg 2</span><br></pre></td></tr></table></figure><h4 id="打包-解包"><a href="#打包-解包" class="headerlink" title="打包,解包"></a>打包,解包</h4><h5 id="tar："><a href="#tar：" class="headerlink" title="tar："></a>tar：</h5><p>可以将一个文件/夹打包成一个文件。可以结合gzip、bzip2的算法对包文件进行相应的压缩和解压。</p><h6 id="语法："><a href="#语法：" class="headerlink" title="语法："></a><strong>语法：</strong></h6><p><strong>压缩</strong>： <code>tar [选项] newFileName.tar.gz sourceFileName</code></p><p><strong>解压</strong>：<code>tar [选项] fileName.tar.gz [-C /path]</code></p><p>选项：</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-c :</td><td align="center">建立打包文件,</td></tr><tr><td align="center">-t :</td><td align="center">查看打包文件的内容含有哪些文件</td></tr><tr><td align="center">-x :</td><td align="center">解打包或解压缩的功能,可以搭配-C(大写)在指定目录解开</td></tr><tr><td align="center">-j :</td><td align="center">通过bzip2的支持进行压缩/解压缩:此时文件最好为  *.tar.bz2</td></tr><tr><td align="center">-z :</td><td align="center">通过gzip的支持进行压缩/解压缩:此时文件最好为  *.tar.gz</td></tr><tr><td align="center">-v :</td><td align="center">在压缩/解压缩的过程中,将正在处理的文件名显示出来</td></tr><tr><td align="center">-f filename:</td><td align="center">-f 后面跟处理文件的全名称（路径+文件名+后缀名）</td></tr><tr><td align="center">-C 目录:</td><td align="center">这个选项用在<strong>解压的时候</strong>,若要在特定目录解压,可以使用这个选项</td></tr></tbody></table><blockquote><p>注：使用命令进行打包、压缩的时候，使用了什么算法，文件后缀名就一定要与其对应。</p></blockquote><p><strong>案例：</strong></p><p><strong>压缩：</strong></p><ol><li>使用gzip的算法进行打包压缩。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf install.log.tar.gz install.log</span><br></pre></td></tr></table></figure><p>注意tar的语法，<code>tar -zcvf    newFile   sourceFile</code></p><ol start="2"><li>使用bzip2的算法进行打包压缩。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf install.log.tar.bz2 install.log</span><br></pre></td></tr></table></figure><ol start="3"><li>如果想要压缩指定目录中的内容是，可以考虑使用绝对路径。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf [path]/newFileName.tar.gz [path]/sourceFile</span><br></pre></td></tr></table></figure><p><strong>解压：</strong></p><ol><li>将一个压缩包文件解压到当前目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf install.log.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>执行完成之后，文件会在当前的目录下。</p></blockquote><p>tar -zxvf install.log.tar.gz </p><ol start="2"><li>将一个压缩包文件解压到指定目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf install.log.tar.gz -C /</span><br></pre></td></tr></table></figure><ol start="3"><li>只解压包中的某个文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf etc.tar.gz etc/shells</span><br></pre></td></tr></table></figure><ol start="4"><li>配置jdk环境变量：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u131-linux-x64.tar.gz</span><br><span class="line">pwd  # 复制路径</span><br><span class="line">vim /etc/profile   # profile文件是系统环境变量的配置文件</span><br></pre></td></tr></table></figure><p>在该文件的最后一行添加内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=[path]</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>保存退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>使环境变量生效</p>]]></content>
      
      
      <categories>
          
          <category> 大数据学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录复制密钥时没反应</title>
      <link href="/2019/11/14/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_linux_1/"/>
      <url>/2019/11/14/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_linux_1/</url>
      
        <content type="html"><![CDATA[<center>ssh免密登录复制密钥时没反应</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>ssh免密登录复制密钥时没反应</p><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h4><p>今天在配置免密登录时,执行<code>ssh-copy-id 主机地址</code>时没有反应,检查了半天,原因如下</p><h3 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h3><p>静态地址和默认网关不匹配</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在控制台(Xshell)中输入setup,打开工具选项=&gt;网路配置=&gt;设备配置,选择你使用的设备.</p><p>将默认网关IP的前三位置为和静态IP一样的数值.</p><p>最后一位置为2.</p><p>保存并退出.</p><p><strong>重启网络</strong><code>service network restart</code></p><blockquote><p><strong>注意:</strong>一定要重启!!!!!,否则还是连不上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记_数量繁多的JVM垃圾收集器</title>
      <link href="/2019/11/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/11/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<center>读书总结<br>JVM的垃圾收集器好多,总结一下,以便记忆</center><a id="more"></a><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><h4 id="按新老年代可以分为"><a href="#按新老年代可以分为" class="headerlink" title="按新老年代可以分为:"></a>按新老年代可以分为:</h4><table><thead><tr><th align="center">分类</th><th align="center">收集器</th></tr></thead><tbody><tr><td align="center">Young generation(新生代)</td><td align="center">Serial<br>ParNew<br>Parallel Scavenge</td></tr><tr><td align="center">横跨上下</td><td align="center">G1</td></tr><tr><td align="center">Tenured generation(老年代)</td><td align="center">CMS<br>Serial Old(MSC)<br>Parallel Old</td></tr></tbody></table><blockquote><p>注意:没有最好的收集器,只有最适合的收集器</p></blockquote><h4 id="新年代-老年代"><a href="#新年代-老年代" class="headerlink" title="新年代?老年代?"></a>新年代?老年代?</h4><ul><li><strong>新生代 GC（Minor GC）</strong>:指发生新生代的的垃圾收集动作，Minor GC 非常频繁，回收速度一般也比较快。</li><li><strong>老年代 GC（Major GC/Full GC）</strong>:指发生在老年代的 GC，出现了 Major GC 经常会伴随至少一次的 Minor GC（并非绝对），Major GC 的速度一般会比 Minor GC 的慢 10 倍以上。</li></ul><h4 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h4><p>最基本,发展历史最悠久的收集器,JDK1.3.1之前新生代唯一选择.</p><ul><li><p><strong>单线程收集器</strong></p><blockquote><p>在进行垃圾收集时,必须暂停其他所有的工作线程,知道它收集结束.(Stop The World)</p></blockquote></li><li><p>虚拟机运行在Client模式下的默认新生代收集器</p></li></ul><p><strong>优点:</strong>简单而高效(以其他收集器的单线程比)</p><p><strong>算法:</strong> 新生代使用复制算法</p><h4 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h4><p>Serial收集器的多线程版本</p><ul><li><p>采用多条线程进行垃圾收集</p></li><li><p>其余行为与Serial收集器完全一致</p></li><li><p>许多运行在Server模式下的虚拟机首选的新生代收集器</p><blockquote><ul><li><strong>原因:</strong>目前除了Serial收集器,目前只有它能与CMS配合工作</li></ul></blockquote></li></ul><p><strong>缺点:</strong></p><ul><li>在单CPU的环境下绝对不会有比Serial收集器更好的效果,甚至在双CPU情况下有时候也超不了</li></ul><p><strong>参数:</strong></p><p><code>-XX:ParallelGCThreads</code>:限制垃圾收集线程数</p><h4 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h4><ul><li><p>新生代收集器</p></li><li><p>并行,多线程</p></li><li><p><strong>目标:</strong>达到一个可以控制的吞吐量(Throughput)</p><blockquote><p><strong>吞吐量:</strong>CPU用于运行用户代码的时间与CPU运行总消耗的时间的比值</p><p>吞吐量=运行用户代码的时间/( 运行用户代码的时间 +垃圾回收时间)</p><p>高吞吐量 =&gt; 高效利用CPU时间 =&gt; 尽快完成程序运行任务 =&gt; 适合后台计算不需要太多交互的任务</p></blockquote></li></ul><p><strong>算法:</strong>复制算法</p><p><strong>参数:</strong></p><ul><li><p><code>-XX:MaxGCPauseMillis</code>:控制最大垃圾停顿时间</p><blockquote><p>数值为大于0的毫秒数</p><p>GC停顿时间的缩短是以牺牲吞吐量和新生代空间来换取的</p></blockquote></li><li><p><code>-XX:GCTimeRatio</code>:直接设置吞吐量大小</p><blockquote><p>数值为大于0且小于100的整数(垃圾收集时间占用总时间比)</p></blockquote></li><li><p><code>-XX:+UseAdaptiveSizePolicy</code>:开关参数:GC自适应调节策略</p><blockquote><p>动态调整相关参数以提供最合适的停顿时间或者最带的吞吐量</p><p>与ParNew的重要区别</p></blockquote></li></ul><h4 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h4><ul><li><p>Serial的老年代版本</p></li><li><p>单线程</p></li><li><p><strong>算法:</strong>标记-整理算法</p></li><li><p>主要意义在于给Client模式下的虚拟机使用</p><blockquote><p>在Server模式下的两大用途:</p><ol><li><p>在JDK1.5之前与Scavenge收集器搭配使用</p></li><li><p>CMS的后备预案,在并发收集发生Concurrent Mode Failure时使用</p></li></ol></blockquote></li></ul><h4 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h4><ul><li>Parallel Scavenge的老年代版本</li><li>多线程</li><li><strong>算法:</strong>标记-整理算法</li><li>JDK1.6中才开始提供</li><li>在注重吞吐量以及CUO资源敏感的场合,优先考虑Parallel Scavenge+Parallel Old的组合</li></ul><h4 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h4><ul><li><p>以获取最短回收停顿时间为目标的收集器</p></li><li><p>符合需要服务相应速度的收集器</p></li><li><p><strong>算法:</strong>标记-清除算法</p><blockquote><p>分为四个步骤:</p><ul><li>初始标记 (CMS initial mark)                        需要Stop The World(很短)</li><li>并发标记(CMS concurrent mark)</li><li>重新标记(CMS remark)                                需要Stop The World(很短)</li><li>并发标记(CMS concurrent sweep)</li></ul></blockquote></li><li><p><strong>优点:</strong>(Concurrent Mark Sweep)</p><ul><li>并发收集</li><li>低停顿</li></ul></li><li><p><strong>缺点:</strong></p><ul><li><p>CMS收集器对CPU资源非常敏感</p></li><li><p>无法出路浮动垃圾(Floating Garbage)</p><blockquote><p>浮动垃圾:</p><p>CMS并发清理阶段 用户线程产生的新垃圾,这些垃圾在本次收集过程中无法处理,称之为浮动垃圾.</p><ul><li><p>Concurrent Mode Failure</p><blockquote><p><strong>原因:</strong>CMS预留内存无法满足用户线程使用</p><p><strong>系统备案方法:</strong>临时启动Serial Old收集器重新进行老年代的垃圾收集</p><p><strong>根本解决方案:</strong>调整<code>-XX:CMSInitiatingOccupancyFraction</code>,这个参数太高容易导致大量Concurrent Mode Failure,太低性能降低</p></blockquote></li></ul></blockquote></li><li><p>收集结束时会有大量空间碎片产生(标记-清除算法导致的)</p><blockquote><p>解决方案:</p><p>​    <code>+UseCMSCompactAtFullCollection</code>开关参数(默认开启),用于在CMS收集器顶不住要进行FullGC时,开启内存碎片整理合并</p><p>​    <code>-XX:CMSFullGCsBeforeCompaction</code>用于设置执行多少次不压缩的Full GC跟一次带压缩的(默认为0)</p></blockquote></li></ul></li></ul><h4 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h4><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.</strong></p><p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备一下特点：</p><ul><li><strong>并行与并发</strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li><strong>分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与 CMS 的“标记–清理”算法不同，G1 从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li><li><strong>可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。</li></ul><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong></li><li><strong>并发标记</strong></li><li><strong>最终标记</strong></li><li><strong>筛选回收</strong></li></ul><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)</strong>。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 GF 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p><p>总结完垃圾回收器会发现.其中提到了很多垃圾回收算法,那这些算法又分别是什么原理嘞?</p><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><h4 id="标记-清除-Mark-Sweep-算法"><a href="#标记-清除-Mark-Sweep-算法" class="headerlink" title="标记-清除(Mark-Sweep)算法"></a>标记-清除(Mark-Sweep)算法</h4><p>分为<strong>“标记”</strong>和<strong>“回收”</strong>两个阶段:首先标记出所有西药回收的对象,在标记完成后统一回收所有被标记的对象.</p><p><strong>缺点:</strong></p><ul><li><strong>效率</strong>:标记和清除两个过程效率都不高</li><li><strong>空间</strong>:会产生大量碎片空间,导致分配大对象时,无法找到足够的空间而提前触发垃圾回收动作.</li></ul><h4 id="复制-Copying-算法"><a href="#复制-Copying-算法" class="headerlink" title="复制(Copying)算法"></a>复制(Copying)算法</h4><p>为了解决效率而生</p><p><strong>原理:</strong> 将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。 </p><p><strong>优点:</strong>内存分配时不需要考虑内存碎片的情况,只需要移动顶部指针,按顺序分配内存即可,实现简单,运行高效.</p><p><strong>缺点</strong>:</p><ul><li>内存缩小为原来的一半</li></ul><p><strong>但是!</strong></p><p>现在商业虚拟机都用这种算法回收<strong>新生代</strong>.</p><blockquote><p>原因是新生代中的新对象98%都是”朝生夕死”所以并不需要按1:1分配内存</p></blockquote><p><strong>具体实现:</strong></p><p>将内存分成一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中一块Survivor.回收时,将还存活的对象复制到另一块Surivior中,并清理用过的两块内存.</p><p><strong>HotSpot虚拟机默认Eden和Survivor的大小比例为8:1</strong></p><p><strong>如果剩的过多怎么办?</strong></p><ul><li><p>依赖其他内存(老年代)进行<strong>分配担保(Handle Promotion).</strong></p><blockquote><p>怎么理解分配担保?</p><p>​        就是我(非运用中的Survivor)保证借钱能还(前两个剩多少对象都能放下),不只是你我之间的承诺,还有担保人(老年代内存),如果我还不了,你可以问担保人要钱(多余的对象存入老年代).</p></blockquote></li></ul><h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p><strong>缘由:</strong>复制回收算法在对象存活率高的时候,效率变低,不浪费50%的空间又需要分配担保,<strong>不适合老年代使用</strong>.</p><p><strong>原理:</strong>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。 </p><h4 id="分代回收算法"><a href="#分代回收算法" class="headerlink" title="分代回收算法"></a>分代回收算法</h4><p>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p><p><strong>比如在新生代中，每次收集都会有大量对象死去，所以可以选择复制算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</strong></p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的enum类</title>
      <link href="/2019/11/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringBoot_%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE_1/"/>
      <url>/2019/11/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringBoot_%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE_1/</url>
      
        <content type="html"><![CDATA[<center>    SpringBootの实战笔记<br>所谓实践出真知<br>学习学习<br></center><a id="more"></a><p>​        今天在做实战项目时,发现了一个以前没见过的点,视频作者将向前端传递错误信息封装成了<code>enum</code>类型,这是我之前没用过的(之前就直接返回了) .</p><p>​        于是就百度了一下:</p><p>​        这种方法是在前后端分离的项目中使用的,用于向前端传递错误信息的设置,将常量封装到一个类中，并且要提供相应的构造器，还可以提供更多的方法，这是常量所没有的性质。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CommentTypeEnum &#123;</span><br><span class="line">    QUESTION(<span class="number">1</span>),</span><br><span class="line">    COMMENT(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    CommentTypeEnum(Integer type) &#123;<span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(Integer type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (CommentTypeEnum commentTypeEnum : CommentTypeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (commentTypeEnum.getType() == type) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用场景:<ol><li>在web 开发项目中实体类型使用枚举类型</li></ol></li></ul><blockquote><p>在项目中使用枚举 的地方不是很多，将常量封装成类，其实还可以封装成静态的 <code>public static final</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Linux_初试Linux</title>
      <link href="/2019/11/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Linux_%E5%88%9D%E8%AF%95Linux/"/>
      <url>/2019/11/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Linux_%E5%88%9D%E8%AF%95Linux/</url>
      
        <content type="html"><![CDATA[<center>    正好赶上这门儿课程<br>    学习学习</center><a id="more"></a><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ul><li>免费开源</li><li>基于UNIX</li><li>多用户</li><li>多任务</li><li>支持多线程和多CPU</li><li>支持多平台</li></ul><h4 id="学习原因"><a href="#学习原因" class="headerlink" title="学习原因:"></a>学习原因:</h4><ul><li>企业里服务器多用Linux</li><li>大数据基础运行平台</li></ul><h4 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本:"></a>发行版本:</h4><table><thead><tr><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">CentOS</td><td>它诞生于RedHat企业Linux系统中的免费源代码，简单的说就是把RedHat系统中的收费软件卸载之后重新发布。后加入Red Hat</td></tr><tr><td align="center">Red Hat</td><td>红帽子操作系统，非常不错的企业级Linux，但是由于该系统收费，很多中小型企业都弃用了</td></tr><tr><td align="center">其他版本</td><td>Ubuntu、Debian、等</td></tr></tbody></table><h4 id="与CentOS的第一面"><a href="#与CentOS的第一面" class="headerlink" title="与CentOS的第一面"></a>与CentOS的第一面</h4><p><strong>CentOS系统的一个小特点</strong>：</p><p>​        安装完成之后，系统启动时，默认不会启动网络连接，需要手动开启。</p><h5 id="启动网卡"><a href="#启动网卡" class="headerlink" title="启动网卡"></a><strong>启动网卡</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifup eth0</span><br></pre></td></tr></table></figure><blockquote><p>表示启动CentOS系统中名为eth0的网卡。</p></blockquote><h5 id="设置CentOS的网卡开机自启"><a href="#设置CentOS的网卡开机自启" class="headerlink" title="设置CentOS的网卡开机自启"></a><strong>设置CentOS的网卡开机自启</strong></h5><ul><li>打开配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>注释：</p><table><thead><tr><th align="center">字段</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">vi</td><td align="center">linux系统内核自带的文本编辑器</td></tr><tr><td align="center">etc</td><td align="center">Linux系统中所有的配置文件存放目录</td></tr><tr><td align="center">sysconfig</td><td align="center">系统配置文件的存放目录</td></tr><tr><td align="center">network-scripts</td><td align="center">网络配置文件的存放目录</td></tr><tr><td align="center">ifcfg-eth0</td><td align="center">具体的网卡配置文件  ifconfig:用来查看当前系统的网络连接，类似于Windows的ipconfig</td></tr></tbody></table><ul><li><p>修改文件内容:</p><p>按下键盘的”i”，进入到了编辑模式，通过方向键移动到该行，将内容修改：</p><p>ONBOOT=no ==&gt; ONBOOT=yes</p><p>按键盘esc键，退出编辑模式。输入”<strong>:wq</strong>“，保存退出。如果不想保存，可以输入q!，来强制退出。</p></li></ul><h4 id="CentOS作为服务器使用"><a href="#CentOS作为服务器使用" class="headerlink" title="CentOS作为服务器使用"></a>CentOS作为服务器使用</h4><h5 id="如何设置一个静态IP"><a href="#如何设置一个静态IP" class="headerlink" title="如何设置一个静态IP"></a>如何设置一个静态IP</h5><p>​    <strong>为什么要设置一个静态IP：</strong></p><p>​    服务器拥有一个静态IP是因为方便客户端的访问和提供服务，企业中的所有服务器都是一个固定IP(静态IP)地址。</p><p>​    <strong>设置静态IP</strong>：</p><ol><li><p>setup</p></li><li><p>选择”网络”</p></li><li><p>选择”设备”</p></li><li><p>选择”eth0 <strong>*****</strong>“</p></li><li><p>使用方向键将光标移动到”使用DHCP”，敲击”空格”取消它的勾选。</p><ol><li><p>静态IP：与服务器当前所使用的IP地址保持相同（192.168.89.128）</p></li><li><p>子网掩码：255.255.255.0</p></li><li><p>网关IP：192.168.89.2 与静态IP地址的前三段保持一致，最后一位改为2。</p></li><li><p>两个DNS：114.114.114.114          8.8.8.8</p></li></ol></li></ol><p>接下来，使用tab键选择：</p><ul><li>确定 =&gt; 保存 =&gt; 保存并退出 =&gt; 退出</li></ul><p><strong>完成了静态IP地址的配置,为了兼容性，重启网络服务：(很重要,我就栽了)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br><span class="line">或</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure><p>上述两条命令都能实现网络服务的重启。需要注意当前账户是否有执行权限。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><ol><li><p>绝对路径：</p><p>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</p></li><li><p>相对路径：</p><p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法啦.</p></li></ol><p><strong>Linux系统目录中的一些重要的目录:</strong></p><table><thead><tr><th>作用</th><th>名称</th></tr></thead><tbody><tr><td>(家)目录</td><td>/root,/home/{UserName}</td></tr><tr><td>普通用户可执行文件</td><td>/bin,/usr/bin,/usr/local/bin</td></tr><tr><td>系统管理员可执行文件</td><td>/sbin,/usr/sbin,/usr/local/sbin</td></tr><tr><td>配置文件目录</td><td>/etc</td></tr><tr><td>临时文件目录</td><td>/tmp</td></tr><tr><td>存放应用程序和文件</td><td>/usr</td></tr><tr><td>启动linux的核心文件</td><td>/boot</td></tr><tr><td>额外安装软件（mysql）默认为空</td><td>/opt</td></tr><tr><td>服务器数据</td><td>/var  , /srv</td></tr><tr><td>系统信息</td><td>/proc，/sys</td></tr><tr><td>共享库</td><td>/lib,/usr/lib,/usr/local/lib</td></tr><tr><td>其它挂载点</td><td>/media,/mnt</td></tr></tbody></table><blockquote><p><strong>注意：文件或目录名：&lt;=255个字符、区分大小写、不能使用“/”，不允许创建与系统已有的相同名字的目录。因为不好区分，第二点，防止某些软件无法自动进行识别。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大数据学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_SpringMVC_入门到实战</title>
      <link href="/2019/10/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringMVC_%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/"/>
      <url>/2019/10/22/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringMVC_%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<center>    SpringMVCの笔记<br>很常见后端框架<br>学习学习<br></center><a id="more"></a><p>Spring MVC 是目前主流的实现 MVC 设计模式的企业级开发框架，Spring 框架的一个子模块，无需整合，开发起来更加便捷。</p><h4 id="什么是-MVC-设计模式？"><a href="#什么是-MVC-设计模式？" class="headerlink" title="什么是 MVC 设计模式？"></a>什么是 MVC 设计模式？</h4><p>将应用程序分为 Controller、Model、View 三层，Controller 接收客户端请求，调用 Model 生成业务数据，传递给 View。</p><p>Spring MVC 就是对这套流程的封装，屏蔽了很多底层代码，开放出接口，让开发者可以更加轻松、便捷地完成基于 MVC 模式的 Web 开发。</p><h4 id="Spring-MVC-的核心组件"><a href="#Spring-MVC-的核心组件" class="headerlink" title="Spring MVC 的核心组件"></a>Spring MVC 的核心组件</h4><ul><li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。</li><li>Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。</li><li>HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。</li><li>HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</li><li>HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li><li>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</li><li>ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。</li><li>ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li></ul><h4 id="Spring-MVC-的工作流程"><a href="#Spring-MVC-的工作流程" class="headerlink" title="Spring MVC 的工作流程"></a>Spring MVC 的工作流程</h4><ul><li>客户端请求被 DisptacherServlet 接收。</li><li>根据 HandlerMapping 映射到 Handler。</li><li>生成 Handler 和 HandlerInterceptor。</li><li>Handler 和 HandlerInterceptor 以 HandlerExecutionChain 的形式一并返回给 DisptacherServlet。</li><li>DispatcherServlet 通过 HandlerAdapter 调用 Handler 的方法完成业务逻辑处理。</li><li>Handler 返回一个 ModelAndView 给 DispatcherServlet。</li><li>DispatcherServlet 将获取的 ModelAndView 对象传给 ViewResolver 视图解析器，将逻辑视图解析为物理视图 View。</li><li>ViewResovler 返回一个 View 给 DispatcherServlet。</li><li>DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）。</li><li>DispatcherServlet 将渲染后的结果响应给客户端。</li></ul><p>Spring MVC 流程非常复杂，实际开发中很简单，因为大部分的组件不需要开发者创建、管理，只需要通过配置文件的方式完成配置即可，真正需要开发者进行处理的只有 Handler 、View。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ul><li>清晰的角色划分</li><li>灵活的配置功能</li><li>提供了大量的控制器接口和实现类</li><li>分离View层的实现</li><li>国际化支持</li><li>面向接口编程</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用:"></a>如何使用:</h4><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 web.xml 中配置 DispatcherServlet。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wuyun"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建 Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-注解"><a href="#Spring-MVC-注解" class="headerlink" title="Spring MVC 注解"></a>Spring MVC 注解</h3><ul><li>@RequestMapping </li></ul><p>Spring MVC 通过 @RequestMapping 注解将 URL 请求与业务方法进行映射，在 Handler 的类定义处以及方法定义处都可以添加 @RequestMapping ，在类定义处添加，相当于客户端多了一层访问路径。</p><ul><li>@Controller</li></ul><p>@Controller 在类定义处添加，将该类交个 IoC 容器来管理（结合 springmvc.xml 的自动扫描配置使用），同时使其成为一个控制器，可以接收客户端请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestMapping 相关参数</li></ul><p>1、value：指定 URL 请求的实际地址，是 @RequestMapping 的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、method：指定请求的 method 类型，GET、POST、PUT、DELET。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示 index 方法只能接收 GET 请求。</p><p>3、params：指定请求中必须包含某些参数，否则无法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>,method = RequestMethod.GET,params = &#123;<span class="string">"name"</span>,<span class="string">"id=10"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示请求中必须包含 name 和 id 两个参数，同时 id 的值必须是 10。</p><p>关于参数绑定，在形参列表中通过添加 @RequestParam 注解完成 HTTP 请求参数与业务方法形参的映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>,method = RequestMethod.GET,params = &#123;<span class="string">"name"</span>,<span class="string">"id=10"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String str,@<span class="title">RequestParam</span><span class="params">(<span class="string">"id"</span>)</span> <span class="keyword">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    System.out.println(<span class="string">"执行了index..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码表示将请求的参数 name 和 id 分别赋给了形参 str 和 age ，同时自动完成了数据类型转换，将 “10” 转为了 int 类型的 10，再赋给 age，这些工作都是由 HandlerAdapter 来完成的。</p><p>Spring MVC 也支持 RESTful 风格的 URL。</p><p>传统类型：<a href="http://localhost:8080/hello/index?name=zhangsan&amp;id=10" target="_blank" rel="noopener">http://localhost:8080/hello/index?name=zhangsan&amp;id=10</a></p><p>REST：<a href="http://localhost:8080/hello/index/zhangsan/10" target="_blank" rel="noopener">http://localhost:8080/hello/index/zhangsan/10</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rest/&#123;name&#125;/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">rest</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name,@<span class="title">PathVariable</span><span class="params">(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 @PathVariable 注解完成请求参数与形参的映射。</p><ul><li>映射 Cookie</li></ul><p>Spring MVC 通过映射可以直接在业务方法中获取 Cookie 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cookie"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>)</span> String sessionId)</span>&#123;</span><br><span class="line">    System.out.println(sessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 JavaBean 绑定参数</li></ul><p>Spring MVC 会根据请求参数名和 JavaBean 属性名进行自动匹配，自动为对象填充属性值，同时支持及联属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/hello/save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户id：&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户地址：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.value"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"注册"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/save"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现中文乱码问题，只需在 web.xml 添加 Spring MVC 自带的过滤器即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP 页面的转发和重定向：</li></ul><p>Spring MVC 默认是以转发的形式响应 JSP。</p><p>1、转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/forward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">    <span class="comment">//        return "index";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-数据绑定"><a href="#Spring-MVC-数据绑定" class="headerlink" title="Spring MVC 数据绑定"></a>Spring MVC 数据绑定</h3><p>数据绑定：在后端的业务方法中直接获取客户端 HTTP 请求中的参数，将请求参数映射到业务方法的形参中，Spring MVC 中数据绑定的工作是由 HandlerAdapter 来完成的。</p><ul><li>基本数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/baseType"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">baseType</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ResponseBody 表示 Spring MVC 会直接将业务方法的返回值响应给客户端，如果不加 @ResponseBody 注解，Spring MVC 会将业务方法的放回值传递给 DispatcherServlet，再由 DisptacherServlet 调用 ViewResolver 对返回值进行解析，映射到一个 JSP 资源。</p><ul><li>包装类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/packageType"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">packageType</span><span class="params">(@RequestParam(value = <span class="string">"num"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">"0"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包装类可以接收 null，当 HTTP 请求没有参数时，使用包装类定义形参的数据类型，程序不会抛出异常。</p><p>@RequestParam</p><p>value = “num”：将 HTTP 请求中名为 num 的参数赋给形参 id。</p><p>requried：设置 num 是否为必填项，true 表示必填，false 表示非必填，可省略。</p><p>defaultValue = “0”：如果 HTTP 请求中没有 num 参数，默认值为0.</p><ul><li>数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/array"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 表示该控制器会直接将业务方法的返回值响应给客户端，不进行视图解析。</p><p>@Controller 表示该控制器的每一个业务方法的返回值都会交给视图解析器进行解析，如果只需要将数据响应给客户端，而不需要进行视图解析，则需要在对应的业务方法定义处添加 @ResponseBody。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/array"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/array"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">array</span><span class="params">(String[] name)</span></span>&#123;</span><br><span class="line">        String str = Arrays.toString(name);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>List</li></ul><p>Spring MVC 不支持 List 类型的直接转换，需要对 List 集合进行包装。</p><p>集合封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/data/list"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[2].id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users[2].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(UserList userList)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(User user:userList.getUsers())&#123;</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理 @ResponseBody 中文乱码，在 springmvc.xml 中配置消息转换器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span> <span class="attr">value</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Map</li></ul><p>自定义封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(UserMap userMap)</span></span>&#123;</span><br><span class="line">    StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(String key:userMap.getUsers().keySet())&#123;</span><br><span class="line">        User user = userMap.getUsers().get(key);</span><br><span class="line">        str.append(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/data/map"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户<span class="number">1</span>编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['a'].id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">1</span>名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['a'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['b'].id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">2</span>名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['b'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['c'].id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户<span class="number">3</span>名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"users['c'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>JSON</li></ul><p>客户端发生 JSON 格式的数据，直接通过 Spring MVC 绑定到业务方法的形参中。</p><p>处理 Spring MVC 无法加载静态资源，在 web.xml 中添加配置即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">           <span class="keyword">var</span> user = &#123;</span><br><span class="line">               <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">               <span class="string">"name"</span>:<span class="string">"张三"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url:<span class="string">"/data/json"</span>,</span><br><span class="line">               data:JSON.stringify(user),</span><br><span class="line">               type:<span class="string">"POST"</span>,</span><br><span class="line">               contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">               dataType:<span class="string">"JSON"</span>,</span><br><span class="line">               success:function(data)&#123;</span><br><span class="line">                   alter(data.id+<span class="string">"---"</span>+data.name);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">json</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.setId(<span class="number">6</span>);</span><br><span class="line">    user.setName(<span class="string">"张六"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 中的 JSON 和 JavaBean 的转换需要借助于 fastjson，pom.xml 引入相关依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc.xml 添加 fastjson 配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span> <span class="attr">value</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-模型数据解析"><a href="#Spring-MVC-模型数据解析" class="headerlink" title="Spring MVC 模型数据解析"></a>Spring MVC 模型数据解析</h3><p>JSP 四大作用域对应的内置对象：pageContext、request、session、application。</p><p>模型数据的绑定是由 ViewResolver 来完成的，实际开发中，我们需要先添加模型数据，再交给 ViewResolver 来绑定。</p><p>Spring MVC 提供了以下几种方式添加模型数据：</p><ul><li>Map</li><li>Model</li><li>ModelAndView</li><li>@SessionAttribute</li><li>@ModelAttribute</li></ul><blockquote><p>将模式数据绑定到 request 对象。</p></blockquote><p>1、Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/map"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(Map&lt;String,User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    map.put(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;requestScope.user&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、Model</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/model"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">model</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、ModelAndView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"view"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">"/view.jsp"</span>);</span><br><span class="line">    modelAndView.setView(view);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"view"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">"/view.jsp"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view);</span><br><span class="line">    modelAndView.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"user"</span>,user);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"view"</span>,map);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    Map&lt;String,User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"user"</span>,user);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">"/view.jsp"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view,map);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"view"</span>,<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAndView8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    View view = <span class="keyword">new</span> InternalResourceView(<span class="string">"/view.jsp"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(view,<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、HttpServletRequest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/request"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">request</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、@ModelAttribute</p><ul><li>定义一个方法，该方法专门用来返回要填充到模型数据中的对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(Map&lt;String,User&gt; map)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    map.put(<span class="string">"user"</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务方法中无需再处理模型数据，只需返回视图即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/modelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">modelAttribute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将模型数据绑定到 session 对象</p></blockquote><p>1、直接使用原生的 Servlet API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/session"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/session2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">session2</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、@SessionAttribute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123;<span class="string">"user"</span>,<span class="string">"address"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了 key = “user”、key = “address” 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(types = &#123;User.class,Address.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了数据类型是 User 、Address 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><blockquote><p>将模型数据绑定到 application 对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/application"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">application</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    ServletContext application = request.getServletContext();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">"张三"</span>);</span><br><span class="line">    application.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-自定义数据转换器"><a href="#Spring-MVC-自定义数据转换器" class="headerlink" title="Spring MVC 自定义数据转换器"></a>Spring MVC 自定义数据转换器</h3><p>数据转换器是指将客户端 HTTP 请求中的参数转换为业务方法中定义的形参，自定义表示开发者可以自主设计转换的方式，HandlerApdter 已经提供了通用的转换，String 转 int，String 转 double，表单数据的封装等，但是在特殊的业务场景下，HandlerAdapter 无法进行转换，就需要开发者自定义转换器。</p><p>客户端输入 String 类型的数据 “2019-03-03”，自定义转换器将该数据转为 Date 类型的对象。</p><ul><li>创建 DateConverter 转换器，实现 Conveter 接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateConverter</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="keyword">this</span>.pattern);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = simpleDateFormat.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml 配置转换器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wuyun.converter.DateConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span> <span class="attr">value</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/converter/date"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        请输入日期:&lt;input type=<span class="string">"text"</span> name=<span class="string">"date"</span>/&gt;(yyyy-MM-dd)&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/converter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/date"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 转 Student</p><p>StudentConverter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String[] args = s.split(<span class="string">"-"</span>);</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(Long.parseLong(args[<span class="number">0</span>]));</span><br><span class="line">        student.setName(args[<span class="number">1</span>]);</span><br><span class="line">        student.setAge(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wuyun.converter.DateConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.wuyun.converter.StudentConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span> <span class="attr">value</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/converter/student"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        请输入学生信息：&lt;input type=<span class="string">"text"</span> name=<span class="string">"student"</span>/&gt;(id-name-age)&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/student"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">student</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-REST"><a href="#Spring-MVC-REST" class="headerlink" title="Spring MVC REST"></a>Spring MVC REST</h3><p>REST：Representational State Transfer，资源表现层状态转换，是目前比较主流的一种互联网软件架构，它结构清晰、标准规范、易于理解、便于扩展。</p><ul><li>资源（Resource）</li></ul><p>网络上的一个实体，或者说网络中存在的一个具体信息，一段文本、一张图片、一首歌曲、一段视频等等，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每个资源都有对应的一个特定的 URI，要获取该资源时，只需要访问对应的 URI 即可。</p><ul><li>表现层（Representation）</li></ul><p>资源具体呈现出来的形式，比如文本可以用 txt 格式表示，也可以用 HTML、XML、JSON等格式来表示。</p><ul><li>状态转换（State Transfer）</li></ul><p>客户端如果希望操作服务器中的某个资源，就需要通过某种方式让服务端发生状态转换，而这种转换是建立在表现层之上的，所有叫做”表现层状态转换”。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>URL 更加简洁。</li><li>有利于不同系统之间的资源共享，只需要遵守一定的规范，不需要进行其他配置即可实现资源共享。</li></ul><h4 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h4><p>REST 具体操作就是 HTTP 协议中四个表示操作方式的动词分别对应 CRUD 基本操作。</p><p>GET 用来表示获取资源。</p><p>POST 用来表示新建资源。</p><p>PUT 用来表示修改资源。</p><p>DELETE 用来表示删除资源。</p><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.wuyun.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RESTHandeler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/json;charset=UTF-8"</span>);</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestBody Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(@RequestBody Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentRepositoryImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.repository.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.wuyun.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; studentMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        studentMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        studentMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">"张三"</span>,<span class="number">22</span>));</span><br><span class="line">        studentMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">"李四"</span>,<span class="number">23</span>));</span><br><span class="line">        studentMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">"王五"</span>,<span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentMap.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        studentMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-文件上传下载"><a href="#Spring-MVC-文件上传下载" class="headerlink" title="Spring MVC 文件上传下载"></a>Spring MVC 文件上传下载</h3><blockquote><p>单文件上传</p></blockquote><p>底层是使用 Apache fileupload 组件完成上传，Spring MVC 对这种方式进行了封装。</p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/file/upload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"file"</span> name=<span class="string">"img"</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;img src=<span class="string">"$&#123;path&#125;"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>1、input 的 type 设置为 file。</p><p>2、form 的 method 设置为 post（get 请求只能将文件名传给服务器）</p><p>3、from 的 enctype 设置为 multipart-form-data（如果不设置只能将文件名传给服务器）</p><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile img, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(img.getSize()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取保存上传文件的file路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">"file"</span>);</span><br><span class="line">            <span class="comment">//获取上传的文件名</span></span><br><span class="line">            String name = img.getOriginalFilename();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                img.transferTo(file);</span><br><span class="line">                <span class="comment">//保存上传之后的文件路径</span></span><br><span class="line">                request.setAttribute(<span class="string">"path"</span>,<span class="string">"/file/"</span>+name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"upload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置上传组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml 添加如下配置，否则客户端无法访问 png</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多文件上传</p></blockquote><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSP</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/file/uploads"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">        file1:&lt;input type=<span class="string">"file"</span> name=<span class="string">"imgs"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        file2:&lt;input type=<span class="string">"file"</span> name=<span class="string">"imgs"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        file3:&lt;input type=<span class="string">"file"</span> name=<span class="string">"imgs"</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;files&#125;"</span> <span class="keyword">var</span>=<span class="string">"file"</span> &gt;</span><br><span class="line">        &lt;img src=<span class="string">"$&#123;file&#125;"</span> width=<span class="string">"300px"</span>&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploads"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploads</span><span class="params">(MultipartFile[] imgs,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile img:imgs)&#123;</span><br><span class="line">        <span class="keyword">if</span>(img.getSize()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取保存上传文件的file路径</span></span><br><span class="line">            String path = request.getServletContext().getRealPath(<span class="string">"file"</span>);</span><br><span class="line">            <span class="comment">//获取上传的文件名</span></span><br><span class="line">            String name = img.getOriginalFilename();</span><br><span class="line">            File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                img.transferTo(file);</span><br><span class="line">                <span class="comment">//保存上传之后的文件路径</span></span><br><span class="line">                files.add(<span class="string">"/file/"</span>+name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(<span class="string">"files"</span>,files);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"uploads"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下载</p></blockquote><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href="/file/download/1"&gt;1.png&lt;/a&gt;</span><br><span class="line">    &lt;a href="/file/download/2"&gt;2.png&lt;/a&gt;</span><br><span class="line">    &lt;a href="/file/download/3"&gt;3.png&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/download/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name, HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">        name += <span class="string">".png"</span>;</span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">"file"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(path,name);</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            response.setContentType(<span class="string">"application/forc-download"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span>+name);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = response.getOutputStream();</span><br><span class="line">                outputStream.write(FileUtils.readFileToByteArray(file));</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-MVC-表单标签库"><a href="#Spring-MVC-表单标签库" class="headerlink" title="Spring MVC 表单标签库"></a>Spring MVC 表单标签库</h3><ul><li>Handler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"tag"</span>);</span><br><span class="line">    Student student = <span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">"张三"</span>,<span class="number">22</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"student"</span>,student);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">"student"</span>&gt;</span><br><span class="line">        学生ID：&lt;form:input path=<span class="string">"id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生姓名：&lt;form:input path=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        学生年龄：&lt;form:input path=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>1、JSP 页面导入 Spring MVC 表单标签库，与导入 JSTL 标签库的语法非常相似，前缀 prefix 可以自定义，通常定义为 from。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br></pre></td></tr></table></figure><p>2、将 form 表单与模型数据进行绑定，通过 modelAttribute 属性完成绑定，将 modelAttribute 的值设置为模型数据对应的 key 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Handeler:modelAndView.addObject(<span class="string">"student"</span>,student);</span><br><span class="line">JSP:&lt;form:form modelAttribute=<span class="string">"student"</span>&gt;</span><br></pre></td></tr></table></figure><p>3、form 表单完成绑定之后，将模型数据的值取出绑定到不同的标签中，通过设置标签的 path 属性完成，将 path 属性的值设置为模型数据对应的属性名即可。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学生ID：&lt;form:input path=<span class="string">"id"</span>/&gt;&lt;br/&gt;</span><br><span class="line">学生姓名：&lt;form:input path=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">学生年龄：&lt;form:input path=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="常用的表单标签"><a href="#常用的表单标签" class="headerlink" title="常用的表单标签"></a>常用的表单标签</h4><ul><li>from</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:from modelAttribute=<span class="string">"student"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的<code>&lt;form&gt;&lt;/from&gt;</code>，通过 modelAttribute 属性绑定具体的模型数据。</p><ul><li>input</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:input path=<span class="string">"name"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;text&quot;/&gt;</code>，from 标签绑定的是模型数据，input 标签绑定的是模型数据中的属性值，通过 path 属性可以与模型数据中的属性名对应，并且支持及联操作。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;from:input path=<span class="string">"address.name"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>password</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:password path=<span class="string">"password"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;password&quot;/&gt;</code>，通过 path 属性与模型数据的属性值进行绑定，password 标签的值不会在页面显示。</p><ul><li>checkbox</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkbox path=<span class="string">"hobby"</span> value=<span class="string">"读书"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.setFlag(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkbox：&lt;form:checkbox path="flag" value="flag"&gt;&lt;/form:checkbox&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，通过 path 与模型数据的属性值进行绑定，可以绑定 boolean、数组和集合。</p><p>如果绑定 boolean 值，若该变量的值为 true，则表示该复选框选中，否则表示不选中。</p><p>如果绑定数组或者集合，数组/集合中的元素等于 checkbox 的 value 值，则选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">"读书"</span>,<span class="string">"看电影"</span>,<span class="string">"玩游戏"</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">"student"</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">爱好：&lt;form:checkbox path="hobby" value="摄影"&gt;&lt;/form:checkbox&gt;摄影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path="hobby" value="读书"&gt;&lt;/form:checkbox&gt;读书&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path="hobby" value="听音乐"&gt;&lt;/form:checkbox&gt;听音乐&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path="hobby" value="看电影"&gt;&lt;/form:checkbox&gt;看电影&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path="hobby" value="旅游"&gt;&lt;/form:checkbox&gt;旅游&lt;br/&gt;</span><br><span class="line">&lt;form:checkbox path="hobby" value="玩游戏"&gt;&lt;/form:checkbox&gt;玩游戏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>checkboxes</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:checkboxes items=$&#123;student.hobby&#125; path=<span class="string">"selecHobby"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，是对 <code>&lt;form:checkbox/&gt;</code> 的一种简化，需要结合 items 和 path 属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的集合或数组，可以这样理解，items 为全部可选集合，path 为默认的选中集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student.setHobby(Arrays.asList(<span class="string">"摄影"</span>,<span class="string">"读书"</span>,<span class="string">"听音乐"</span>,<span class="string">"看电影"</span>,<span class="string">"旅游"</span>,<span class="string">"玩游戏"</span>));</span><br><span class="line">student.setSelectHobby(Arrays.asList(<span class="string">"摄影"</span>,<span class="string">"读书"</span>,<span class="string">"听音乐"</span>));</span><br><span class="line">modelAndView.addObject(<span class="string">"student"</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爱好：&lt;form:checkboxes path=<span class="string">"selectHobby"</span> items=<span class="string">"$&#123;student.hobby&#125;"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是 path 可以直接绑定模型数据的属性值，items 则需要通过 EL 表达式的形式从域对象中获取数据，不能直接写属性名。</p><ul><li>rabiobutton</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;from:radiobutton path=<span class="string">"radioId"</span> value=<span class="string">"0"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一个 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，绑定的数据与标签的 value 值相等则为选中，否则不选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setRadioId(<span class="number">1</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">"student"</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radiobutton:&lt;form:radiobutton path=<span class="string">"radioId"</span> value=<span class="string">"1"</span>/&gt;radiobutton&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>radiobuttons</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:radiobuttons itmes=<span class="string">"$&#123;student.grade&#125;"</span> path=<span class="string">"selectGrade"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，这里需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，items 为全部的可选类型，path 为默认选中的选项，用法与 <code>&lt;form:checkboxes/&gt;</code> 一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; gradeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">gradeMap.put(<span class="number">1</span>,<span class="string">"一年级"</span>);</span><br><span class="line">gradeMap.put(<span class="number">2</span>,<span class="string">"二年级"</span>);</span><br><span class="line">gradeMap.put(<span class="number">3</span>,<span class="string">"三年级"</span>);</span><br><span class="line">gradeMap.put(<span class="number">4</span>,<span class="string">"四年级"</span>);</span><br><span class="line">gradeMap.put(<span class="number">5</span>,<span class="string">"五年级"</span>);</span><br><span class="line">gradeMap.put(<span class="number">6</span>,<span class="string">"六年级"</span>);</span><br><span class="line">student.setGradeMap(gradeMap);</span><br><span class="line">student.setSelectGrade(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">"student"</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学生年级：&lt;form:radiobuttons items=<span class="string">"$&#123;student.gradeMap&#125;"</span> path=<span class="string">"selectGrade"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>select</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select items=<span class="string">"$&#123;student.citys&#125;"</span> path=<span class="string">"selectCity"</span>/&gt;</span><br></pre></td></tr></table></figure><p>渲染的是 HTML 中的一个 <code>&lt;select/&gt;</code> 标签，需要结合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，用法与 <code>&lt;from:radiobuttons/&gt;</code>一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; cityMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">cityMap.put(<span class="number">1</span>,<span class="string">"北京"</span>);</span><br><span class="line">cityMap.put(<span class="number">2</span>,<span class="string">"上海"</span>);</span><br><span class="line">cityMap.put(<span class="number">3</span>,<span class="string">"广州"</span>);</span><br><span class="line">cityMap.put(<span class="number">4</span>,<span class="string">"深圳"</span>);</span><br><span class="line">student.setCityMap(cityMap);</span><br><span class="line">student.setSelectCity(<span class="number">3</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">"student"</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select items="$&#123;student.cityMap&#125;" path="selectCity"&gt;&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>options</li></ul><p><code>form:select</code> 结合 <code>form:options</code> 的使用，<code>from:select</code> 只定义 path 属性，在 <code>form:select</code> 标签内部添加一个子标签 <code>form:options</code> ，设置 items 属性，获取被遍历的集合。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">"selectCity"</span>&gt;</span><br><span class="line">  &lt;form:options items="$&#123;student.cityMap&#125;"&gt;&lt;/form:options&gt;</span><br><span class="line">&lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li><p>option</p><p><code>form:select</code> 结合 <code>form:option</code> 的使用，<code>from:select</code> 定义 path 属性，给每一个 <code>form:option</code> 设置 value 值，path 的值与哪个 value 值相等，该项默认选中。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所在城市：&lt;form:select path=<span class="string">"selectCity"</span>&gt;</span><br><span class="line">            &lt;form:option value="1"&gt;杭州&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value="2"&gt;成都&lt;/form:option&gt;</span><br><span class="line">            &lt;form:option value="3"&gt;西安&lt;/form:option&gt;</span><br><span class="line">        &lt;/form:select&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>textarea</li></ul><p>渲染的是 HTML 中的一个 <code>&lt;textarea/&gt;</code> ，path 绑定模型数据的属性值，作为文本输入域的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student.setIntroduce(<span class="string">"你好，我是..."</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">"student"</span>,student);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">信息：&lt;form:textarea path=<span class="string">"introduce"</span>/&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><ul><li>errors</li></ul><p>处理错误信息，一般用在数据校验，该标签需要结合 Spring MVC 的验证器结合起来使用。</p><h3 id="Spring-MVC-数据校验"><a href="#Spring-MVC-数据校验" class="headerlink" title="Spring MVC 数据校验"></a>Spring MVC 数据校验</h3><p>Spring MVC 提供了两种数据校验的方式：1、基于 Validator 接口。2、使用 Annotation JSR - 303 标准进行校验。</p><p>基于 Validator 接口的方式需要自定义 Validator 验证器，每一条数据的验证规则需要开发者手动完成，使用 Annotation JSR - 303 标准则不需要自定义验证器，通过注解的方式可以直接在实体类中添加每个属性的验证规则，这种方式更加方便，实际开发中推荐使用。</p><blockquote><p>基于 Validator 接口</p></blockquote><ul><li>实体类 Account</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义验证器 AccountValidator，实现 Validator 接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Account.class.equals(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">"name"</span>,<span class="keyword">null</span>,<span class="string">"姓名不能为空"</span>);</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors,<span class="string">"password"</span>,<span class="keyword">null</span>,<span class="string">"密码不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"account"</span>,<span class="keyword">new</span> Account());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@Validated Account account, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml 配置验证器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountValidator"</span> <span class="attr">class</span>=<span class="string">"com.wuyun.validator.AccountValidator"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"accountValidator"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"from"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">"account"</span> action=<span class="string">"/validator/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;form:input path="name"/&gt;&lt;from:errors path="name"&gt;&lt;/from:errors&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:input path="password"/&gt;&lt;from:errors path="password"&gt;&lt;/from:errors&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Annotation JSR - 303 标准</p></blockquote><p>使用 Annotation JSR - 303 标准进行验证，需要导入支持这种标准的依赖 jar 文件，这里我们使用 Hibernate Validator。</p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR-303 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过注解的方式直接在实体类中添加相关的验证规则。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"用户名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>,max = <span class="number">12</span>,message = <span class="string">"密码6-12位"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Email</span>(regexp = <span class="string">"^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\\\.[a-zA-Z0-9-]+)*\\\\.[a-zA-Z0-9]&#123;2,6&#125;$"</span>,message = <span class="string">"请输入正确的邮箱格式"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\\\\\\\d&#123;8&#125;$"</span>,message = <span class="string">"请输入正确的电话"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ValidatorHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"person"</span>,<span class="keyword">new</span> Person());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@Valid Person person, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JSP</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form:form modelAttribute=<span class="string">"person"</span> action=<span class="string">"/validator/register2"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名：&lt;form:input path="username"&gt;&lt;/form:input&gt;&lt;form:errors path="username"/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;form:password path="password"&gt;&lt;/form:password&gt;&lt;form:errors path="password"/&gt;&lt;br/&gt;</span><br><span class="line">        邮箱：&lt;form:input path="email"&gt;&lt;/form:input&gt;&lt;form:errors path="email"/&gt;&lt;br/&gt;</span><br><span class="line">        电话：&lt;form:input path="phone"&gt;&lt;/form:input&gt;&lt;form:errors path="phone"/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>校验规则详解：</p><p>@Null                    被注解的元素必须为null</p><p>@NotNull                  被注解的元素不能为null</p><p>@Min(value)                 被注解的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@Max(value)                被注解的元素必须是一个数字，其值必须小于于等于指定的最大值    </p><p>@Email                     被注解的元素必须是电子邮箱地址</p><p>@Pattern                  被注解的元素必须符合对应的正则表达式</p><p>@Length                   被注解的元素的大小必须在指定的范围内</p><p>@NotEmpty                  被注解的字符串的值必须非空</p><p>Null 和 Empty 是不同的结果，String str = null，str 是 null，String str = “”，str 不是 null，其值为空。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql连接失败HikariPool错误</title>
      <link href="/2019/10/13/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_mysql_1/"/>
      <url>/2019/10/13/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_mysql_1/</url>
      
        <content type="html"><![CDATA[<center>mysql连接失败HikariPool错误</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>连接mysql时HikariPool初始化失败.</p><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: The server time zone value &apos;ÖÐ¹ú±ê×¼Ê±¼ä&apos; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</span><br></pre></td></tr></table></figure><h3 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h3><p> 时区配置的有歧义 </p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p> 在 jdbc url 后加上 &amp;serverTimezone=Asia/Shanghai 这样无歧义的值。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">jdbc:MySQL://localhost:3306/testdata?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok相关注解失效</title>
      <link href="/2019/10/10/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_lombok_1/"/>
      <url>/2019/10/10/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_lombok_1/</url>
      
        <content type="html"><![CDATA[<center>@AllArgsConstructor @NoArgsConstructor @Data注解失效，没有作用</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><code>@AllArgsConstructor @NoArgsConstructor @Data</code>注解失效，没有作用</p><h3 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h3><p>lombok不仅需要导包还需要安装</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="安装lombok插件-IDEA"><a href="#安装lombok插件-IDEA" class="headerlink" title="安装lombok插件(IDEA)"></a>安装lombok插件(IDEA)</h4><p>第一步：</p><p>添加jar包或maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：</p><p>1、外网可直接通过搜索获取<br><img src="https://i.loli.net/2019/10/10/tIyZbjiGaHYEcVJ.jpg" alt="QQ截图20191010150719.jpg"></p><p>2.下载安装重新启动即可</p>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> IDEA </tag>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Springboot_入门</title>
      <link href="/2019/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringBoot_%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_SpringBoot_%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<center>    SpringBootの笔记<br>最近很火的后端框架<br>学习学习<br>看看为什么火</center><a id="more"></a><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><h4 id="流行分布式架构"><a href="#流行分布式架构" class="headerlink" title="流行分布式架构:"></a>流行分布式架构:</h4><p>Redis + Apache Zookeeper + Dubbo</p><h4 id="Spring分布式架构"><a href="#Spring分布式架构" class="headerlink" title="Spring分布式架构"></a>Spring分布式架构</h4><p>SpringBoot SpringCloud</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>SpringBoot是一个快速开发框架,可以迅速搭建出一套基于Spring框架体系的应用,是Spring Cloud的基础. </p><p>SpringBoot开启了各种自动装配,从而简化了代码的开发,不需要编写各种配置文件.只需要引入相关依赖就可以迅速搭建起一个应用.</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><ol><li>不需要web.xml</li><li>不需要spring-mvc.xml</li><li>不需要tomcat,Spring Boot内嵌了Tomcat.</li><li>不需要配置JSON解析,支持REST架构.</li><li>个性化配置非常简单</li></ol><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>1.创建Maven工程,导入相关依赖.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--web启动jar包--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建Student实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.StudentRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.StudentRepositoryImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long,Student&gt; studentMap;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        studentMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        studentMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">"张三"</span>,<span class="number">20</span>));</span><br><span class="line">        studentMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">"李四"</span>,<span class="number">21</span>));</span><br><span class="line">        studentMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">"王五"</span>,<span class="number">22</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentMap.put(student.getId(),student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        studentMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.StudentHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestBody Student student)</span> </span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(@RequestBody Student student)</span> </span>&#123;</span><br><span class="line">        studentRepository.saveOrUpdate(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>7.启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code>表示当前类是SpringBoot的入口,<strong>Application类的存放位置必须是其他相关业务类存放位置的的父级.</strong></p><h4 id="Spring-Boot整合JSP"><a href="#Spring-Boot整合JSP" class="headerlink" title="Spring Boot整合JSP"></a>Spring Boot整合JSP</h4><ol><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web组建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--整合Jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JSTL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建配置文件application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span><span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    view:</span></span><br><span class="line"><span class="attr">      prefix:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">      suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>剩下的就和SSM一样了.</li></ol><h4 id="Spring-Boot整合HTML"><a href="#Spring-Boot整合HTML" class="headerlink" title="Spring Boot整合HTML"></a>Spring Boot整合HTML</h4><p>Spring Boot可以结合Thymeleaf模板整合HTML,使用原生的HTML作为视图.</p><p>Thymeleaf模板是面向Web和独立环境的Java模板引擎,能够处理HTML,XML,JavaScript,CSS等.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:text=&quot;$&#123;message&#125;&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><ol><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承父包--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--web启动jar包--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    prefix:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">HTML5</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure></li><li><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"index...."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果希望客户端可以直接访问HTML资源,将这些资源放在Static路径下即可,否则只能从映射访问.</p></li></ol><h4 id="Thymeleaf常用语法"><a href="#Thymeleaf常用语法" class="headerlink" title="Thymeleaf常用语法"></a>Thymeleaf常用语法</h4><h5 id="赋值和拼接"><a href="#赋值和拼接" class="headerlink" title="赋值和拼接"></a>赋值和拼接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/index2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">      map.put(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'学生姓名是'+$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|学生的姓名是,$&#123;name&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="条件判断-if-unless"><a href="#条件判断-if-unless" class="headerlink" title="条件判断:if/unless"></a>条件判断:if/unless</h5><p><code>th:if</code>表示条件成立显示内容</p><p><code>th:unless</code>表示条件不成立时显示的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/if"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index3</span><span class="params">(Map&lt;String,Boolean&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">"$&#123;flag == true&#125;"</span> <span class="attr">th:text</span>=<span class="string">"if判断成立"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;flag != true&#125;"</span> <span class="attr">th:text</span>=<span class="string">"unless判断成立"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"index...."</span>);</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">1L</span>,<span class="string">"张三"</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">2L</span>,<span class="string">"李四"</span>,<span class="number">23</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="number">3L</span>,<span class="string">"王五"</span>,<span class="number">24</span>));</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>count<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学生年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"student,stat:$&#123;list&#125;"</span> <span class="attr">th:style</span>=<span class="string">"'background-color:'+@&#123;$&#123;stat.odd&#125;?'#F2F2F2'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;stat.index&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;stat.count&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;student.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;student.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;student.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>stat</code>是状态变量,属性:</p><ul><li>index    集合中元素的index(从0开始)</li><li>count    集合中元素的count(从1开始)</li><li>size       集合大小</li><li>current 当前迭代变量</li><li>even/odd 当前迭代是否为偶数/奇数(从0开始计算)</li><li>first 当前迭代的元素是否是第一个</li><li>last当前迭代的元素是否是最后一个</li></ul><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><p>Thymeleaf 对于 URL 的处理是通过@{…} 进行处理,结合<code>th:href</code>,<code>th:src</code>使用.</p><blockquote><p>URL中不能直接用EL表达式去后台的值,需要通过{变量名}(变量名=${值})的方式取出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; localhost:8080/index/url/&#123;name&#125;(name=$&#123;name&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com&#125;"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/index/url/&#123;na&#125;(na=$&#123;name&#125;)&#125;"</span>&gt;</span>跳转2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"$&#123;src&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:style</span>=<span class="string">"'background:url('+@&#123;$&#123;src&#125;&#125;+');'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/eq"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">eq</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"age"</span>,<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;age gt 30?'中年':'青年'&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>gt    (great than)     大于</li><li>ge   (great equal)   大于等于</li><li>eq   (equal)             等于</li><li>lt     (less than)       小于</li><li>le    (less equal)     小于等于</li><li>ne   (not equal)      不等于 </li></ul></blockquote><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/switch"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">switchTest</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"genter"</span>,<span class="string">"女"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;genter&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"女"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"男"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h5><ul><li><code>#ctx</code>:上下文对象</li><li><code>#vars</code>:上下文变量</li><li><code>#locale</code>:区域对象</li><li><code>#request</code>:HttpServletRequest对象</li><li><code>#response</code>:HttpServletReponse对象</li><li><code>#session</code>:HttpSession对象</li><li><code>#servletContext</code>:ServletContext对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/object"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">object</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">"request"</span>,<span class="string">"request对象"</span>);</span><br><span class="line">    request.getSession().setAttribute(<span class="string">"session"</span>,<span class="string">"session对象"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.getAttribute('request')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#session.getAttribute('session')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.country&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="内嵌对象"><a href="#内嵌对象" class="headerlink" title="内嵌对象"></a>内嵌对象</h5><p>可以直接通过#访问.</p><ul><li>dates:java.util.Date的功能方法</li><li>calendars:java.util.Calemdar的功能方法</li><li>numbers:格式化数字</li><li>strings:java..lang.String的功能方法</li><li>objects:对于Object的功能方法</li><li>bools:对布尔求值的方法</li><li>arrays:操作数组的功能方法</li><li>lists:操作集合的功能方法</li><li>sets:操作集合的功能方法</li><li>maps:操作集合的功能方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/util"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">util</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    model.addAttribute(<span class="string">"count"</span>,<span class="number">22</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"date"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 格式化时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(date,'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建当前时间,精确到天--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.createToday()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建当前时间,精确到秒--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.createNow()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 判断是否为空--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.isEmpty(name)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--判断集合是否温控--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#lists.isEmpty(uesrs)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输出字符串的长度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.length(name)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--拼接字符串--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.concat(name,name,name)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建自定义字符串--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.randomAlphanumeric(count)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Spring-Boot的数据校验"><a href="#Spring-Boot的数据校验" class="headerlink" title="Spring Boot的数据校验"></a>Spring Boot的数据校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">2</span>,message = <span class="string">"姓名度不能小于两位"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">0</span>,message = <span class="string">"年龄必须大于0"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/validator"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">vlidatorUser</span><span class="params">(@Valid User user, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        List&lt;ObjectError&gt; list = bindingResult.getAllErrors();</span><br><span class="line">        <span class="keyword">for</span> (ObjectError objectError:list)&#123;</span><br><span class="line">            System.out.println(objectError.getCode()+<span class="string">"-"</span>+objectError.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Boot整合JDBC"><a href="#Spring-Boot整合JDBC" class="headerlink" title="Spring Boot整合JDBC"></a>Spring Boot整合JDBC</h4><ol><li>pom.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>application.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    prefix:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">HTML5</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ol start="3"><li>user<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"id不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">2</span>,message = <span class="string">"姓名度不能小于两位"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">0</span>,message = <span class="string">"成绩必须大于0"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>UserRepository</li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepoository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>UserRepositoryImpl</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository.impl;</span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.UserRepoository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepoository</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span>    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(</span><br><span class="line">            <span class="string">"select * from user"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class)</span><br><span class="line">        );    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(</span><br><span class="line">            <span class="string">"select * from user where id = ?"</span>,<span class="keyword">new</span> Object[]&#123;id&#125;,</span><br><span class="line">            <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class));    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(</span><br><span class="line">            <span class="string">"insert into user (name,score) values (?,?)"</span>,</span><br><span class="line">            user.getName(),user.getScore()          </span><br><span class="line">        );</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(                </span><br><span class="line">            <span class="string">"update user set name = ?,score = ? where id ==?"</span>,</span><br><span class="line">            user.getName(),user.getScore(),user.getId()        </span><br><span class="line">        );        </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(</span><br><span class="line">            <span class="string">"delete from user where id = ?"</span>,id</span><br><span class="line">        );    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.UserRepoository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepoository userRepoository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepoository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepoository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        userRepoository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        userRepoository.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">        userRepoository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Boot整合Mybatis"><a href="#Spring-Boot整合Mybatis" class="headerlink" title="Spring Boot整合Mybatis"></a>Spring Boot整合Mybatis</h4><ol><li><p>创建Maven工程,pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据表</p></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double score;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建StudentRepository接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Student;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources/mapping路径下创建StudentRepository接口对应的Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.wuyun.repository.StudentRepository"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">select * from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">insert into student(name,score,birthday) values (#&#123;name&#125;,#&#123;score&#125;,#&#123;birthday&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">update student set name = #&#123;name&#125;,score = #&#123;score&#125;,birthday = #&#123;birthday&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></span><br><span class="line">delete from student where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建StudentHandler,注入StudentRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuyun.entity.Student;</span><br><span class="line"><span class="keyword">import</span> com.wuyun.repository.StudentRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(@RequestBody Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.save(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(@RequestBody Student student)</span></span>&#123;</span><br><span class="line">        studentRepository.update(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        studentRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:MySQL://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:/mapping/*.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.wuyun.entity</span></span><br></pre></td></tr></table></figure></li><li><p>创建Application</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuyun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.wuyun.repository"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Spring-Boot-整合-Spring-Data-JPA"><a href="#Spring-Boot-整合-Spring-Data-JPA" class="headerlink" title="Spring Boot 整合 Spring Data JPA"></a>Spring Boot 整合 Spring Data JPA</h4><p>JPA Hibernate 框架就是一个JPA的实现.</p><p>Spring Data JPA 不是对JPA规范的具体实现,本身是一个抽象层.</p><p>….鸽了…..咕咕咕</p><h4 id="Spring-Boot-整合MongoDB"><a href="#Spring-Boot-整合MongoDB" class="headerlink" title="Spring Boot 整合MongoDB"></a>Spring Boot 整合MongoDB</h4><p>MongoDB主流的非关系型数据库,也是非关系型数据库中最像关系型数据库的.</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于线程</title>
      <link href="/2019/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<center>一些常见的关于线程的笔记</center><a id="more"></a><h1 id="关于线程"><a href="#关于线程" class="headerlink" title="关于线程"></a>关于线程</h1><h4 id="简述线程、程序、进程的基本概念。以及他们之间关系是什么"><a href="#简述线程、程序、进程的基本概念。以及他们之间关系是什么" class="headerlink" title="简述线程、程序、进程的基本概念。以及他们之间关系是什么?"></a>简述线程、程序、进程的基本概念。以及他们之间关系是什么?</h4><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如CPU时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h4 id="线程有哪些基本状态"><a href="#线程有哪些基本状态" class="headerlink" title="线程有哪些基本状态?"></a>线程有哪些基本状态?</h4><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面6种不同状态的其中一个状态</p><table><thead><tr><th align="center">状态名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NEW</td><td align="center">初始状态,线程被构建,但还没有调用start(0方法</td></tr><tr><td align="center">RUNNABLE</td><td align="center">运行状态,Java线程将操作系统中就绪和运行两种状态笼统恶的称作”运行中”</td></tr><tr><td align="center">BLOCKED</td><td align="center">阻塞状态,表示线程阻塞于锁</td></tr><tr><td align="center">WAITING</td><td align="center">等待状态,表示线程进入等待状态,进入该状态比那是当前线程需要等待其他线程做出一些特定动作(通知或中断)</td></tr><tr><td align="center">TIME_WAITING</td><td align="center">超时等待状态,该状态不同于WAITING,它是可以在指定的时间自行返回的</td></tr><tr><td align="center">TERMINATED</td><td align="center">终止状态,表示当前线程已经执行完毕</td></tr></tbody></table><p>线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 <strong>RUNNING（运行）</strong> 状态。</p><blockquote><p>操作系统隐藏 Java虚拟机（JVM）中的 RUNNABLE 和 RUNNING 状态，它只能看到 RUNNABLE 状态,所以 Java 系统一般将这两个状态统称为 <strong>RUNNABLE（运行中）</strong> 状态 。</p></blockquote><p>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>WAITING（等待）</strong>状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 <strong>TIME_WAITING(超时等待)</strong> 状态相当于在等待状态的基础上增加了超时限制，比如通过 <code>sleep（long millis）</code>方法或 <code>wait（long millis）</code>方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 <strong>BLOCKED（阻塞）</strong> 状态。线程在执行 Runnable 的<code>run()</code>方法之后将会进入到 <strong>TERMINATED（终止）</strong> 状态。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JVM,JDK和JRE</title>
      <link href="/2019/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_JVMJDK%E5%92%8CJRE/"/>
      <url>/2019/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_JVMJDK%E5%92%8CJRE/</url>
      
        <content type="html"><![CDATA[<center>有关JVM,JDK,JRE的笔记</center><a id="more"></a><h3 id="关于JVM-JDK-和-JRE的通俗解答"><a href="#关于JVM-JDK-和-JRE的通俗解答" class="headerlink" title="关于JVM JDK 和 JRE的通俗解答"></a>关于JVM JDK 和 JRE的通俗解答</h3><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><strong>JVM</strong></h3><p>Java虚拟机(JVM)是运行Java字节码的虚拟机.JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码?采用字节码的好处是什么?</strong></p><blockquote><p>在 Java 中，JVM可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><blockquote><p>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p></blockquote><blockquote><p><strong>HotSpot采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9引入了一种新的编译模式AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</strong></p></blockquote><p><strong>总结：</strong></p><p>Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><h3 id="JDK和JRE"><a href="#JDK和JRE" class="headerlink" title="JDK和JRE"></a><strong>JDK和JRE</strong></h3><p>JDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。</p><p>JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> JRE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Servlet</title>
      <link href="/2019/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_Servlet/"/>
      <url>/2019/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_Servlet/</url>
      
        <content type="html"><![CDATA[<center>有关servlet的笔记</center><a id="more"></a><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><strong>开发一个servlet的步骤:</strong></p><ol><li>创建web应用项目</li><li>编写servlet代码</li><li>部署到tomcat中</li></ol><h4 id="Servlet总结"><a href="#Servlet总结" class="headerlink" title="Servlet总结"></a>Servlet总结</h4><p>在Java Web程序中,<strong>Servlet</strong>主要负责接收用户请求<code>HttpServletRequest</code>,在<code>doGet()</code>,<code>doPost()</code>中 做相应的处理，并将回应<code>HttpServletResponse</code>反馈给用户。<strong>Servlet</strong> 可以设置初始化参数，供Servlet内部使用。一个Servlet类只会有一个实例，在它初始化时调用<code>init()</code>方法，销毁时调用<code>destroy()</code>方法<strong>。</strong>Servlet需要在web.xml中配置（MyEclipse中创建Servlet会自动配置），<strong>一个Servlet可以设置多个URL访问</strong>。<strong>Servlet不是线程安全</strong>，因此要谨慎使用类变量。 </p><h4 id="Servlet接口中有哪些方法及Servlet生命周期探秘"><a href="#Servlet接口中有哪些方法及Servlet生命周期探秘" class="headerlink" title="Servlet接口中有哪些方法及Servlet生命周期探秘"></a>Servlet接口中有哪些方法及Servlet生命周期探秘</h4><p>Servlet接口定义了5个方法，其中<strong>前三个方法与Servlet生命周期相关</strong>：</p><ul><li><code>void init(ServletConfig config) throws ServletException</code></li><li><code>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</code></li><li><code>void destroy()</code></li><li><code>java.lang.String getServletInfo()</code></li><li><code>ServletConfig getServletConfig()</code></li></ul><p><strong>生命周期：</strong> Web容器加载Servlet并将其<strong>实例化</strong>后，Servlet生命周期开始，容器运行其<strong>init()方法</strong>进行Servlet的初始化；请求到达时调用Servlet的<strong>service()方法</strong>，service()方法会根据需要调用与请求对应的<strong>doGet或doPost</strong>等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的<strong>destroy()方法</strong>。<strong>init方法和destroy方法只会执行一次，service方法客户端每次请求Servlet都会执行</strong>。Servlet中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入init方法中，销毁资源的代码放入destroy方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p><h4 id="Get和Post请求的区别"><a href="#Get和Post请求的区别" class="headerlink" title="Get和Post请求的区别"></a>Get和Post请求的区别</h4><ol><li><p>get请求用来从服务器上获得资源，而post是用来向服务器提交数据；</p></li><li><p>get将表单中数据按照name=value的形式，添加到action 所指向的URL 后面，并且两者使用”?”连接，而各个变量之间使用”&amp;”连接；post是将表单中的数据放在HTTP协议的请求头或消息体中，传递到action所指向URL；</p></li><li><p>get传输的数据要受到URL长度限制（最大长度是 2048 个字符）；而post可以传输大量的数据，上传文件通常要使用post方式；</p></li><li><p>使用get时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用get；对于敏感数据还是应用使用post；</p></li><li><p>get使用MIME类型application/x-www-form-urlencoded的URL编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是”%20”。</p></li></ol><p>补充：GET方式提交表单的典型应用是搜索引擎。GET方式就是被设计为查询用的。</p><blockquote><p>另外一种答案:</p><p>​    GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>​    HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>​    HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><pre><code>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。  </code></pre><p>GET和POST还有一个重大区别，简单的说：</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li><p>GET与POST都有自己的语义，不能随便混用。</p></li><li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p></li><li><p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></li></ol></blockquote><h4 id="什么情况下调用doGet-和doPost"><a href="#什么情况下调用doGet-和doPost" class="headerlink" title="什么情况下调用doGet()和doPost()"></a>什么情况下调用doGet()和doPost()</h4><p> Form标签里的method的属性为get时调用doGet()，为post时调用doPost()。 </p><h4 id="转发-Forward-和重定向-Redirect-的区别"><a href="#转发-Forward-和重定向-Redirect-的区别" class="headerlink" title="转发(Forward)和重定向(Redirect)的区别"></a>转发(Forward)和重定向(Redirect)的区别</h4><p><strong>转发是服务器行为，重定向是客户端行为。</strong></p><p><strong>转发（Forward）</strong> 通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到login_success.jsp页面。</p><p><code>request.getRequestDispatcher(&quot;login_success.jsp&quot;).forward(request, response);</code></p><p> <strong>重定向（Redirect）</strong> 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 <code>HttpServletResponse</code> 的 <code>setStatus(int status)</code> 方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。 </p><ol><li><strong>从地址栏显示来说</strong></li></ol><p>forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址. redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</p><ol start="2"><li><strong>从数据共享来说</strong></li></ol><p>forward:转发页面和转发到的页面可以共享request里面的数据. redirect:不能共享数据.</p><ol start="3"><li><strong>从运用地方来说</strong></li></ol><p>forward:一般用于用户登陆的时候,根据角色转发到相应的模块. redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p><ol><li>从效率来说</li></ol><p>forward:高. redirect:低.</p><h4 id="自动刷新-Refresh"><a href="#自动刷新-Refresh" class="headerlink" title="自动刷新(Refresh)"></a>自动刷新(Refresh)</h4><p> 自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet中通过HttpServletResponse对象设置Header属性实现自动刷新例如： </p><p><code>Response.setHeader(&quot;Refresh&quot;,&quot;5;URL=http://localhost:8080/servlet/example.htm&quot;);</code></p><p> 其中5为时间，单位为秒。URL指定就是要跳转的页面（如果设置自己的路径，就会实现每过5秒自动刷新本页面一次） </p><h4 id="Servlet与线程安全"><a href="#Servlet与线程安全" class="headerlink" title="Servlet与线程安全"></a>Servlet与线程安全</h4><p> <strong>Servlet不是线程安全的，多线程并发的读写会导致数据不同步的问题。</strong> 解决的办法是尽量不要定义name属性，而是要把name变量分别定义在doGet()和doPost()方法内。虽然使用synchronized(name){}语句块可以解决问题，但是会造成线程的等待，不是很科学的办法。 注意：多线程的并发的读写Servlet类属性会导致数据不同步。但是如果只是并发地读取属性而不写入，则不存在数据不同步的问题。因此Servlet里的只读属性最好定义为final类型的。 </p><h4 id="JSP和Servlet是什么关系"><a href="#JSP和Servlet是什么关系" class="headerlink" title="JSP和Servlet是什么关系"></a>JSP和Servlet是什么关系</h4><p>其实这个问题在上面已经阐述过了，Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图（view）而Servlet适合充当控制器（controller）。</p><h4 id="JSP工作原理"><a href="#JSP工作原理" class="headerlink" title="JSP工作原理"></a>JSP工作原理</h4><p>JSP是一种Servlet，但是与HttpServlet的工作方式不太一样。HttpServlet是先由源代码编译为class文件后部署到服务器下，为先编译后部署。而JSP则是先部署后编译。JSP会在客户端第一次请求JSP文件时被编译为HttpJspPage类（接口Servlet的一个子类）。该类会被服务器临时存放在服务器工作目录里面。Jsp文件在工程第一次部署到服务器上后访问这个Jsp文件，我们发现项目目录下会多出2个东西。 .class文件便是JSP对应的Servlet。编译完毕后再运行class文件来响应客户端请求。以后客户端访问login.jsp的时候，Tomcat将不再重新编译JSP文件，而是直接调用class文件来响应客户端请求。</p><p>由于JSP只会在客户端第一次请求的时候被编译 ，因此第一次请求JSP时会感觉比较慢，之后就会感觉快很多。如果把服务器保存的class文件删除，服务器也会重新编译JSP。</p><p>开发Web程序时经常需要修改JSP。Tomcat能够自动检测到JSP程序的改动。如果检测到JSP源代码发生了改动。Tomcat会在下次客户端请求JSP时重新编译JSP，而不需要重启Tomcat。这种自动检测功能是默认开启的，检测改动会消耗少量的时间，在部署Web应用的时候可以在web.xml中将它关掉。</p><h4 id="JSP有哪些内置对象-作用分别是什么"><a href="#JSP有哪些内置对象-作用分别是什么" class="headerlink" title="JSP有哪些内置对象,作用分别是什么"></a>JSP有哪些内置对象,作用分别是什么</h4><p>JSP有9个内置对象：</p><ul><li>request：封装客户端的请求，其中包含来自GET或POST请求的参数；</li><li>response：封装服务器对客户端的响应；</li><li>pageContext：通过该对象可以获取其他对象；</li><li>session：封装用户会话的对象；</li><li>application：封装服务器运行环境的对象；</li><li>out：输出服务器响应的输出流对象；</li><li>config：Web应用的配置对象；</li><li>page：JSP页面本身（相当于Java程序中的this）；</li><li>exception：封装页面抛出异常的对象。</li></ul><h4 id="request-getAttribute-和-request-getParameter-有何区别"><a href="#request-getAttribute-和-request-getParameter-有何区别" class="headerlink" title="request.getAttribute()和 request.getParameter()有何区别"></a>request.getAttribute()和 request.getParameter()有何区别</h4><p><strong>从获取方向来看：</strong></p><p><code>getParameter()</code>是获取 POST/GET 传递的参数值；</p><p><code>getAttribute()</code>是获取对象容器中的数据值；</p><p><strong>从用途来看：</strong></p><p><code>getParameter()</code>用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或url重定向传值时接收数据用。</p><p><code>getAttribute()</code> 用于服务器端重定向时，即在 sevlet 中使用了 forward 函数,或 struts 中使用了 mapping.findForward。 getAttribute 只能收到程序用 setAttribute 传过来的值。</p><p>另外，可以用 <code>setAttribute()</code>,<code>getAttribute()</code> 发送接收对象.而 <code>getParameter()</code> 显然只能传字符串。 <code>setAttribute()</code> 是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另一个页面时，应用服务器会把这块内存拷贝另一个页面所对应的内存中。这样<code>getAttribute()</code>就能取得你所设下的值，当然这种方法可以传对象。session也一样，只是对象在内存中的生命周期不一样而已。<code>getParameter()</code>只是应用服务器在分析你送上来的 request页面的文本时，取得你设在表单或 url 重定向时的值。</p><p><strong>总结：</strong></p><p><code>getParameter()</code>返回的是String,用于读取提交的表单中的值;（获取之后会根据实际需要转换为自己需要的相应类型，比如整型，日期类型啊等等）</p><p><code>getAttribute()</code>返回的是Object，需进行转换,可用<code>setAttribute()</code>设置成任意对象，使用很灵活，可随时用</p><h4 id="include指令include的行为的区别"><a href="#include指令include的行为的区别" class="headerlink" title="include指令include的行为的区别"></a>include指令include的行为的区别</h4><p><strong>include指令：</strong> JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。 语法格式如下： &lt;%@ include file=”文件相对 url 地址” %&gt;</p><p><strong>include动作：</strong> ``动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下： &lt;jsp:include page=”相对 URL 地址” flush=”true” /&gt;</p><h4 id="JSP的九大内置对象-七大动作-三大指令"><a href="#JSP的九大内置对象-七大动作-三大指令" class="headerlink" title="JSP的九大内置对象,七大动作,三大指令"></a>JSP的九大内置对象,七大动作,三大指令</h4><p><strong>out输出流对象</strong><br>　　隐藏对象out是javax.servlet.jsp.JspWriter类的实例服务器向客户输出的字符内容可以通过out对象输出。获取方法： PrintWriter out = response.getWriter();out对象常用的方法如下： </p><ol><li>void clear() 　　清除缓冲区的内容</li><li>void clearBuffer() 　　清除缓冲区的当前内容 </li><li>void flush() 　　将缓冲内容flush到客户端浏览器 </li><li>int getBufferSize() 　　返回缓冲大小，单位KB </li><li>int getRemaining() 　　返回缓冲剩余大小，单位KB </li><li>isAutoFlush() 　　返回缓冲区满时,是自动清空还是抛出异常 </li><li>void close() 　　 关闭输出流</li></ol><p><strong>request请求对象</strong><br>　　隐藏对象request是javax.servlet.ServletRequest类的实例，代表客户端的请求。request包含客户端的信息以及请求的信息，如请求那个文件，附带的地址参数等。每次客户端的请求都会产生一个request实例。request对象的常用方法如下： </p><ol><li>object getAttribute(String name) 　　返回指定属性的属性值 </li><li>Enumeration getAttributeNames() 　　 返回所有可用属性名的枚举</li><li>String getCharacterEncoding() 　　返回字符编码方式</li><li>int getContentLength() 　　返回请求体的长度(以字节数)</li><li>String getContentType() 　　得到请求体的MIME类型</li><li>ServletInputStream getInputStream()　　 得到请求体中一行的二进制流</li><li>String getParameter(String name) 　　返回name指定参数的参数值</li><li>Enumeration getParameterNames()　　 返回可用参数名的枚举 </li><li>String[] getparameterValues(String name) 　　 返回包含参数name的所有值的数组</li><li>String getProtocol() 　　返回请求用的协议类型及版本号 </li><li>String getScheme() 　　返回请求用的计划名,如:http https及ftp等 </li><li>int getServerPort() 　　返回服务器接受此请求所用的端口号</li><li>String getServerName() 　　 返回接受请求的服务器主机名</li><li>BufferedReader getReader() 　　 返回解码过了的请求体</li><li>String getRemoteAddr() 　　 返回发送此请求的客户端IP地址</li><li>String getRemoteHost() 　　返回发送此请求的客户端主机名</li><li>void setAttribute(String key Object obj) 　　设置属性的属性值</li><li>String getRealPath(String path) 　　返回一虚拟路径的真实路径</li><li>void setCharacterEncoding(“gb2312”) 　　设置接受参数的字符集</li></ol><p><strong>response响应对象</strong><br>　　隐藏对象response是javax.servlet.ServletResponse类的实例，代表客户端的响应。服务器端的任何输出都通过response对象发送到客户端浏览器。每次服务器端都会响应一个response实例。response对象的常用方法如下： </p><ol><li>String getCharacterEncoding() 　　 返回响应用的是何种字符编码</li><li>ServletOutputStream getOutputStream() 　　返回响应的一个二进制输出流</li><li>PrintWriter getWriter() 　　返回可以向客户端输出字符的一个对象</li><li>void setContentLength(int len) 　　设置响应头长度</li><li>void setContentType(String type) 　　设置响应的MIME类型</li><li>sendRedirect(java.lang.String location) 　　重新定向客户端的请求</li><li>void setCharacterEncoding(“gb2312”) 　　设置响应头的字符集</li></ol><p><strong>config配置对象</strong><br>　　隐藏对象config是javax.servlet.ServletConfig类的实例，ServletConfig封装了配置在web.xml中初始化JSP的参数。JSP中通过config获取这些参数。每个JSP文件中共有一个config对象。config对象的常用方法如表： </p><ol><li>String getInitParameter(String name)　　返回配置在web.xml中初始化参数</li><li>Enumeration getInitParameterNames() 　　返回所有的初始化参数名称</li><li>ServletContext getServletContext()　　返回ServletContext对象</li><li>String getServletName　　返回Servlet对象</li></ol><p><strong>session会话对象</strong><br>　　隐藏对象session是javax.servlet.http.HttpSession类的实例。session与cookie是记录客户访问信息的两种机制，session是用于服务器端保存用户信息，cookie用于在客户端保存用户信息。Servlet中通过request.getSession()来获取session对象，而JSP中可以直接使用。如果JSP中配置了&lt;%@page session=”false”%&gt;,则隐藏对象session不可用。每个用户对应一个session对象。session对象的常用方法如下: </p><ol><li>long getCreationTime() 　　返回Session创建时间</li><li>public String getId() 　　返回Session创建时JSP引擎为它设的唯一ID号</li><li>long getLastAccessedTime() 　　返回此Session里客户端最近一次请求时间</li><li>int getMaxInactiveInterval()　　 返回两次请求间隔多长时间此Session被取消(ms)</li><li>String[] getValueNames() 　　返回一个包含此Session中所有可用属性的数组</li><li>void invalidate() 　取消Session,使Session不可用</li><li>boolean isNew() 　　返回服务器创建的一个Session,客户端是否已经加入</li><li>void removeValue(String name) 　　删除Session中指定的属性</li><li>void setAttribute(String key,Object obj) 　　设置Session的属性</li><li>Object getAttribute(String name)　　 返回session中属性名为name的对象</li></ol><p><strong>application应用程序对象</strong><br>　　隐藏对象application是javax.servlet.ServletContext类的对象。application封装JSP所在Web应用程序的信息，例如web.xml中配置的全局的初始化信息。Servlet中application对象需要通过ServletConfig.getServletContext()来获取。整个Web应用程序对应一个application对象。application对象常用的方法如下： </p><ol><li>Object getAttribute(String name)　　返回application中属性为name的对象</li><li>Enumeration getAttributeNames() 　　返回application中的所有属性名</li><li>void setAttribute(String name,Object value)　　设置application属性</li><li>void removeAttribute(String name) 　　移除application属性</li><li>String getInitParameter(String name)　　返回全局初始话函数</li><li>Enumeration getInitParameterNames(）　　返回所有的全局初始话参数</li><li>String getMimeType(String filename)　　返回文件的文档类型，例如getMimeType(“abc.html”)将返回“text.html”</li><li>String getRealPath(String relativePath）　　返回Web应用程序内相对网址对应的绝对路径</li></ol><p><strong>page页面对象</strong><br>　　隐藏对象page是javax.servlet.jsp.HttpJspPage类的实例。page对象代表当前JSP页面，是当前JSP编译后的Servlet类的对象。page想当于Java类中的关键字this</p><p><strong>pageContext页面上下文对象</strong><br>　　隐藏对象pageContext为javax.servlet.jsp.PageContext类的实例。pageContext对象代表当前JSP页面编译后的内容。通过pageContext能够获取到JSP中的资源。pageContext常用方法如下： </p><ol><li>JspWriter getOut() 　　返回out对象</li><li>HttpSession getSession() 　　 返回Session对象(session)</li><li>Object getPage() 　　返回page对象</li><li>ServletRequest getRequest() 　　 返回request对象</li><li>ServletResponse getResponse() 　　 返回response对象</li><li>void setAttribute(String name,Object attribute) 　　　设置属性及属性值 ，在page范围内有效 </li><li>void setAttribute(String name,Object obj,int scope)　　 在指定范围内设置属性及属性值 ，int1=page,2=request,3=session,4=application</li><li>public Object getAttribute(String name) 　　取属性的值</li><li>Object getAttribute(String name,int scope) 　　在指定范围内取属性的值 </li><li>public Object findAttribute(String name) 　　寻找一属性,返回起属性值或NULL</li><li>void removeAttribute(String name) 　　删除某属性</li><li>void removeAttribute(String name,int scope) 　　 在指定范围删除某属性</li><li>int getAttributeScope(String name)　　 返回某属性的作用范围</li><li>Enumeration getAttributeNamesInScope(int scope) 　　返回指定范围内可用的属性名枚举</li><li>void release() 　　释放pageContext所占用的资源</li><li>void forward(String relativeUrlPath) 　　 使当前页面重导到另一页面</li><li>void include(String relativeUrlPath) 　　 在当前位置包含另一文件</li></ol><p><strong>Eexception异常对象</strong><br>　　隐藏对象exception为java.lang.Exception类的对象。exception封装了JSP中抛出的异常信息。要使用exception隐藏对象，需要设置&lt;%@page isErrorPage”true”%&gt;。隐藏对象exception通常被用来处理错误页面， 　　</p><p><strong><em>JSP之三大指令</em></strong><br><strong>page指令</strong></p><blockquote><p><strong>实例：</strong><code>&lt;%@ page language=”java” import=”java.util.*” pageEncoding=”UTF-8”%&gt;</code> </p></blockquote><p><strong>import</strong>:等同与import语句 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=”java.util.*” %&gt; </span><br><span class="line">&lt;%@ page import=”java.util., java.net.” %&gt;</span><br></pre></td></tr></table></figure><p>在一个JSP页面中可以给出多个page指令，而且import是可以重复出现的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=”java.util.*” %&gt; </span><br><span class="line">&lt;%@ page import=”java.next.*” %&gt;</span><br></pre></td></tr></table></figure><p><strong>pageEncoding</strong>：指定当前页面的编码 </p><ul><li>如果pageEncoding没有指定，那么默认为contentType的值</li><li>如果pageEncoding和contentType都没有指定，那么默认值为iso-8859-1</li></ul><p><strong>contentType</strong>：等同与调用<code>response.setContentType(“text/html;charset=xxx”);</code> </p><ul><li>如果没有指定contentType属性，那么默认为pageEncoding的值</li><li>如果contentType和pageEncoding都没有指定，那么默认值为iso-8859-1</li></ul><p><strong>errorPage</strong>：如果当前页面出现异常，那么跳转到errorPage指定的jsp页面。 </p><blockquote><p>例如：<code>&lt;%@ page errorPage=”b.jsp” %&gt;</code></p></blockquote><p><strong>isErrorPage</strong>：上面示例中指定b.jsp为错误页面，但在b.jsp中不能使用内置对象exception，保有b.jsp中使用&lt;%@page isErrorPage=”true”%&gt;时，才能在b.jsp中使用错误页面。<br><strong>autoFlush</strong>：当autoFlush为true时，表示out流缓冲区满时会自动刷新。默认为true<br><strong>buffer</strong>：指定out流的缓冲区大小，默认为8KB<br><strong>isELIgnored</strong>：当前JSP页面是否忽略EL表达式，默认为false，表示不忽略，即支持EL表达式</p><p><strong>page指令不常用的属性：</strong><br><strong>language</strong>：当前JSP编译后的语言！默认为java，当前也只能选择java<br><strong>info</strong>：当前JSP的说明信息<br><strong>isThreadSafe</strong>：当前JSP是否执行只能单线程访问，默认为false，表示支持并发访问<br><strong>session</strong>：当前页面是否可以使用session，默认为false，表示支持session的使用。<br><strong>extends</strong>：指定JSP编译的servlet的父类！ </p><p><strong><em>include指令</em></strong><br>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。<br>Include指令的语法格式如下：<br><code>&lt;%@ include file=”文件相对 url 地址” %&gt;</code></p><p><strong>taglib指令</strong><br>taglib指令是用来在当前jsp页面中导入第三方的标签库<br><code>&lt;%@ taglib uri=”http://java.sun.com/jsp/jstl/core” % prefix=”c” &gt;</code><br><strong>prefix</strong>：指定标签前缀，这个东西可以随意起名<br><strong>uri</strong>：指定第三方标签库的uri（唯一标识）<br>当然，需要先把第三方标签库所需jar包放到类路径中。</p><p><strong><em>JSP之七大动作</em></strong><br><strong>jsp:include</strong>：在页面被请求的时候引入一个文件。<br><strong>jsp:useBean</strong>：寻找或者实例化一个 JavaBean。<br><strong>jsp:setProperty</strong>：设置 JavaBean 的属性。<br><strong>jsp:getProperty</strong>：输出某个 JavaBean 的属性。<br><strong>jsp:forward</strong>：把请求转到一个新的页面。<br><strong>jsp:plugin</strong>：根据浏览器类型为 Java 插件生成 OBJECT 或 EMBED 标记 </p><h4 id="讲解JSP中的四种作用域"><a href="#讲解JSP中的四种作用域" class="headerlink" title="讲解JSP中的四种作用域"></a>讲解JSP中的四种作用域</h4><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p><ul><li><strong>page</strong>代表与一个页面相关的对+象和属性。</li><li><strong>request</strong>代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。</li><li><strong>session</strong>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</li><li><strong>application</strong>代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</li></ul><h4 id="如何实现JSP或Servlet的单线程模式"><a href="#如何实现JSP或Servlet的单线程模式" class="headerlink" title="如何实现JSP或Servlet的单线程模式"></a>如何实现JSP或Servlet的单线程模式</h4><p>对于JSP页面，可以通过page指令进行设置。 <code>&lt;%@page isThreadSafe=&quot;false&quot;%&gt;</code></p><p>对于Servlet，可以让自定义的Servlet实现SingleThreadModel标识接口。</p><blockquote><p>说明：如果将JSP或Servlet设置成单线程工作模式，会导致每个请求创建一个Servlet实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java应用_Junit</title>
      <link href="/2019/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%BA%94%E7%94%A8_Junit/"/>
      <url>/2019/09/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%BA%94%E7%94%A8_Junit/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>刷到应用啦!<br>Junit</center><a id="more"></a><h3 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h3><h4 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a><strong>步骤:</strong></h5><ol><li><p>导入junit的包</p></li><li><p>编写Test测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> junit;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> junit.framework.Assert; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCase1</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//表示这个方法是一个测试方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSum1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = SumUtil.sum1(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//表示对result的期待值是3,如果是其他数值则无法通过测试</span></span><br><span class="line">        Assert.assertEquals(result, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行(Run As -&gt; Junit Test)</p></li></ol><h5 id="优点"><a href="#优点" class="headerlink" title="优点:"></a><strong>优点:</strong></h5><ol><li>新增测试对原来的测试没有影响</li><li>如果测试失败回立刻得到通知</li></ol><h5 id="Before-After"><a href="#Before-After" class="headerlink" title="@Before @After"></a>@Before @After</h5><p>用来在测试开始之前做的事情,和结束之后做的事情</p><h4 id="junit-maven"><a href="#junit-maven" class="headerlink" title="junit maven"></a>junit maven</h4><p>导包</p><p>在pom.xml里加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java应用_Log4j</title>
      <link href="/2019/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%BA%94%E7%94%A8_Log4j/"/>
      <url>/2019/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%BA%94%E7%94%A8_Log4j/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>刷到应用啦!<br>Log4j</center><a id="more"></a><h3 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h3><h4 id="Log4j入门"><a href="#Log4j入门" class="headerlink" title="Log4j入门"></a>Log4j入门</h4><p><strong>System.out.println();的缺点:</strong></p><ol><li>不知道哪个类哪个线程里出来的</li><li>不知道什么时候前后两句输出间隔了多少时间</li><li>无法关闭调试信息</li></ol><p><strong>Log4j的优点:</strong></p><ol><li>知道是在哪个类里的日志</li><li>知道是在线程里的日志</li><li>日志级别可观察(TRACE DEBUG INFO WARN ERROR FATAL)</li><li>日志输出级别范围可控制</li><li>每句日志消耗的毫秒数,可观察(可以进行性能计算)</li></ol><h5 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h5><p>1.基于类的名称获取日志对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(TestLog4j.class);</span><br></pre></td></tr></table></figure><p>2.进行默认配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BasicConfigurator.configure();</span><br></pre></td></tr></table></figure><p>3.设置日志输出级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.setLevel(Level.DEBUG);</span><br></pre></td></tr></table></figure><p>4.输出不同级别的日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logger.trace(<span class="string">"跟踪信息"</span>);</span><br><span class="line">logger.debug(<span class="string">"调试信息"</span>);</span><br><span class="line">logger.info(<span class="string">"输出信息"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">logger.warn(<span class="string">"警告信息"</span>);</span><br><span class="line">logger.error(<span class="string">"错误信息"</span>);</span><br><span class="line">logger.fatal(<span class="string">"致命信息"</span>);</span><br></pre></td></tr></table></figure><h4 id="配置讲解"><a href="#配置讲解" class="headerlink" title="配置讲解"></a>配置讲解</h4><h5 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h5><p>首先在src目录下添加log4j.properties文件.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置日志输出的等级为debug,低于debug就不会输出了</span></span><br><span class="line"><span class="comment">设置日志输出到两种地方，分别叫做 stdout和 R--&gt;</span></span><br><span class="line">log4j.rootLogger=debug, stdout, R</span><br><span class="line"> <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line"> <span class="comment">&lt;!--输出格式--&gt;</span></span><br><span class="line"># Pattern to output the caller's file name and line number.</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n</span><br><span class="line"> <span class="comment">&lt;!--以滚动方式输入到文件,文件名为example.log--&gt;</span></span><br><span class="line">log4j.appender.R=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.R.File=example.log</span><br><span class="line"> <span class="comment">&lt;!--文件大小为100k,最多滚动5个文件--&gt;</span></span><br><span class="line">log4j.appender.R.MaxFileSize=100KB</span><br><span class="line"># Keep one backup file</span><br><span class="line">log4j.appender.R.MaxBackupIndex=5</span><br><span class="line"> <span class="comment">&lt;!--输出格式--&gt;</span></span><br><span class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n</span><br></pre></td></tr></table></figure><blockquote><p><strong>格式解释:</strong></p><p>%c 输出日志信息所属的类的全名<br>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28<br>%f 输出日志信息所属的类的类名<br>%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行<br>%m 输出代码中指定的信息，如log(message)中的message<br>%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”<br>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推<br>%r 输出自应用启动到输出该日志信息所耗费的毫秒数<br>%t 输出产生该日志事件的线程名</p><p> 所以:</p><p>%5p [%t] (%F:%L) - %m%n 就表示<br>宽度是5的优先等级 线程名称 (文件名:行号) - 信息 回车换行</p></blockquote><p><strong>修改类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.PropertyConfigurator;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLog4j</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(TestLog4j.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//将配置文件引入</span></span><br><span class="line">        PropertyConfigurator.configure(<span class="string">"e:\\project\\log4j\\src\\log4j.properties"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            logger.trace(<span class="string">"跟踪信息"</span>);</span><br><span class="line">            logger.debug(<span class="string">"调试信息"</span>);</span><br><span class="line">            logger.info(<span class="string">"输出信息"</span>);</span><br><span class="line">            logger.warn(<span class="string">"警告信息"</span>);</span><br><span class="line">            logger.error(<span class="string">"错误信息"</span>);</span><br><span class="line">            logger.fatal(<span class="string">"致命信息"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用xml文件进行配置"><a href="#使用xml文件进行配置" class="headerlink" title="使用xml文件进行配置"></a>使用xml文件进行配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE log4j:configuration PUBLIC "-//log4j/log4j Configuration//EN" "log4j.dtd"&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">"http://jakarta.apache.org/log4j/"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d %-5p %c.%M:%L - %m%n"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- specify the logging level for loggers from other libraries --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.opensymphony"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">&lt;!-- for all other loggers log only debug and above log messages --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> Log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java高级_注解</title>
      <link href="/2019/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E9%AB%98%E7%BA%A7_%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/09/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E9%AB%98%E7%BA%A7_%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到高级啦!<br>注解</center><a id="more"></a><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>前置条件:</p><ol><li>反射    反射用于解析注解中的信息 </li><li>有任意使用注解方式使用框架的经验</li></ol><h4 id="基本内置注解"><a href="#基本内置注解" class="headerlink" title="基本内置注解"></a>基本内置注解</h4><h5 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h5><ul><li><p>用在方法上,表示这个方法重写了父类的方法.</p><ul><li>如果父类没有这个方法,就无法编译通过.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h5><ul><li><p>表示方法已经过期,不建议开发者使用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hackMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h5><ul><li><p>用于忽略警告信息.(比如写集合时,偷懒,不写泛型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List heors = <span class="keyword">new</span> <span class="function">Array <span class="title">List</span><span class="params">()</span></span>;<span class="comment">//编译器会出现警告</span></span><br></pre></td></tr></table></figure><p>加上:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unused"</span> &#125;)</span><br></pre></td></tr></table></figure><p>就可以对警告进行<strong>抑制</strong>,即忽略这些警告信息.</p></li></ul><ul><li><p>常见值:</p><table><thead><tr><th align="center">值</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">deprecation</td><td align="center">使用了不赞成使用的类或方法时的警告(使用@Deprecated使得编译器产生的警告)；</td></tr><tr><td align="center">unchecked</td><td align="center">执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 关闭编译器警告</td></tr><tr><td align="center">fallthrough</td><td align="center">当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;</td></tr><tr><td align="center">path</td><td align="center">在类路径、源文件路径等中有不存在的路径时的警告</td></tr><tr><td align="center">serial</td><td align="center">当在可序列化的类上缺少 serialVersionUID 定义时的警告;</td></tr><tr><td align="center">finally</td><td align="center">任何 finally 子句不能正常完成时的警告</td></tr><tr><td align="center">rawtypes</td><td align="center">泛型类型未指明</td></tr><tr><td align="center">unused</td><td align="center">引用定义了，但是没有被使用</td></tr><tr><td align="center">all</td><td align="center">关于以上所有情况的警告</td></tr></tbody></table></li></ul><h5 id="Functionallnterface"><a href="#Functionallnterface" class="headerlink" title="@Functionallnterface"></a>@Functionallnterface</h5><ul><li><p>用于约定函数式接口</p><p><strong>函数式接口:</strong> 如果接口中只有<strong>一个</strong>抽象方法（可以包含多个默认方法或多个static方法），该接口称为函数式接口。函数式接口其存在的意义，主要是配合Lambda 表达式来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adAttack</span><span class="params">()</span></span>;<span class="comment">//像这样,就是,多一个都不行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a><strong>自定义注解</strong></h4><h5 id="自定义注解-JDBCConfig"><a href="#自定义注解-JDBCConfig" class="headerlink" title="自定义注解@JDBCConfig"></a>自定义注解@JDBCConfig</h5><p>1.创建注解类型的时候即不使用class也不使用interface,而是使用<strong>@interface</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JDBCConfig</span><br></pre></td></tr></table></figure><p>2.元注解</p><table><thead><tr><th align="center">注解</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>@Target({METHOD,TYPE})</code></td><td align="center">表示这个注解可以用用在类/接口上，还可以用在方法上</td></tr><tr><td align="center"><code>@Retention(RetentionPolicy.RUNTIME)</code></td><td align="center">表示这是一个运行时注解，即运行起来之后，才获取注解中的相关信息，而不像基本注解如@Override那种不用运行，在编译时eclipse就可以进行相关工作的编译时注解。</td></tr><tr><td align="center"><code>@Inherited</code></td><td align="center">表示这个注解可以被子类继承</td></tr><tr><td align="center"><code>@Documented</code></td><td align="center">表示当执行javadoc的时候，本注解会生成相关文档</td></tr></tbody></table><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><h5 id="元注解概念"><a href="#元注解概念" class="headerlink" title="元注解概念"></a>元注解概念</h5><p><strong>元数据:</strong>为其他数据提供信息的数据</p><p><strong>元注解:</strong>用于注解自定义注解的的注解</p><p>元注解分为:</p><ul><li>@Target</li><li>@ReTention</li><li>@Inherited</li><li>@Documented</li><li>@Repeatable(1.8新增)</li></ul><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>@Target({METHOD,TYPE})，表示他可以用在方法和类型上（类和接口），但是不能放在属性等其他位置。 可以选择的位置列表如下：</p><p>ElementType.TYPE：能修饰类、接口或枚举类型<br>ElementType.FIELD：能修饰成员变量<br>ElementType.METHOD：能修饰方法<br>ElementType.PARAMETER：能修饰参数<br>ElementType.CONSTRUCTOR：能修饰构造器<br>ElementType.LOCAL_VARIABLE：能修饰局部变量<br>ElementType.ANNOTATION_TYPE：能修饰注解<br>ElementType.PACKAGE：能修饰包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;METHOD,TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JDBCConfig &#123;</span><br><span class="line">     <span class="function">String <span class="title">ip</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">port</span><span class="params">()</span> <span class="keyword">default</span> 3306</span>;</span><br><span class="line">     <span class="function">String <span class="title">database</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">encoding</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">loginName</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">password</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>表示生命周期</p><p>@Retention可选的值有3个：</p><ol><li><strong>RetentionPolicy.SOURCE：</strong> 注解只在源代码中存在，编译成class之后，就没了。@Override就是这种注解。</li><li><strong>RetentionPolicy.CLASS：</strong> 注解在java文件编程成.class文件后，依然存在，但是运行起来后就没了。@Retention的默认值，即当没有显式指定@Retention的时候，就会是这种类型。</li><li><strong>RetentionPolicy.RUNTIME：</strong> 注解在运行起来之后依然存在，程序可以通过反射获取这些信息</li></ol><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>表示该注解具有继承性。</p><h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><p>在用javadoc命令生成API文档后，DBUtil的文档里会出现该注解说明。</p><blockquote><p>使用eclipse把项目中的.java文件导成API文档步骤：</p><ol><li>选中项目</li><li>点开菜单File</li><li>点击Export</li><li>点开java-&gt;javadoc-&gt;点next</li><li>点finish</li></ol></blockquote><h5 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h5><p>没有@Repeatable修饰的时候，注解在同一个位置，只能出现一次，如例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br></pre></td></tr></table></figure><p>重复做两次就会报错了。<br>使用@Repeatable之后，再配合一些其他动作，就可以在同一个地方使用多次了。</p><h4 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h4><h5 id="按照作用域分"><a href="#按照作用域分" class="headerlink" title="按照作用域分"></a>按照作用域分</h5><p>根据注解的作用域@Retention，注解分为<br>RetentionPolicy.SOURCE： Java源文件上的注解<br>RetentionPolicy.CLASS： Class类文件上的注解<br>RetentionPolicy.RUNTIME： 运行时的注解</p><h5 id="按照来源分"><a href="#按照来源分" class="headerlink" title="按照来源分"></a>按照来源分</h5><p>按照注解的来源，也是分为3类</p><ol><li>内置注解 如@Override ，@Deprecated 等等</li><li>第三方注解，如Hibernate, Struts等等</li><li>自定义注解</li></ol>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse报错Error configuring application listener....</title>
      <link href="/2019/09/19/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_java%E7%AF%87_1/"/>
      <url>/2019/09/19/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_java%E7%AF%87_1/</url>
      
        <content type="html"><![CDATA[<center>错误信息：SEVERE: Error configuring application listener of class org.springframework.web.context.ContextLoaderListener</center><a id="more"></a><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEVERE: Error configuring application listener of class org.springframework.web.context.ContextLoaderListener</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><ol><li>右键工程,打开工程属性对话框,到<strong>Deloyment Assembly</strong>页面,点击Add:</li></ol><p><img src="https://i.loli.net/2019/08/19/t6xosw3CuTrymVZ.png" alt="20131224084203859.png"></p><ol start="2"><li><p>选择<strong>java Build Path Entries</strong><br><img src="https://i.loli.net/2019/08/19/dtJMGwgiFCIae1y.png" alt="20131224084158734.png"></p></li><li><p>把成序用的Library加入进来<br><img src="https://i.loli.net/2019/08/19/zsEkR6JIC7oBZeL.png" alt="20131224084217687.png"></p></li></ol><p>4.重新运行Server</p><p><strong>鸣谢:</strong>CSDN_hunhun1122</p>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA新建没有class选项</title>
      <link href="/2019/08/26/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_IDEA_2/"/>
      <url>/2019/08/26/%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97_IDEA_2/</url>
      
        <content type="html"><![CDATA[<center>路径标识不对</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天用IDEA构建项目时,无法新建Java文件</p><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h4><p><img src="https://i.loli.net/2019/08/26/E3McIntkrquzAUT.jpg" alt="java1.jpg"></p><h3 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h3><p>路径标识不对</p><blockquote><p><strong>这里有个知识点:</strong></p><p>如上图红圈所示，我们可以根据对项目的任意目录进行这五种目录类型标注，这个知识点非常非常重要，必须会。</p><ul><li>Sources： 一般用于标注类似 src 这种可编译目录。有时候我们不单单项目的 src 目录要可编译，还有其他一些特别的目录也许我们也要作为可编译的目录，就需要对该目录进行此标注。<strong>只有</strong> <strong>Sources</strong> <strong>这种可编译目录才可以新建</strong> <strong>Java</strong> <strong>类和包，这一点需要牢记</strong>。</li><li>Tests： 一般用于标注可编译的单元测试目录。在规范的 maven 项目结构中，顶级目录是 src，maven 的 src 我们是不会设置为 Sources 的，而是在其子目录 main 目录下的 java 目录，我们会设置为 Sources。而单元测试的目录是 src - test - java，这里的 java 目录我们就会设置为 Tests，表示该目录是作为可编译的单元测试目录。一般这个和后面几个我们都是在 maven 项目下进行配置的，但是我这里还是会先说说。从这一点我们也可以看出 IntelliJ IDEA 对 maven 项目的支持是比彻底的。</li><li>Resources： 一般用于标注资源文件目录。在 maven 项目下，资源目录是单独划分出来的，其目录为：src - main -resources，这里的 resources 目录我们就会设置为 Resources，表示该目录是作为资源目录。资源目录下的文件是会被编译到输出目录下的。</li><li>Test Resources： 一般用于标注单元测试的资源文件目录。在 maven 项目下，单元测试的资源目录是单独划分出来的，其目录为：src - test -resources，这里的 resources 目录我们就会设置为 Test Resources，表示该目录是作为单元测试的资源目录。资源目录下的文件是会被编译到输出目录下的。</li><li>Excluded： 一般用于标注排除目录。被排除的目录不会被 IntelliJ IDEA 创建索引，相当于被 IntelliJ IDEA 废弃，该目录下的代码文件是不具备代码检查和智能提示等常规代码功能。</li></ul></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>通过上面的介绍，我们知道对于非 maven 项目我们只要会设置 src 即可。<br><img src="https://i.loli.net/2019/08/26/rQBsaz9XhtbKLxE.jpg" alt="java2.jpg"></p><h3 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h3><p><img src="https://i.loli.net/2019/08/26/XGW3S5LIcZFKn1A.jpg" alt="java3.jpg"></p><p><strong>鸣谢:</strong>博客园_子墨言良</p>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA报Errorjava无效的源发行版12</title>
      <link href="/2019/08/21/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_IDEA_1/"/>
      <url>/2019/08/21/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_IDEA_1/</url>
      
        <content type="html"><![CDATA[<center>本机的JDK版本与项目的语言级别不同</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天编译java程序时出现<code>Error:java: 无效的源发行版: 12</code>错误</p><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h4><p><img src="https://i.loli.net/2019/08/21/NBUes6IYLV5oMgp.jpg" alt="errMsg.jpg"></p><h3 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h3><p>本机的<code>JDK</code>版本与项目的语言级别不同造成的</p><p>本机JDK版本:</p><p><img src="https://i.loli.net/2019/08/21/WnoiLMs4DcEG7OT.jpg" alt="JdkVersion.jpg"></p><p>使用<code>Ctrl+Alt+Shift+s</code>打开<code>Project Structure</code>查看<code>Project Language Level</code>，发现是<code>12</code></p><p><img src="https://i.loli.net/2019/08/21/NtQ9bxd2A7smPEv.jpg" alt="oldIDEA.jpg"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>打开<code>Project Structure</code>界面，选择<code>Project</code>，改变<code>Project Language Level</code>如下图所示<br><img src="https://i.loli.net/2019/08/21/zCxJGv5D7rBiLH6.jpg" alt="NewIDEA.jpg"></p><h3 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h3><p><img src="https://i.loli.net/2019/08/21/jMmlVa2Dnyv5pqd.jpg" alt="解决.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JDK </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下了Tomcat，但是启动的时候不管是系统的控制台还是idea的控制台，显示的日志都有中文乱码</title>
      <link href="/2019/08/21/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_Tomcat_1/"/>
      <url>/2019/08/21/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_Tomcat_1/</url>
      
        <content type="html"><![CDATA[<center>Tomcat日志乱码问题</center><a id="more"></a><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>启动Tomcat的时候不管是系统的控制台还是idea的控制台，显示的日志都有中文乱码</p><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息:"></a>错误信息:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Windows 10</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log OS.鐗堟湰:            10.0</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log 缁�.閫�:          amd64</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log Java 鐜鍙橀噺:             C:\Program Files\Java\jdk1.8.0_191\jre</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM 鐗堟湰:           1.8.0_191-b12</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log JVM.渚涘簲鍟�:            Oracle Corporation</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         C:\Users\user\.IntelliJIdea2018.3\system\tomcat\Unnamed_demo</span><br><span class="line">12-Jan-2019 11:15:48.911 淇℃伅 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         D:\tomcat\apache-tomcat-9.0.14</span><br></pre></td></tr></table></figure><h3 id="主要原因"><a href="#主要原因" class="headerlink" title="主要原因"></a>主要原因</h3><p>Tomcat的配置文件中编码参数不对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改tomcat的conf下的logging.properties中的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding = GBK</span><br></pre></td></tr></table></figure><p>将UTF-8改到GBK就行了保存后重启tomcat就正常了。</p><h3 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果:"></a>处理结果:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">21-Aug-2019 14:58:03.736 信息 [main] org.apache.catalina.startup.Catalina.load 服务器在[562]毫秒内初始化</span><br><span class="line">21-Aug-2019 14:58:03.773 信息 [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]</span><br><span class="line">21-Aug-2019 14:58:03.774 信息 [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet engine: [Apache Tomcat/9.0.22]</span><br><span class="line">21-Aug-2019 14:58:03.791 信息 [main] org.apache.coyote.AbstractProtocol.start 开始协议处理句柄[&quot;http-nio-8080&quot;]</span><br><span class="line">21-Aug-2019 14:58:03.806 信息 [main] org.apache.coyote.AbstractProtocol.start 开始协议处理句柄[&quot;ajp-nio-8009&quot;]</span><br><span class="line">21-Aug-2019 14:58:03.810 信息 [main] org.apache.catalina.startup.Catalina.start Server startup in [74] milliseconds</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> IDEA </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java中级_JDBC</title>
      <link href="/2019/08/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_JDBC/"/>
      <url>/2019/08/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_JDBC/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到中级啦!<br>JDBC</center><a id="more"></a><h3 id="Hello-JDBC"><a href="#Hello-JDBC" class="headerlink" title="Hello JDBC"></a>Hello JDBC</h3><h4 id="步骤一-为项目导入mysql-jdbc包"><a href="#步骤一-为项目导入mysql-jdbc包" class="headerlink" title="步骤一:为项目导入mysql-jdbc包"></a>步骤一:为项目导入mysql-jdbc包</h4><p>将需要的Jar包放在项目的lib目录下,然后在eclipse中导入这个jar包</p><p><strong>导包步骤:</strong>右键project-&gt;property-&gt;java build path-&gt;libaries-&gt;add external jars</p><h4 id="步骤二-初始化驱动"><a href="#步骤二-初始化驱动" class="headerlink" title="步骤二:初始化驱动"></a>步骤二:初始化驱动</h4><p>通过<strong>Class.forName</strong>(“com.mysql.jdbc.Driver”);</p><p>初始化驱动类<strong>com.mysql.jdbc.Driver</strong></p><blockquote><p>注:如果忘记了导包，就会抛出ClassNotFoundException</p><p>注:Class.forName是将这个类加载到JVM中,加载的时候,就会执行其中的静态初始化块,完成驱动的初始化的相关工作.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//初始化驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//驱动类com.mysql.jdbc.Driver</span></span><br><span class="line">            <span class="comment">//就在 mysql-connector-java-5.0.8-bin.jar中</span></span><br><span class="line">            <span class="comment">//如果忘记了第一个步骤的导包，就会抛出ClassNotFoundException</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">              </span><br><span class="line">            System.out.println(<span class="string">"数据库驱动加载成功 ！"</span>);</span><br><span class="line">   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤三-建立与数据库的链接"><a href="#步骤三-建立与数据库的链接" class="headerlink" title="步骤三:建立与数据库的链接"></a>步骤三:建立与数据库的链接</h4><p>建立与数据库的Connection连接<br>这里需要提供：</p><ul><li>数据库所处于的ip:127.0.0.1 (本机)</li><li>数据库的端口号： 3306 （mysql专用端口号）</li><li>数据库名称 how2java</li><li>编码方式 UTF-8</li><li>账号 root</li><li>密码 admin</li></ul><blockquote><p>注： 这一步要成功执行，必须建立在mysql中有数据库how2java的基础上.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 建立与数据库的Connection连接</span></span><br><span class="line">            <span class="comment">// 这里需要提供：</span></span><br><span class="line">            <span class="comment">// 数据库所处于的ip:127.0.0.1 (本机)</span></span><br><span class="line">            <span class="comment">// 数据库的端口号： 3306 （mysql专用端口号）</span></span><br><span class="line">            <span class="comment">// 数据库名称 how2java</span></span><br><span class="line">            <span class="comment">// 编码方式 UTF-8</span></span><br><span class="line">            <span class="comment">// 账号 root</span></span><br><span class="line">            <span class="comment">// 密码 admin</span></span><br><span class="line">  </span><br><span class="line">            Connection c = DriverManager</span><br><span class="line">                    .getConnection(</span><br><span class="line">                            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                            <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">  </span><br><span class="line">            System.out.println(<span class="string">"连接成功，获取连接对象： "</span> + c);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤四-创建Statement"><a href="#步骤四-创建Statement" class="headerlink" title="步骤四:创建Statement"></a>步骤四:创建Statement</h4><p>Statement是用于执行SQL语句的，比如增加，删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">  </span><br><span class="line">            Connection c = DriverManager</span><br><span class="line">                    .getConnection(</span><br><span class="line">                            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                            <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 注意：使用的是 java.sql.Statement</span></span><br><span class="line">            <span class="comment">// 不要不小心使用到： com.mysql.jdbc.Statement;</span></span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line">  </span><br><span class="line">            System.out.println(<span class="string">"获取 Statement对象： "</span> + s);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤五-执行SQL语句"><a href="#步骤五-执行SQL语句" class="headerlink" title="步骤五:执行SQL语句"></a>步骤五:执行SQL语句</h4><p>s.execute执行sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">  </span><br><span class="line">            Connection c = DriverManager</span><br><span class="line">                    .getConnection(</span><br><span class="line">                            <span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                            <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">  </span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 准备sql语句</span></span><br><span class="line">            <span class="comment">// 注意： 字符串要用单引号'</span></span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span>+<span class="string">"'提莫'"</span>+<span class="string">","</span>+<span class="number">313.0f</span>+<span class="string">","</span>+<span class="number">50</span>+<span class="string">")"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">  </span><br><span class="line">            System.out.println(<span class="string">"执行插入语句成功"</span>);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤六-关闭连接"><a href="#步骤六-关闭连接" class="headerlink" title="步骤六:关闭连接"></a><strong>步骤六:关闭连接</strong></h4><p>数据库的连接是有限资源，相关操作结束后，养成关闭数据库的好习惯<br>先关闭Statement<br>后关闭Connection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        Connection c = <span class="keyword">null</span>;</span><br><span class="line">        Statement s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, <span class="string">"root"</span>,</span><br><span class="line">                    <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            s = c.createStatement();</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line"> </span><br><span class="line">            s.execute(sql);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 数据库的连接时有限资源，相关操作结束后，养成关闭数据库的好习惯</span></span><br><span class="line">            <span class="comment">// 先关闭Statement</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 后关闭Connection</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    c.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动关闭连接"><a href="#自动关闭连接" class="headerlink" title="自动关闭连接"></a>自动关闭连接</h4><p>如果觉得上一步的关闭连接的方式很麻烦，可以参考关闭流的方式，使用<strong>try-with-resource</strong>的方式自动关闭连接，因为Connection和Statement都实现了AutoCloseable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">              </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDBC增-删-改"><a href="#JDBC增-删-改" class="headerlink" title="JDBC增,删,改"></a>JDBC增,删,改</h3><p>CRUD是最常见的数据库操作，即增删改查<br><strong>C</strong> 增加(Create)<br><strong>R</strong> 读取查询(Retrieve)<br><strong>U</strong> 更新(Update)<br><strong>D</strong> 删除(Delete) </p><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>用于向数据库里插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"delete from hero where id = 5"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"update hero set name = 'name 5' where id = 3"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java高级_反射机制</title>
      <link href="/2019/08/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E9%AB%98%E7%BA%A7_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/08/20/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E9%AB%98%E7%BA%A7_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到高级啦!<br>反射机制</center><a id="more"></a><h3 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h3><p><strong>类对象的概念:</strong>所有的类,都存在一个<strong>类对象</strong> ,这个类对象用于提供类本身的信息,比如有几种构造方法,有多少属性,有哪些普通方法.</p><h4 id="什么是类对象"><a href="#什么是类对象" class="headerlink" title="什么是类对象"></a>什么是类对象</h4><p>同一个类的不同对象,区别在于，各自有不同的属性值。</p><p>类之间的区别在于有<strong>不同的方法，不同的属性</strong>。</p><p><strong>类对象</strong>，就是用于描述这种类，都有什么属性，什么方法的 .</p><h4 id="获取类对象-1"><a href="#获取类对象-1" class="headerlink" title="获取类对象"></a>获取类对象</h4><p><strong>获取类对象有三种方式:</strong> </p><ol><li><p>Class.forName</p></li><li><p>类名.class</p></li><li><p>new Hero().getClass()</p><p>在一个JVM中，一种类，只会有一个类对象存在。所以以上三种方式取出来的类对象，都是一样的。</p></li></ol><blockquote><p> <strong>注：</strong> 准确的讲是一个ClassLoader下，一种类，只会有一个类对象存在。通常一个JVM下，只会有一个ClassLoader。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class pClass1=Class.forName(className);</span><br><span class="line">Class pClass2=Hero.class;</span><br><span class="line">Class pClass3=<span class="keyword">new</span> Hero().getClass();</span><br></pre></td></tr></table></figure><h4 id="获取类对象时会导致属性被初始化"><a href="#获取类对象时会导致属性被初始化" class="headerlink" title="获取类对象时会导致属性被初始化"></a>获取类对象时会导致属性被初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String copyright;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"初始化 copyright"</span>);</span><br><span class="line">    copyright = <span class="string">"版权由Riot Games公司所有"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论什么途径获取类对象，都会导致静态属性被初始化，而且只会执行一次。（除了直接使用 Class c = Hero.class 这种方式，这种方式不会导致静态属性被初始化）</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>与传统的通过new 来获取对象的方式不同<br>反射机制，会先拿到“类对象”,然后通过类对象获取“构造器对象”<br>再通过构造器对象创建一个对象</p><h4 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传统的使用new的方式创建对象</span></span><br><span class="line">        Hero h1 =<span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"teemo"</span>;</span><br><span class="line">        System.out.println(h1);</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用反射的方式创建对象</span></span><br><span class="line">            String className = <span class="string">"charactor.Hero"</span>;</span><br><span class="line">            <span class="comment">//类对象</span></span><br><span class="line">            Class pClass=Class.forName(className);</span><br><span class="line">            <span class="comment">//构造器</span></span><br><span class="line">            Constructor c= pClass.getConstructor();</span><br><span class="line">            <span class="comment">//通过构造器实例化</span></span><br><span class="line">            Hero h2= (Hero) c.newInstance();</span><br><span class="line">            h2.name=<span class="string">"gareen"</span>;</span><br><span class="line">            System.out.println(h2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p>通过反射机制修改对象的属性.</p><p><strong>public的类型可以直接访问,对于private修饰的成员,需要setAccessible(true)才能访问.</strong></p><h4 id="TestRelection"><a href="#TestRelection" class="headerlink" title="TestRelection"></a>TestRelection</h4><p>通过反射修改属性的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Hero h =<span class="keyword">new</span> Hero();</span><br><span class="line">            <span class="comment">//使用传统方式修改name的值为garen</span></span><br><span class="line">            h.name = <span class="string">"garen"</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取类Hero的名字叫做name的字段</span></span><br><span class="line">                Field f1= h.getClass().getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">                <span class="comment">//修改这个字段的值</span></span><br><span class="line">                f1.set(h, <span class="string">"teemo"</span>);</span><br><span class="line">                <span class="comment">//打印被修改后的值</span></span><br><span class="line">                System.out.println(h.name);</span><br><span class="line">                 </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getField和getDeclaredField的区别"><a href="#getField和getDeclaredField的区别" class="headerlink" title="getField和getDeclaredField的区别"></a>getField和getDeclaredField的区别</h4><p>这两个方法都是用于获取字段<br>getField <strong>只能获取</strong>public的，包括<strong>从父类继承</strong>来的字段。<br>getDeclaredField 可以获取本类所有的字段，<strong>包括private</strong>的，但是<strong>不能获取继承</strong>来的字段。 (<strong>注</strong>： 这里只能获取到private的<strong>字段</strong>，但并不能访问该private字段的<strong>值</strong>,除非加上<strong>setAccessible(true)</strong>)</p><h4 id="反射机制调用方法"><a href="#反射机制调用方法" class="headerlink" title="反射机制调用方法"></a>反射机制调用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取这个名字叫做setName，参数类型是String的方法</span></span><br><span class="line">            Method m = h.getClass().getMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line">            <span class="comment">// 对h对象，调用这个方法</span></span><br><span class="line">            m.invoke(h, <span class="string">"盖伦"</span>);</span><br><span class="line">            <span class="comment">// 使用传统的方式，调用getName方法</span></span><br><span class="line">            System.out.println(h.getName());</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射机制的作用"><a href="#反射机制的作用" class="headerlink" title="反射机制的作用"></a>反射机制的作用</h4><p>需要在学习了Spring 的依赖注入，反转控制之后，才会对反射有更好的理解.</p><p><strong>简单而言就是:</strong>通过配置文件的方式,将原来需要通过修改代码,重新编译的事情,可以通过修改配置文件来实现.</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java中级_泛型</title>
      <link href="/2019/08/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_%E6%B3%9B%E5%9E%8B/"/>
      <url>/2019/08/19/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到中级啦!<br>泛型</center><a id="more"></a><h3 id="集合中的泛型"><a href="#集合中的泛型" class="headerlink" title="集合中的泛型"></a>集合中的泛型</h3><h4 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h4><p><strong>好处:    泛型表示这种容器，</strong>只能存放该类型<strong>，其他就放不进去了。</strong></p><p><strong>用法:</strong>    容器后面添加<type><br>            Type可以是类，抽象类，接口</type></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> charactor.APHero;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;APHero&gt; heros = <span class="keyword">new</span> ArrayList&lt;APHero&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只有APHero可以放进去    </span></span><br><span class="line">        heros.add(<span class="keyword">new</span> APHero());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//ADHero甚至放不进去</span></span><br><span class="line">        <span class="comment">//heros.add(new ADHero());</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//获取的时候也不需要进行转型，因为取出来一定是APHero</span></span><br><span class="line">        APHero apHero =  heros.get(<span class="number">0</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="子类对象"><a href="#子类对象" class="headerlink" title="子类对象"></a>子类对象</h4><p>如果将集合的泛型设为父类,则其子类都可以存进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> property.Item;</span><br><span class="line"><span class="keyword">import</span> charactor.ADHero;</span><br><span class="line"><span class="keyword">import</span> charactor.APHero;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只有作为Hero的子类可以放进去     </span></span><br><span class="line">        heros.add(<span class="keyword">new</span> APHero());</span><br><span class="line">        heros.add(<span class="keyword">new</span> ADHero());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//和Hero无关的类型Item还是放不进去</span></span><br><span class="line">        <span class="comment">//heros.add(new Item());</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型的简写"><a href="#泛型的简写" class="headerlink" title="泛型的简写"></a>泛型的简写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Hero&gt; heros2 = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//JDK7以后支持</span></span><br></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h4 id="extends"><a href="#extends" class="headerlink" title="?extends"></a>?extends</h4><p>ArrayList heroList&lt;? extends Hero&gt; 表示这是一个Hero泛型或者其子类泛型<br>heroList 的泛型可能是Hero<br>heroList 的泛型可能是APHero<br>heroList 的泛型可能是ADHero<br>所以 可以确凿的是，<strong>从heroList取出来的对象，一定是可以转型成Hero的</strong></p><p>但是，不能往里面放东西，因为<br>放APHero就不满足ADHero类<br>放ADHero又不满足APHero类  </p><h4 id="super"><a href="#super" class="headerlink" title="?super"></a>?super</h4><p>ArrayList heroList&lt;? super Hero&gt; 表示这是一个Hero泛型或者其父类泛型<br>heroList的泛型可能是Hero<br>heroList的泛型可能是Object</p><p><strong>可以往里面插入Hero以及Hero的子类</strong><br>但是取出来有风险，因为不确定取出来是Hero还是Object  </p><h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符?"></a>泛型通配符?</h4><p>  泛型通配符? 代表任意泛型<br>既然?代表任意泛型，那么换句话说，这个容器什么泛型都有可能</p><p>所以只能以Object的形式取出来<br>并且不能往里面放对象，因为不知道到底是一个什么泛型的容器  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果希望只取出，不插入，就使用? extends Hero<br>如果希望只插入，不取出，就使用? super Hero<br>如果希望，又能插入，又能取出，就不要用通配符？</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo点击标签,分类显示不全或报错</title>
      <link href="/2019/08/19/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_Hexo_1/"/>
      <url>/2019/08/19/%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97_Hexo_1/</url>
      
        <content type="html"><![CDATA[<center>    gulp压缩报错<br>上传后部分标签,分类点击报错</center><a id="more"></a><h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因:"></a>报错原因:</h3><p>没找到具体原因,但是根据我的修改内容,原因大概是,<strong>hexo博客框架在识别标签</strong>,分类时,不区分大小写,当你的博客既有大写,如:<code>Java</code>,又有小写,如<code>java</code>,这是Hexo就傻了,他根据标签同时建立了Java和java两个标签,识别的内容却是一样的,这样就导致,它将全部的内容放在一个标签下,另一个标签虽然数量和这个标签一致但是,由于没有内容,当你点击时它找不到,所以就报错了,及404.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>很简单,把所有文章的tags,categories:两项统一一下</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java中级_集合框架</title>
      <link href="/2019/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>刷到中级啦!<br>集合框架</center><a id="more"></a><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="集合框架与数组的区别"><a href="#集合框架与数组的区别" class="headerlink" title="集合框架与数组的区别"></a>集合框架与数组的区别</h4><p><strong>数组的局限性:</strong>不够灵活,少了放不下,多了不够放.</p><h4 id="ArrayList存放对象"><a href="#ArrayList存放对象" class="headerlink" title="ArrayList存放对象"></a><strong>ArrayList存放对象</strong></h4><p>为了解决数组的局限性,引入了容器类的概念.</p><p>最长见的容器类就是ArrayList</p><p>容器的容量会随着对象的增加,自动增长.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//容器类ArrayList，用于存放对象</span></span><br><span class="line">        ArrayList heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>));</span><br><span class="line">        System.out.println(heros.size());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//容器的容量"capacity"会随着对象的增加，自动增长</span></span><br><span class="line">        <span class="comment">//只需要不断往容器里增加英雄即可，不用担心会出现数组的边界问题。</span></span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>));</span><br><span class="line">        System.out.println(heros.size());       </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th align="center">关键词</th><th align="center">简介</th><th align="center">示例代码</th></tr></thead><tbody><tr><td align="center">add</td><td align="center">增加</td><td align="center">加在最后:<code>heros.add(new Hero(&quot;hero &quot; + i));</code><br>加在指定位置:’<code>heros.add(3, specialHero);</code></td></tr><tr><td align="center">contains</td><td align="center">判断是否存在<br>(标准:是否是同一个对象,而不是name相同)</td><td align="center"><code>heros.contains(hero)</code></td></tr><tr><td align="center">get</td><td align="center">获取指定位置的对象</td><td align="center"><code>heros.get(下标)</code></td></tr><tr><td align="center">indexOf</td><td align="center">获取对象所处位置<br>(标准:是否是同一个对象,而不是name相同)</td><td align="center"><code>heros.indexOf(hero)</code></td></tr><tr><td align="center">remove</td><td align="center">删除</td><td align="center">根据下标删除:<code>heros.remove(下标)</code><br>根据元素删除:<code>heros.remove(对象)</code></td></tr><tr><td align="center">set</td><td align="center">替换</td><td align="center"><code>heros.set(下标,元素)</code></td></tr><tr><td align="center">size</td><td align="center">获取大小</td><td align="center"><code>hero.size()</code></td></tr><tr><td align="center">toArray</td><td align="center">转化为数组</td><td align="center"><code>heros.toArray(new Hero[]{})</code></td></tr><tr><td align="center">addAll</td><td align="center">把另一个容器所有对象都加进来</td><td align="center"><code>heros.addAll(otherHeros)</code></td></tr><tr><td align="center">clear</td><td align="center">清空</td><td align="center"><code>heros.clear()</code></td></tr></tbody></table><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><p>ArrayList实现了接口List<br>常见的写法会把引用声明为接口List类型</p><blockquote><p>注意：是<strong>java.util.List</strong>,而<strong>不是</strong>java.awt.List </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ArrayList实现了接口List</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//常见的写法会把引用声明为接口List类型</span></span><br><span class="line">        <span class="comment">//注意：是java.util.List,而不是java.awt.List</span></span><br><span class="line">        <span class="comment">//接口引用指向子类对象（多态）</span></span><br><span class="line">         </span><br><span class="line">        List heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>));</span><br><span class="line">        System.out.println(heros.size());        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型Generic"><a href="#泛型Generic" class="headerlink" title="泛型Generic"></a>泛型Generic</h4><p><strong>泛型Generic</strong></p><p>不指定泛型的容器，可以存放任何类型的元素<br>指定了泛型的容器，只能存放指定类型的元素以及其子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> property.Item;</span><br><span class="line"><span class="keyword">import</span> charactor.APHero;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//对于不使用泛型的容器，可以往里面放英雄，也可以往里面放物品</span></span><br><span class="line">        List heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">          </span><br><span class="line">        heros.add(<span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>));</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//本来用于存放英雄的容器，现在也可以存放物品了</span></span><br><span class="line">        heros.add(<span class="keyword">new</span> Item(<span class="string">"冰杖"</span>));</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//对象转型会出现问题</span></span><br><span class="line">        Hero h1=  (Hero) heros.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//尤其是在容器里放的对象太多的时候，就记不清楚哪个位置放的是哪种类型的对象了</span></span><br><span class="line">        Hero h2=  (Hero) heros.get(<span class="number">1</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//引入泛型Generic</span></span><br><span class="line">        <span class="comment">//声明容器的时候，就指定了这种容器，只能放Hero，放其他的就会出错</span></span><br><span class="line">        List&lt;Hero&gt; genericheros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">        genericheros.add(<span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>));</span><br><span class="line">        <span class="comment">//如果不是Hero类型，根本就放不进去</span></span><br><span class="line">        <span class="comment">//genericheros.add(new Item("冰杖"));</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//除此之外，还能存放Hero的子类</span></span><br><span class="line">        genericheros.add(<span class="keyword">new</span> APHero());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//并且在取出数据的时候，不需要再进行转型了，因为里面肯定是放的Hero或者其子类</span></span><br><span class="line">        Hero h = genericheros.get(<span class="number">0</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型简写</strong></p><p>为了不报错,需要前后都加泛型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Hero&gt; genericheros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br></pre></td></tr></table></figure><p>JDK7提供了简写方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Hero&gt; genericheros2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a><strong>遍历集合</strong></h4><p><strong>for循环遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 放5个Hero进入容器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">"hero name "</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一种遍历 for循环</span></span><br><span class="line">        System.out.println(<span class="string">"--------for 循环-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heros.size(); i++) &#123;<span class="comment">//通过.size()获取大小</span></span><br><span class="line">            Hero h = heros.get(i);<span class="comment">//通过.get获取指定元素</span></span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//放5个Hero进入容器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">"hero name "</span> +i));</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种遍历，使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">"--------使用while的iterator-------"</span>);</span><br><span class="line">        Iterator&lt;Hero&gt; it= heros.iterator();</span><br><span class="line">        <span class="comment">//从最开始的位置判断"下一个"位置是否有数据</span></span><br><span class="line">        <span class="comment">//如果有就通过next取出来，并且把指针向下移动</span></span><br><span class="line">        <span class="comment">//直到"下一个"位置没有数据</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Hero h = it.next();</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器的for写法</span></span><br><span class="line">        System.out.println(<span class="string">"--------使用for的iterator-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Hero&gt; iterator = heros.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            Hero hero = (Hero) iterator.next();</span><br><span class="line">            System.out.println(hero);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>增强for循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 放5个Hero进入容器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">"hero name "</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第三种，增强型for循环</span></span><br><span class="line">        System.out.println(<span class="string">"--------增强型for循环-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Hero h : heros) &#123;</span><br><span class="line">            System.out.println(h);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他集合"><a href="#其他集合" class="headerlink" title="其他集合"></a>其他集合</h3><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><table><thead><tr><th align="center">分类</th><th align="center">简称</th><th align="center">别称</th></tr></thead><tbody><tr><td align="center">先进先出</td><td align="center">FIFO</td><td align="center">队列(Queue)</td></tr><tr><td align="center">先进后出</td><td align="center">FILO</td><td align="center">栈(Stack)</td></tr></tbody></table><blockquote><p><strong>注:</strong>LinkList也实现了List接口,所以也有相关方法.</p></blockquote><p><strong>双向链表</strong></p><p>除了实现了List接口外，LinkedList还实现了<strong>双向链表结构</strong>Deque，可以很方便的在头尾插入删除数据</p><blockquote><p><strong>什么是链表结构</strong>: 与数组结构相比较，数组结构，就好像是电影院，每个位置都有标示，每个位置之间的间隔都是一样的。 而链表就相当于佛珠，每个珠子，只连接前一个和后一个，不用关心除此之外的其他佛珠在哪里。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//LinkedList是一个双向链表结构的list</span></span><br><span class="line">        LinkedList&lt;Hero&gt; ll =<span class="keyword">new</span> LinkedList&lt;Hero&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//所以可以很方便的在头部和尾部插入数据</span></span><br><span class="line">        <span class="comment">//在最后插入新的英雄</span></span><br><span class="line">        ll.addLast(<span class="keyword">new</span> Hero(<span class="string">"hero1"</span>));</span><br><span class="line">        ll.addLast(<span class="keyword">new</span> Hero(<span class="string">"hero2"</span>));</span><br><span class="line">        ll.addLast(<span class="keyword">new</span> Hero(<span class="string">"hero3"</span>));</span><br><span class="line">        System.out.println(ll);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//在最前面插入新的英雄</span></span><br><span class="line">        ll.addFirst(<span class="keyword">new</span> Hero(<span class="string">"heroX"</span>));</span><br><span class="line">        System.out.println(ll);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//查看最前面的英雄</span></span><br><span class="line">        System.out.println(ll.getFirst());</span><br><span class="line">        <span class="comment">//查看最后面的英雄</span></span><br><span class="line">        System.out.println(ll.getLast());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//查看不会导致英雄被删除</span></span><br><span class="line">        System.out.println(ll);</span><br><span class="line">        <span class="comment">//取出最前面的英雄</span></span><br><span class="line">        System.out.println(ll.removeFirst());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//取出最后面的英雄</span></span><br><span class="line">        System.out.println(ll.removeLast());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//取出会导致英雄被删除</span></span><br><span class="line">        System.out.println(ll);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>队列 - Queue</strong></p><p>LinkedList 除了实现了List和Deque外，还实现了<strong>Queue</strong>接口(队列)。<br>Queue是先进先出队列 <strong>FIFO</strong>，常用方法：</p><blockquote><p><strong>offer</strong> 在最后添加元素<br><strong>poll</strong> 取出第一个元素<br><strong>peek</strong> 查看第一个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//和ArrayList一样，LinkedList也实现了List接口</span></span><br><span class="line">        List ll =<span class="keyword">new</span> LinkedList&lt;Hero&gt;();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//所不同的是LinkedList还实现了Deque，进而又实现了Queue这个接口</span></span><br><span class="line">        <span class="comment">//Queue代表FIFO 先进先出的队列</span></span><br><span class="line">        Queue&lt;Hero&gt; q= <span class="keyword">new</span> LinkedList&lt;Hero&gt;();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//加在队列的最后面</span></span><br><span class="line">        System.out.print(<span class="string">"初始化队列：\t"</span>);</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">"Hero1"</span>));</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">"Hero2"</span>));</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">"Hero3"</span>));</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">"Hero4"</span>));</span><br><span class="line">          </span><br><span class="line">        System.out.println(q);</span><br><span class="line">        System.out.print(<span class="string">"把第一个元素取poll()出来:\t"</span>);</span><br><span class="line">        <span class="comment">//取出第一个Hero，FIFO 先进先出</span></span><br><span class="line">        Hero h = q.poll();</span><br><span class="line">        System.out.println(h);</span><br><span class="line">        System.out.print(<span class="string">"取出第一个元素之后的队列:\t"</span>);</span><br><span class="line">        System.out.println(q);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//把第一个拿出来看一看，但是不取出来</span></span><br><span class="line">        h=q.peek();</span><br><span class="line">        System.out.print(<span class="string">"查看peek()第一个元素:\t"</span>);</span><br><span class="line">        System.out.println(h);</span><br><span class="line">        System.out.print(<span class="string">"查看并不会导致第一个元素被取出来:\t"</span>);</span><br><span class="line">        System.out.println(q);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><strong>二叉树概念</strong></p><blockquote><p><strong>组成:</strong>二叉树由节点组成</p><p><strong>特点:</strong>每个节点都可以由左子节点,右子节点</p><p>​         每个节点都有一个值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="keyword">public</span> Node leftNode;</span><br><span class="line">    <span class="comment">// 右子节点</span></span><br><span class="line">    <span class="keyword">public</span> Node rightNode;</span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">public</span> Object value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二叉树排序-插入排序</strong></p><p><strong>基本逻辑:</strong>小,相同的放左边,大的放右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前节点没有值，就把数据放在当前节点上</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == value)</span><br><span class="line">        value = v;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果当前节点有值，就进行判断，新增的值与当前值的大小关系</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 新增的值，比当前值小或者相同</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> ((Integer) v -((Integer)value) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == leftNode)</span><br><span class="line">                leftNode = <span class="keyword">new</span> Node();</span><br><span class="line">            leftNode.add(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新增的值，比当前值大</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == rightNode)</span><br><span class="line">                rightNode = <span class="keyword">new</span> Node();</span><br><span class="line">            rightNode.add(v);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二叉树排序-遍历</strong></p><p>二叉树的遍历分为:</p><ul><li><strong>左序</strong>    :    中间的数遍历后放在左边</li><li><strong>中序</strong>    :    中间的数遍历后放在中间</li><li><strong>右序</strong>    :    中间的数遍历后放在右边</li></ul><p>我们 采用<strong>中序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 中序遍历所有的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 左节点的遍历结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != leftNode)</span><br><span class="line">            values.addAll(leftNode.values());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 当前节点</span></span><br><span class="line">        values.add(value);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 右节点的遍历结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rightNode)</span><br><span class="line">  </span><br><span class="line">            values.addAll(rightNode.values());</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><strong>HashMap的键值对</strong></p><p>HashMap储存数据的方式–<strong>键值对</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; dictionary = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dictionary.put(<span class="string">"adc"</span>, <span class="string">"物理英雄"</span>);</span><br><span class="line">        dictionary.put(<span class="string">"apc"</span>, <span class="string">"魔法英雄"</span>);</span><br><span class="line">        dictionary.put(<span class="string">"t"</span>, <span class="string">"坦克"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(dictionary.get(<span class="string">"t"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>键不能重复,值可以重复</strong></p><p>对于HashMap而言,key是唯一的,不可重复的.</p><p>所以,以相同的key 把不同的value插入到 Map中会导致旧元素被覆盖，只留下最后插入的元素。<br>不过，同一个对象可以作为值插入到map中，只要对应的key不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,Hero&gt; heroMap = <span class="keyword">new</span> HashMap&lt;String,Hero&gt;();</span><br><span class="line">         </span><br><span class="line">        heroMap.put(<span class="string">"gareen"</span>, <span class="keyword">new</span> Hero(<span class="string">"gareen1"</span>));</span><br><span class="line">        System.out.println(heroMap);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//key为gareen已经有value了，再以gareen作为key放入数据，会导致原英雄，被覆盖</span></span><br><span class="line">        <span class="comment">//不会增加新的元素到Map中</span></span><br><span class="line">        heroMap.put(<span class="string">"gareen"</span>, <span class="keyword">new</span> Hero(<span class="string">"gareen2"</span>));</span><br><span class="line">        System.out.println(heroMap);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//清空map</span></span><br><span class="line">        heroMap.clear();</span><br><span class="line">        Hero gareen = <span class="keyword">new</span> Hero(<span class="string">"gareen"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//同一个对象可以作为值插入到map中，只要对应的key不一样</span></span><br><span class="line">        heroMap.put(<span class="string">"hero1"</span>, gareen);</span><br><span class="line">        heroMap.put(<span class="string">"hero2"</span>, gareen);</span><br><span class="line">         </span><br><span class="line">        System.out.println(heroMap);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p><strong>元素不能重复</strong></p><p>set中的元素不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        HashSet&lt;String&gt; names = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">         </span><br><span class="line">        names.add(<span class="string">"gareen"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(names);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二次插入同样的数据，是插不进去的，容器中只会保留一个</span></span><br><span class="line">        names.add(<span class="string">"gareen"</span>);</span><br><span class="line">        System.out.println(names);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>没有顺序</strong></p><p>Set中的元素，没有顺序。<br>严格的说，是没有按照元素的插入顺序排列</p><p>HashSet的具体顺序，既不是按照插入顺序，也不是按照hashcode的顺序。  </p><p>以下是<strong>HashSet源代码</strong>中的部分注释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * It makes no guarantees as to the iteration order of the set; </span><br><span class="line"> * in particular, it does not guarantee that the order will remain constant over time. </span><br><span class="line"> * 不保证Set的迭代顺序; 确切的说，在不同条件下，元素的顺序都有可能不一样</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>换句话说，同样是插入0-9到HashSet中， 在JVM的不同版本中，看到的顺序都是不一样的。 所以在开发的时候，不能依赖于某种<strong>臆测顺序</strong>，这个顺序本身是<strong>不稳定的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; numbers = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"> </span><br><span class="line">        numbers.add(<span class="number">9</span>);</span><br><span class="line">        numbers.add(<span class="number">5</span>);</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Set中的元素排列，不是按照插入顺序</span></span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历</strong></p><p>Set不提供get()来获取指定位置的元素<br>所以遍历需要用到迭代器，或者增强型for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; numbers = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Set不提供get方法来获取指定位置的元素</span></span><br><span class="line">        <span class="comment">//numbers.get(0)</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//遍历Set可以采用迭代器iterator</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Integer&gt; iterator = numbers.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            Integer i = (Integer) iterator.next();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//或者采用增强型for循环</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : numbers) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a><strong>Collection</strong></h4><p>Collection是一个接口</p><p>Collection是Set List Queue和Deque的接口</p><blockquote><p><strong>注:</strong>Queue先进先出队列</p><p><strong>注:</strong>Deque双向链表</p><p><strong>注：</strong>Collection和Map之间没有关系，Collection是放一个一个对象的，Map 是放键值对的<br><strong>注：</strong>Deque 继承 Queue,间接的继承了 Collection</p></blockquote><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><p>Collections是一个类，容器的工具类,就如同Arrays是数组的工具类.</p><table><thead><tr><th align="center">关键字</th><th align="center">简介</th><th align="center">示例代码</th></tr></thead><tbody><tr><td align="center">severse</td><td align="center">反转</td><td align="center"><code>Collections.reverse(集合);</code></td></tr><tr><td align="center">shuffle</td><td align="center">混淆</td><td align="center"><code>Collections.shuffle(集合);</code></td></tr><tr><td align="center">sort</td><td align="center">排序</td><td align="center"><code>Collections.shuffle(numbers);</code></td></tr><tr><td align="center">swap</td><td align="center">交换</td><td align="center"><code>Collections.swap(集合,元素下标1,元素下表2);</code></td></tr><tr><td align="center">rotate</td><td align="center">滚动<br>(把List中的数据，向右滚动指定单位的长度)</td><td align="center"><code>Collections.rotate(集合,滚动单位);</code></td></tr><tr><td align="center">synchronizedList</td><td align="center">线程安全化<br><strong>synchronizedList</strong> 把非线程安全的List转换为线程安全的List。</td><td align="center"><code>List&lt;Integer&gt; synchronizedNumbers = (List&lt;Integer&gt;)</code></td></tr></tbody></table><h3 id="关系与区别"><a href="#关系与区别" class="headerlink" title="关系与区别"></a>关系与区别</h3><h4 id="ArrayList-VS-HashSet"><a href="#ArrayList-VS-HashSet" class="headerlink" title="ArrayList VS HashSet"></a><strong>ArrayList VS HashSet</strong></h4><table><thead><tr><th align="center"></th><th align="center">ArrayList</th><th align="center">HashSet</th></tr></thead><tbody><tr><td align="center">是否有序</td><td align="center">有</td><td align="center">无</td></tr><tr><td align="center">能否重复</td><td align="center">可以</td><td align="center">不可以</td></tr></tbody></table><h4 id="ArrayList-VS-LinkList"><a href="#ArrayList-VS-LinkList" class="headerlink" title="ArrayList VS  LinkList"></a>ArrayList VS  LinkList</h4><table><thead><tr><th align="center"></th><th align="center">ArrayList</th><th align="center">LinkList</th></tr></thead><tbody><tr><td align="center">插入删除</td><td align="center">慢</td><td align="center">快</td></tr><tr><td align="center">定位</td><td align="center">快</td><td align="center">慢</td></tr><tr><td align="center">线程安全</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">底层数据结构</td><td align="center">Object数组</td><td align="center">双向链表(JDK1.6之前为循环链表)</td></tr><tr><td align="center">支持快速随机访问</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">内存空间占用</td><td align="center">少(预留空间)</td><td align="center">多(每个都要村前驱后继)</td></tr></tbody></table><blockquote><p><strong>补充:</strong>关于<code>RandomAccess</code>接口</p><p>通过源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">public</span> interface <span class="title">RandomAccess</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>发现实际上 <code>RandomAccess</code> 接口中什么都没有定义。所以，<code>RandomAccess</code> 接口应该是标识实现这个接口的类具有随机访问功能。</p><p>在 <code>binarySearch（</code>）方法中，它要判断传入的list 是否 <code>RamdomAccess</code> 的实例，如果是，调用<code>indexedBinarySearch（）</code>方法，如果不是，那么调用<code>iteratorBinarySearch（）</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; list, T key)</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess || list.size()&lt;BINARYSEARCH_THRESHOLD)</span><br><span class="line">&gt;             <span class="keyword">return</span> Collections.indexedBinarySearch(list, key);</span><br><span class="line">&gt;         <span class="keyword">else</span></span><br><span class="line">&gt;             <span class="keyword">return</span> Collections.iteratorBinarySearch(list, key);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>ArrayList</code> 实现了 <code>RandomAccess</code> 接口， 而 <code>LinkedList</code> 没有实现。为什么呢？和底层数据结构有关！<code>ArrayList</code> 底层是数组，而 <code>LinkedList</code> 底层是链表。数组天然支持随机访问，时间复杂度为 O（1），所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O（n），所以不支持快速随机访问。，<code>ArrayList</code> 实现了 <code>RandomAccess</code> 接口，就表明了他具有快速随机访问功能。 <code>RandomAccess</code> 接口只是标识，并不是说 <code>ArrayList</code> 实现 <code>RandomAccess</code> 接口才具有快速随机访问功能的！</p><blockquote><p>摘自:<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.md" target="_blank" rel="noopener">gitHub</a></p></blockquote><p>所以:</p><p>在选择遍历方式上:</p><ul><li>实现了 <code>RandomAccess</code> 接口的list，优先选择普通 for 循环 ，其次 foreach,</li><li>未实现 <code>RandomAccess</code>接口的list，优先选择iterator遍历（foreach遍历底层也是通过iterator实现的,），大size的数据，千万不要使用普通for循环<ul><li>原因: <strong>LinkedList在get任何一个位置的数据的时候，都会把前面的数据走一遍</strong>。 </li></ul></li></ul></blockquote><h4 id="HashMap-VS-HashTable"><a href="#HashMap-VS-HashTable" class="headerlink" title="HashMap VS HashTable"></a>HashMap VS HashTable</h4><table><thead><tr><th align="center"></th><th align="center">HashMap</th><th align="center">HashTable</th></tr></thead><tbody><tr><td align="center">对Null key和Null value的支持</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center">是不是线程安全类</td><td align="center">不是</td><td align="center">是</td></tr><tr><td align="center">效率</td><td align="center">比隔壁的高</td><td align="center">基本被淘汰不要再代码中使用</td></tr><tr><td align="center">初始容量大小和每次扩容大小的不同</td><td align="center">初始大小为16,之后每次扩充，容量变为原来的2倍。,如果给定初始容量则将其扩充为2的幂次方大小</td><td align="center">初始大小为11,扩容变为原来的2n+1,如果给定初始容量,则用给定值</td></tr><tr><td align="center">底层数据结构</td><td align="center">表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</td><td align="center">没有转化机制</td></tr></tbody></table><blockquote><p><strong>为什么HashMap的长度是2的幂次方?</strong></p><h2 id="HashMap-的长度为什么是2的幂次方"><a href="#HashMap-的长度为什么是2的幂次方" class="headerlink" title="HashMap 的长度为什么是2的幂次方"></a>HashMap 的长度为什么是2的幂次方</h2><p>为了能让 HashMap 存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀。我们上面也讲到了过了，Hash 值的范围值-2147483648到2147483647，前后加起来大概40亿的映射空间，只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。但问题是一个40亿长度的数组，内存是放不下的。所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来要存放的位置也就是对应的数组下标。这个数组下标的计算方法是“ <code>(n - 1) &amp; hash</code>”。（n代表数组长度）。这也就解释了 HashMap 的长度为什么是2的幂次方。</p><p><strong>这个算法应该如何设计呢？</strong></p><p>我们首先可能会想到采用%取余的操作来实现。但是，重点来了：<strong>“取余(%)操作中如果除数是2的幂次则等价于与其除数减一的与(&amp;)操作（也就是说 hash%length==hash&amp;(length-1)的前提是 length 是2的 n 次方；）。”</strong> 并且 <strong>采用二进制位操作 &amp;，相对于%能够提高运算效率，这就解释了 HashMap 的长度为什么是2的幂次方。</strong></p></blockquote><h4 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h4><table><thead><tr><th align="center"></th><th align="center">HashSet</th><th align="center">LinkedSet</th><th align="center">TreeSet</th></tr></thead><tbody><tr><td align="center">是否有序</td><td align="center">无序</td><td align="center">按照插入顺序</td><td align="center">从小到大</td></tr></tbody></table><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><h4 id="List-Set-Map三者的区别"><a href="#List-Set-Map三者的区别" class="headerlink" title="List,Set,Map三者的区别:"></a>List,Set,Map三者的区别:</h4><ul><li><strong>List(对付顺序的好帮手)：</strong> List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象</li><li><strong>Set(注重独一无二的性质):</strong> 不允许重复的集合。不会有多个元素引用相同的对象。</li><li><strong>Map(用Key来搜索的专家):</strong> 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</li></ul><h4 id="ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢？"><a href="#ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢？" class="headerlink" title="ArrayList 与 Vector 区别呢?为什么要用Arraylist取代Vector呢？"></a>ArrayList 与 Vector 区别呢?为什么要用Arraylist取代Vector呢？</h4><p><code>Vector</code>类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector的话代码要在同步操作上耗费大量的时间。</p><p><code>Arraylist</code>不是同步的，所以在不需要保证线程安全时建议使用Arraylist。</p><h4 id="HashSet如何检查重复"><a href="#HashSet如何检查重复" class="headerlink" title="HashSet如何检查重复"></a>HashSet如何检查重复</h4><p> 当你把对象加入<code>HashSet</code>时，HashSet会先计算对象的<code>hashcode</code>值来判断对象加入的位置，同时也会与其他加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用<code>equals（）</code>方法来检查hashcode相等的对象是否真的相同。如果两者相同，HashSet就不会让加入操作成功。 </p><p><strong>hashCode（）与equals（）的相关规定：</strong></p><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个equals方法返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li></ol><p><strong>==与equals的区别</strong></p><ol><li>==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同</li><li>==是指对内存地址进行比较 equals()是对字符串的内容进行比较</li><li>==指引用是否相同 equals()指的是值是否相同</li></ol>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java中级_I/O</title>
      <link href="/2019/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_IO/"/>
      <url>/2019/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_IO/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到中级啦!<br>IO</center><a id="more"></a><h3 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h3><p>文件和文件夹都用File代表.</p><h4 id="创建一个文件对象"><a href="#创建一个文件对象" class="headerlink" title="创建一个文件对象"></a>创建一个文件对象</h4><p>使用绝对路径或相对路径创建File对象.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 绝对路径</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"d:/LOLFolder"</span>);</span><br><span class="line">        System.out.println(<span class="string">"f1的绝对路径："</span> + f1.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"LOL.exe"</span>);</span><br><span class="line">        System.out.println(<span class="string">"f2的绝对路径："</span> + f2.getAbsolutePath());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 把f1作为父目录创建文件对象</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(f1, <span class="string">"LOL.exe"</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">"f3的绝对路径："</span> + f3.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件常用方法"><a href="#文件常用方法" class="headerlink" title="文件常用方法"></a>文件常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOLFolder/LOL.exe"</span>);</span><br><span class="line">        System.out.println(<span class="string">"当前文件是："</span> +f);</span><br><span class="line">        <span class="comment">//文件是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"判断是否存在："</span>+f.exists());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//是否是文件夹</span></span><br><span class="line">        System.out.println(<span class="string">"判断是否是文件夹："</span>+f.isDirectory());</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//是否是文件（非文件夹）</span></span><br><span class="line">        System.out.println(<span class="string">"判断是否是文件："</span>+f.isFile());</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//文件长度</span></span><br><span class="line">        System.out.println(<span class="string">"获取文件的长度："</span>+f.length());</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//文件最后修改时间</span></span><br><span class="line">        <span class="keyword">long</span> time = f.lastModified();</span><br><span class="line">        Date d = <span class="keyword">new</span> Date(time);</span><br><span class="line">        System.out.println(<span class="string">"获取文件的最后修改时间："</span>+d);</span><br><span class="line">        <span class="comment">//设置文件修改时间为1970.1.1 08:00:00</span></span><br><span class="line">        f.setLastModified(<span class="number">0</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//文件重命名</span></span><br><span class="line">        File f2 =<span class="keyword">new</span> File(<span class="string">"d:/LOLFolder/DOTA.exe"</span>);</span><br><span class="line">        f.renameTo(f2);</span><br><span class="line">        System.out.println(<span class="string">"把LOL.exe改名成了DOTA.exe"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"注意： 需要在D:\\LOLFolder确实存在一个LOL.exe,\r\n才可以看到对应的文件长度、修改时间等信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong></p><ol><li>需要在D:\LOLFolder确实存在一个LOL.exe,才可以看到对应的文件长度,修改时间等信息.</li><li><strong>rename To 方法用于对物理文件名称进行修改,但不会修改File对象的name属性.</strong></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOLFolder/skin/garen.ski"</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">        f.list();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">        File[]fs= f.listFiles();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 以字符串形式返回获取所在文件夹</span></span><br><span class="line">        f.getParent();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 以文件形式返回获取所在文件夹</span></span><br><span class="line">        f.getParentFile();</span><br><span class="line">        <span class="comment">// 创建文件夹，如果父文件夹skin不存在，创建就无效</span></span><br><span class="line">        f.mkdir();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建文件夹，如果父文件夹skin不存在，就会创建父文件夹</span></span><br><span class="line">        f.mkdirs();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建一个空文件,如果父文件夹skin不存在，就会抛出异常</span></span><br><span class="line">        f.createNewFile();</span><br><span class="line">        <span class="comment">// 所以创建一个空文件之前，通常都会创建父目录</span></span><br><span class="line">        f.getParentFile().mkdirs();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 列出所有的盘符c: d: e: 等等</span></span><br><span class="line">        f.listRoots();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 刪除文件</span></span><br><span class="line">        f.delete();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// JVM结束的时候，刪除文件，常用于临时文件的删除</span></span><br><span class="line">        f.deleteOnExit();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h3><p>流就是一系列数据</p><h4 id="什么是流-1"><a href="#什么是流-1" class="headerlink" title="什么是流"></a>什么是流</h4><p>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。<br>数据源可以是文件，还可以是数据库，网络甚至是其他的程序</p><p>比如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流<br>输入流： InputStream<br>输出流：OutputStream  </p><h4 id="文件输入流"><a href="#文件输入流" class="headerlink" title="文件输入流"></a>文件输入流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">            <span class="comment">// 创建基于文件的输入流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">// 通过这个输入流，就可以把数据从硬盘，读取到Java的虚拟机中来，也就是读取到内存中</span></span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>InputStream字节输入流<br>OutputStream字节输出流<br>用于以字节的形式读取和写入数据</p><h4 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h4><p>所有的数据存放在计算机中都是以数字的形式存放的。 所以<strong>字母就需要转换为数字才能够存放</strong>。比如A就对应的数字65，a对应的数字97. 不同的字母和符号对应不同的数字，就是一张码表。<br>ASCII是这样的一种码表。 只<strong>包含简单的英文字母</strong>，符号，数字等等。 <strong>不包含中文，德文，俄语等复杂</strong>的。</p><h4 id="以字节流的形式读取文件内容"><a href="#以字节流的形式读取文件内容" class="headerlink" title="以字节流的形式读取文件内容"></a>以字节流的形式读取文件内容</h4><p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//准备文件lol.txt其中的内容是AB，对应的ASCII分别是65 66</span></span><br><span class="line">            File f =<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">            <span class="comment">//创建基于文件的输入流</span></span><br><span class="line">            FileInputStream fis =<span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//创建字节数组，其长度就是文件的长度</span></span><br><span class="line">            <span class="keyword">byte</span>[] all =<span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            <span class="comment">//以字节流的形式读取文件所有内容</span></span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                <span class="comment">//打印出来是65 66</span></span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//每次使用完流，都应该进行关闭</span></span><br><span class="line">            fis.close();</span><br><span class="line">              </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以字节流的形式向文件写入数据"><a href="#以字节流的形式向文件写入数据" class="headerlink" title="以字节流的形式向文件写入数据"></a>以字节流的形式向文件写入数据</h4><p>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileOutputStream 是OutputStream子类，以FileOutputStream 为例向文件写出数据</p><blockquote><p>注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。<br>     但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 准备文件lol2.txt其中的内容是空的</span></span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">            <span class="comment">// 准备长度是2的字节数组，用88,89初始化，其对应的字符分别是X,Y</span></span><br><span class="line">            <span class="keyword">byte</span> data[] = &#123; <span class="number">88</span>, <span class="number">89</span> &#125;;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 创建基于文件的输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">            <span class="comment">// 把数据写入到输出流</span></span><br><span class="line">            fos.write(data);</span><br><span class="line">            <span class="comment">// 关闭输出流</span></span><br><span class="line">            fos.close();</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭流的方法"><a href="#关闭流的方法" class="headerlink" title="关闭流的方法"></a>关闭流的方法</h3><p>所有的流，无论是输入流还是输出流，使用完毕之后，都应该关闭。 如果不关闭，会产生对资源占用的浪费。 当量比较大的时候，会影响到业务的正常开展。</p><h4 id="在try中关闭"><a href="#在try中关闭" class="headerlink" title="在try中关闭"></a>在try中关闭</h4><p><strong>弊端:</strong>如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患。 <strong>不推荐</strong>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在try 里关闭流</span></span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在finally中关闭"><a href="#在finally中关闭" class="headerlink" title="在finally中关闭"></a>在finally中关闭</h4><p>  这是标准的关闭流的方式</p><ol><li>首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally.</li><li>在finally关闭之前，要先判断该引用是否为空</li><li>关闭的时候，需要再一次进行try catch处理</li></ol><p>这是标准的严谨的关闭流的方式，但是看上去很繁琐，所以写不重要的或者测试代码的时候，都会采用上面的<strong>有隐患</strong>try的方式，因为不麻烦~  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">ackage stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally 里关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fis)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用try-的方式"><a href="#使用try-的方式" class="headerlink" title="使用try()的方式"></a>使用try()的方式</h4><p>把流定义在try()里,try,catch或者finally结束的时候，会自动关闭<br>这种编写代码的方式叫做 <strong>try-with-resources</strong>， 这是从JDK7开始支持的技术</p><p>所有的流，都实现了一个接口叫做 <strong>AutoCloseable</strong>，任何类实现了这个接口，都可以在try()中进行实例化。 并且在try, catch, finally结束的时候自动关闭，回收相关资源。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>Reader字符输入流<br>Writer字符输出流<br>专门用于字符的形式读取和写入数据</p><h4 id="使用字符流读取文件"><a href="#使用字符流读取文件" class="headerlink" title="使用字符流读取文件"></a>使用字符流读取文件</h4><p>FileReader 是Reader子类，以FileReader 为例进行文件读取?  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是AB</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建基于文件的Reader</span></span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(f)) &#123;</span><br><span class="line">            <span class="comment">// 创建字符数组，其长度就是文件的长度</span></span><br><span class="line">            <span class="keyword">char</span>[] all = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            <span class="comment">// 以字符流的形式读取文件所有内容</span></span><br><span class="line">            fr.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> b : all) &#123;</span><br><span class="line">                <span class="comment">// 打印出来是A B</span></span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用字符流把字符串写入到文件"><a href="#使用字符流把字符串写入到文件" class="headerlink" title="使用字符流把字符串写入到文件"></a>使用字符流把字符串写入到文件</h4><p>FileWriter 是Writer的子类，以FileWriter 为例把字符串写入到文件.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备文件lol2.txt</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建基于文件的Writer</span></span><br><span class="line">        <span class="keyword">try</span> (FileWriter fr = <span class="keyword">new</span> FileWriter(f)) &#123;</span><br><span class="line">            <span class="comment">// 以字符流的形式把数据写入到文件中</span></span><br><span class="line">            String data=<span class="string">"abcdefg1234567890"</span>;</span><br><span class="line">            <span class="keyword">char</span>[] cs = data.toCharArray();</span><br><span class="line">            fr.write(cs);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><h4 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h4><ul><li><strong>ISO-8859-1 ASCII</strong> 数字和西欧字母</li><li><strong>GBK GB2312 BIG5</strong> 中文</li><li><strong>UNICODE</strong> (统一码，万国码)</li></ul><p>其中</p><p>ISO-8859-1 包含 ASCII</p><p>GB2312 是简体中文，BIG5是繁体中文，GBK同时包含简体和繁体以及日文。</p><p>UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含其中</p><h4 id="UNICODE和UTF"><a href="#UNICODE和UTF" class="headerlink" title="UNICODE和UTF"></a>UNICODE和UTF</h4><p>UNICODE为了存放所有数据所以单位长度较长(二进制长度越长,能表示的种类越多).</p><p>为了节省空间,对不同的字符占用空间进行了<strong>减肥</strong>:</p><p>数字和字母就使用一个字节，而对汉字就使用3个字节，从而达到了<strong>减肥还能保证健康</strong>的效果</p><p>这就是<strong>UTF-8</strong>,还有UTF-16,UTF-32,一般而言,UTF-8更常用.</p><h4 id="Java采用的是Unicode"><a href="#Java采用的是Unicode" class="headerlink" title="Java采用的是Unicode"></a>Java采用的是Unicode</h4><p>写在.java源代码中的汉字，在执行之后，都会变成JVM中的字符。<br>而这些中文字符采用的编码方式，都是使用UNICODE. “中”字对应的UNICODE是<strong>4E2D</strong>,所以在内存中，实际保存的数据就是十六进制的0x4E2D, 也就是十进制的20013。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"中"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用FileInputStream字节流正确读取中文"><a href="#使用FileInputStream字节流正确读取中文" class="headerlink" title="使用FileInputStream字节流正确读取中文"></a>使用FileInputStream字节流正确读取中文</h4><p>为了能正确读取中文内容:</p><ol><li>必须了解文本是以哪种编码方式保存字符的</li><li>使用字节流读取了文本后，再使用对应的<strong>编码方式去识别这些数字</strong>，得到正确的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"E:\\project\\j2se\\src\\test.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//文件中读出来的数据是</span></span><br><span class="line">            System.out.println(<span class="string">"文件中读出来的数据是："</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> i = b&amp;<span class="number">0x000000ff</span>;  <span class="comment">//只取16进制的后两位</span></span><br><span class="line">                System.out.println(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"把这个数字，放在GBK的棋盘上去："</span>);</span><br><span class="line">            String str = <span class="keyword">new</span> String(all,<span class="string">"GBK"</span>);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用FileReader-字符流正确读取中文"><a href="#用FileReader-字符流正确读取中文" class="headerlink" title="用FileReader 字符流正确读取中文"></a>用FileReader 字符流正确读取中文</h4><p>FileReader得到的是字符，所以一定是已经把字节<strong>根据某种编码识别成了字符</strong>了而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK<br>FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替，像这样：</p><p><code>new InputStreamReader(new FileInputStream(f),Charset.forName(&quot;UTF-8&quot;));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException, FileNotFoundException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"E:\\project\\j2se\\src\\test.txt"</span>);</span><br><span class="line">        System.out.println(<span class="string">"默认编码方式:"</span>+Charset.defaultCharset());</span><br><span class="line">        <span class="comment">//FileReader得到的是字符，所以一定是已经把字节根据某种编码识别成了字符了</span></span><br><span class="line">        <span class="comment">//而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK</span></span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(f)) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fr.read(cs);</span><br><span class="line">            System.out.printf(<span class="string">"FileReader会使用默认的编码方式%s,识别出来的字符是：%n"</span>,Charset.defaultCharset());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cs));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替</span></span><br><span class="line">        <span class="comment">//并且使用new InputStreamReader(new FileInputStream(f),Charset.forName("UTF-8")); 这样的形式</span></span><br><span class="line">        <span class="keyword">try</span> (InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(f),Charset.forName(<span class="string">"UTF-8"</span>))) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            isr.read(cs);</span><br><span class="line">            System.out.printf(<span class="string">"InputStreamReader 指定编码方式UTF-8,识别出来的字符是：%n"</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cs));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong>输出后中文字符前面有个’?’,原因是:</p><p>​    如果是使用记事本另存为UTF-8的格式，那么在第一个字节有一个<strong>标示符</strong>，叫做BOM用来标志这个文件是用UTF-8来编码的。</p></blockquote><h3 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h3><p>  以介质是硬盘为例，<strong>字节流和字符流的弊端</strong>： 在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。 </p><p>为了解决以上弊端，采用缓存流。<br>缓存流在读取的时候，<strong>会一次性读较多的数据到缓存中</strong>，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。 </p><p>就好比吃饭，<strong>不用缓存就是每吃一口都到锅里去铲</strong>。<strong>用缓存就是先把饭盛到碗里</strong>，碗里的吃完了，再到锅里去铲 </p><p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区<strong>达到一定的量</strong>，才把这些数据，<strong>一起写入到硬盘中去</strong>。按照这种操作模式，就不会像字节流，字符流那样<strong>每写一个字节都访问硬盘</strong>，从而减少了IO操作  </p><h4 id="使用缓存流读取数据"><a href="#使用缓存流读取数据" class="headerlink" title="使用缓存流读取数据"></a>使用缓存流读取数据</h4><p>缓存字符输入流 BufferedReader 可以一次读取一行数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是</span></span><br><span class="line">        <span class="comment">// garen kill teemo</span></span><br><span class="line">        <span class="comment">// teemo revive after 1 minutes</span></span><br><span class="line">        <span class="comment">// teemo try to garen, but killed again</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建文件字符流</span></span><br><span class="line">        <span class="comment">// 缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileReader fr = <span class="keyword">new</span> FileReader(f);</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">            )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 一次读一行</span></span><br><span class="line">                String line = br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == line)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用缓存流写出数据"><a href="#使用缓存流写出数据" class="headerlink" title="使用缓存流写出数据"></a>使用缓存流写出数据</h4><p>PrintWriter 缓存字符输出流， 可以一次写出一行数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向文件lol2.txt中写入三行语句</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">// 创建文件字符流</span></span><br><span class="line">                FileWriter fw = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">                <span class="comment">// 缓存流必须建立在一个存在的流的基础上              </span></span><br><span class="line">                PrintWriter pw = <span class="keyword">new</span> PrintWriter(fw);              </span><br><span class="line">        ) &#123;</span><br><span class="line">            pw.println(<span class="string">"garen kill teemo"</span>);</span><br><span class="line">            pw.println(<span class="string">"teemo revive after 1 minutes"</span>);</span><br><span class="line">            pw.println(<span class="string">"teemo try to garen, but killed again"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h4><p>有的时候，需要<strong>立即把数据写入到硬盘</strong>，而不是等缓存满了才写出去。 这时候就需要用到flush</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向文件lol2.txt中写入三行语句</span></span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/lol2.txt"</span>);</span><br><span class="line">        <span class="comment">//创建文件字符流</span></span><br><span class="line">        <span class="comment">//缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span>(FileWriter fr = <span class="keyword">new</span> FileWriter(f);PrintWriter pw = <span class="keyword">new</span> PrintWriter(fr);) &#123;</span><br><span class="line">            pw.println(<span class="string">"garen kill teemo"</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">                pw.flush();           </span><br><span class="line">            pw.println(<span class="string">"teemo revive after 1 minutes"</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">            pw.println(<span class="string">"teemo try to garen, but killed again"</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>DataInputStream 数据输入流<br>DataOutputStream 数据输出流</p><h4 id="直接进行字符串的读写"><a href="#直接进行字符串的读写" class="headerlink" title="直接进行字符串的读写"></a>直接进行字符串的读写</h4><p>使用数据流的writeUTF()和readUTF() 可以进行数据的<strong>格式化顺序读写</strong></p><blockquote><p><strong>注：</strong> 要用DataInputStream 读取一个文件，这个文件必须是由DataOutputStream 写出的，否则会出现EOFException，因为DataOutputStream 在写出的时候会做一些特殊标记，只有DataInputStream 才能成功的读取。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        write();</span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileInputStream fis  = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">                DataInputStream dis =<span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">boolean</span> b= dis.readBoolean();</span><br><span class="line">            <span class="keyword">int</span> i = dis.readInt();</span><br><span class="line">            String str = dis.readUTF();</span><br><span class="line">             </span><br><span class="line">            System.out.println(<span class="string">"读取到布尔值:"</span>+b);</span><br><span class="line">            System.out.println(<span class="string">"读取到整数:"</span>+i);</span><br><span class="line">            System.out.println(<span class="string">"读取到字符串:"</span>+str);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/lol.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileOutputStream fos  = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">                DataOutputStream dos =<span class="keyword">new</span> DataOutputStream(fos);</span><br><span class="line">        )&#123;</span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            dos.writeInt(<span class="number">300</span>);</span><br><span class="line">            dos.writeUTF(<span class="string">"123 this is gareen"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>  对象流指的是可以直接<strong>把一个对象以流的形式</strong>传输给其他的介质，比如硬盘 </p><p>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现Serializable接口  </p><h4 id="序列化一个对象"><a href="#序列化一个对象" class="headerlink" title="序列化一个对象"></a>序列化一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hero.java</span></span><br><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TestStream.java</span></span><br><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Hero garen</span></span><br><span class="line">        <span class="comment">//要把Hero对象直接保存在文件上，务必让Hero类实现Serializable接口</span></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">        h.name = <span class="string">"garen"</span>;</span><br><span class="line">        h.hp = <span class="number">616</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//准备一个文件用于保存该对象</span></span><br><span class="line">        File f =<span class="keyword">new</span> File(<span class="string">"d:/garen.lol"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">            <span class="comment">//创建对象输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">            ObjectOutputStream oos =<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            <span class="comment">//创建对象输入流              </span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            ObjectInputStream ois =<span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        ) &#123;</span><br><span class="line">            oos.writeObject(h);</span><br><span class="line">            Hero h2 = (Hero) ois.readObject();</span><br><span class="line">            System.out.println(h2.name);</span><br><span class="line">            System.out.println(h2.hp);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-O-System-in"><a href="#I-O-System-in" class="headerlink" title="I/O System.in"></a>I/O System.in</h3><p>System.out 是常用的在控制台输出数据的</p><p>System.in    可以从控制台输入数据</p><h4 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 控制台输入</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream is = System.in;) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 敲入a,然后敲回车可以看到</span></span><br><span class="line">                <span class="comment">// 97 13 10</span></span><br><span class="line">                <span class="comment">// 97是a的ASCII码</span></span><br><span class="line">                <span class="comment">// 13 10分别对应回车换行</span></span><br><span class="line">                <span class="keyword">int</span> i = is.read();</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Scanner读取字符串"><a href="#Scanner读取字符串" class="headerlink" title="Scanner读取字符串"></a>Scanner读取字符串</h4><p>使用System.in.read虽然可以读取数据，但是很不方便<br>使用Scanner就可以逐行读取了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line = s.nextLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Scanner从控制台读取整数"><a href="#Scanner从控制台读取整数" class="headerlink" title="Scanner从控制台读取整数"></a>Scanner从控制台读取整数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第一个整数："</span>+a);</span><br><span class="line">        <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第二个整数："</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="Java序列化中如果有些字段不想进行序列化，怎么办？"><a href="#Java序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="Java序列化中如果有些字段不想进行序列化，怎么办？"></a>Java序列化中如果有些字段不想进行序列化，怎么办？</h4><p>对于不想进行序列化的变量，使用transient关键字修饰。</p><p>transient关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。transient只能修饰变量，不能修饰类和方法。</p><h4 id="获取用键盘输入常用的两种方法"><a href="#获取用键盘输入常用的两种方法" class="headerlink" title="获取用键盘输入常用的两种方法"></a>获取用键盘输入常用的两种方法</h4><p>方法1：通过 Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s  = input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>方法2：通过 BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)); </span><br><span class="line">String s = input.readLine();</span><br></pre></td></tr></table></figure><h4 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h4><ul><li><strong>BIO (Blocking I/O):</strong> 同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li><strong>NIO (New I/O):</strong> NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li><strong>AIO (Asynchronous I/O):</strong> AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java中级_异常处理</title>
      <link href="/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E4%B8%AD%E7%BA%A7_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>刷到中级啦!<br>异常处理</center><a id="more"></a><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p><strong>异常定义:</strong></p><p>导致程序的正常流程被中断得事件.</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p><strong>异常处理常见手段:</strong></p><ul><li>try</li><li>catch</li><li>finally</li><li>throws</li></ul><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h4><ol><li>将可能抛出FileNotFoundException <strong>文件不存在异常</strong>的代码放在try里</li><li>如果文件存在，就会顺序往下执行，并且不执行catch块中的代码</li><li>如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中</li><li>e.printStackTrace(); 会打印出方法的调用痕迹，如此例，会打印出异常开始于TestException的第16行，这样就便于定位和分析到底哪里出了异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用异常的父类进行catch"><a href="#使用异常的父类进行catch" class="headerlink" title="使用异常的父类进行catch"></a>使用异常的父类进行catch</h4><p>FIleNotFoundExcetion是Exception的子类,使用Exception也可以catch住FileNotFoundException.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        File f= <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多异常捕捉"><a href="#多异常捕捉" class="headerlink" title="多异常捕捉"></a>多异常捕捉</h4><p><strong>方法1:</strong> 分别进行catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date d = sdf.parse(<span class="string">"2016-06-03"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"日期格式解析错误"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二:</strong>把多个异常放一个catch里捕捉</p><p><code>catch(Exception1|Exception2){</code></p><p>这种方法从JDK7开始支持,好处是捕捉代码<strong>更紧凑</strong>,不足之处是,一旦发生异常,<strong>不能确定到底是哪种异常</strong>,需要通过instanceof进行判断具体的异常类型.            </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date d = sdf.parse(<span class="string">"2016-06-03"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | ParseException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)</span><br><span class="line">                System.out.println(<span class="string">"日期格式解析错误"</span>);</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><p>无论是否出现异常,finally的代码都会执行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"无论文件是否存在， 都会执行的代码"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><p>可以将异常向外抛出.</p><blockquote><p>考虑如下情况：<br>主方法调用method1<br>method1调用method2<br>method2中打开文件</p><p>method2中需要进行异常处理<br>但是method2<strong>不打算处理</strong>，而是把这个异常通过<strong>throws**</strong>抛出去**那么method1就会<strong>接到该异常</strong>。 处理办法也是两种，要么是try catch处理掉，要么也是<strong>抛出去</strong>。method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">        <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">        System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throws和throw的区别"><a href="#throws和throw的区别" class="headerlink" title="throws和throw的区别"></a>throws和throw的区别</h4><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li>throws 出现在方法声明上，而throw通常都出现在方法体内。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</li></ol><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p>异常分为:</p><ul><li>可查异常</li><li>运行时异常(非可查异常)</li><li>错误</li></ul><h4 id="可查异常"><a href="#可查异常" class="headerlink" title="可查异常"></a>可查异常</h4><p>可查异常： CheckedException<br>可查异常即<strong>必须进行处理的异常</strong>，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException<br>如果不处理，编译器，就不让你通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        File f= <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/LOL.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"d:/LOL.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h4><p>运行时异常RuntimeException指： <strong>不是必须进行try catch的异常</strong><br><strong>常见运行时异常:</strong><br>除数不能为0异常:ArithmeticException<br>下标越界异常:ArrayIndexOutOfBoundsException<br>空指针异常:NullPointerException<br>在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，<strong>即便不进行try catch，也不会有编译错误</strong><br>Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常<strong>太过于普遍</strong>，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//任何除数不能为0:ArithmeticException</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//下标越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="keyword">int</span> j[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        j[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        str.length();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p>错误Error，指的是<strong>系统级别的异常</strong>，<strong>是程序无法处理的错误</strong>，表示运行应用程序中较严重问题通常是内存用光了.<br>在<strong>默认设置下</strong>，一般java程序启动的时候，最大可以使用16m的内存<br>如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出<strong>OutOfMemoryError</strong><br>与运行时异常一样，错误也是不要求强制捕捉的</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如Java虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        StringBuffer sb =<span class="keyword">new</span> StringBuffer();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">'a'</span>);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>Throwable是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/LOL.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="comment">//使用Throwable进行异常捕捉</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><h4 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h4><ul><li><p>创建一个类EnemyHeroIsDeadException，并继承Exception</p></li><li><p>提供两个构造方法</p><pre><code>1. 无参的构造方法  2. 带参的构造方法，并调用父类的对应的构造方法</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">()</span></span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抛出自定义异常"><a href="#抛出自定义异常" class="headerlink" title="抛出自定义异常"></a>抛出自定义异常</h4><ol><li><p>创建一个EnemyHeroIsDeadException实例</p></li><li><p>通过<strong>throw</strong> 抛出该异常</p></li><li><p>当前方法通过 <strong>throws</strong> 抛出该异常</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyHeroIsDeadException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h.hp == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EnemyHeroIsDeadException(h.name + <span class="string">" 已经挂了,不需要施放技能"</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">()</span></span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EnemyHeroIsDeadException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        garen.hp = <span class="number">616</span>;</span><br><span class="line"> </span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">"提莫"</span>;</span><br><span class="line">        teemo.hp = <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            garen.attackHero(teemo);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (EnemyHeroIsDeadException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            System.out.println(<span class="string">"异常的具体原因:"</span>+e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常和错误的区别"><a href="#异常和错误的区别" class="headerlink" title="异常和错误的区别:"></a>异常和错误的区别:</h4><p>​    <strong>异常能被程序本身处理，错误是无法处理。</strong></p><h4 id="Throwable类常用方法"><a href="#Throwable类常用方法" class="headerlink" title="Throwable类常用方法"></a><strong>Throwable类常用方法</strong></h4><ul><li><strong>public string getMessage()</strong>:返回异常发生时的详细信息</li><li><strong>public string toString()</strong>:返回异常发生时的简要信息</li><li><strong>public string getLocalizedMessage()</strong>:返回异常对象的本地化信息.使用Throwsable的子类</li></ul><p>覆盖这个方法,可以声称本地化信息.如果子类没有覆盖该方法,则该方法返回的信息与getMassage()返回的结果相同.</p><ul><li><strong>public void printStackTrace()</strong>:在控制台上打印Throwable对象封装的异常信息</li></ul><h4 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h4><ul><li><strong>try块</strong>:用于捕获异常.其后可接零个或多个catch块,如果没有catch块,则必须跟finally块.</li><li><strong>catch块:</strong>用于处理try捕获到的异常.</li><li><strong>finally 块：</strong> 无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return 语句时，finally语句块将在方法返回之前被执行</li></ul><p><strong>在以下4种特殊情况下，finally块不会被执行：</strong></p><ol><li>在finally语句块第一行发生了异常。 因为在其他行，finally块还是会得到执行</li><li>在前面的代码中用了System.exit(int)已退出程序。 exit是带参函数 ；若该语句在异常语句之后，finally会执行</li><li>程序所在的线程死亡。</li><li>关闭CPU。</li></ol><blockquote><p><strong>注意:</strong> 当try语句和finally语句中都有return语句时，在方法返回之前，finally语句的内容将被执行，并且finally语句的返回值将会覆盖原始的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">&gt;         <span class="keyword">try</span> &#123;</span><br><span class="line">&gt;             <span class="keyword">return</span> value * value;</span><br><span class="line">&gt;         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">&gt;             <span class="keyword">if</span> (value == <span class="number">2</span>) &#123;</span><br><span class="line">&gt;                 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果调用 <code>f(2)</code>，返回值将是0，因为finally语句的返回值覆盖了try语句块的返回值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_日期</title>
      <link href="/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%97%A5%E6%9C%9F/"/>
      <url>/2019/08/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>从基础复习刷一遍<br>日期</center><a id="more"></a><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date类:</p><p><strong>注意:</strong>是java.util.Date,</p><p>而非java.sql.Date,这个类是给数据库访问的时候用的.</p><h4 id="时间原点概念"><a href="#时间原点概念" class="headerlink" title="时间原点概念"></a>时间原点概念</h4><blockquote><p> 所有的数据类型，无论是整数，布尔，浮点数还是字符串，最后都需要以数字的形式表现出来。</p><p>日期类型也不例外，换句话说，一个日期，比如2020年10月1日，在计算机里，会用一个数字来代替。</p><p>那么最特殊的一个数字，就是零. 零这个数字，就代表Java中的时间原点，其对应的日期是1970年1月1日 8点0分0秒 。 (为什么是8点，因为中国的太平洋时区是UTC-8，刚好和格林威治时间差8个小时)</p><p>为什么对应1970年呢？ 因为1969年发布了第一个 UNIX 版本：AT&amp;T，综合考虑，当时就把1970年当做了时间原点。</p><p>所有的日期，都是以为这个0点为基准，每过一毫秒，就+1。  </p></blockquote><h4 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"当前时间:"</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 从1970年1月1日 早上8点0分0秒 开始经历的毫秒数</span></span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">"从1970年1月1日 早上8点0分0秒 开始经历了5秒的时间"</span>);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date now= <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//打印当前时间</span></span><br><span class="line">        System.out.println(<span class="string">"当前时间:"</span>+now.toString());</span><br><span class="line">        <span class="comment">//getTime() 得到一个long型的整数</span></span><br><span class="line">        <span class="comment">//这个整数代表 1970.1.1 08:00:00:000，每经历一毫秒，增加1</span></span><br><span class="line">        System.out.println(<span class="string">"当前时间getTime()返回的值是："</span>+now.getTime());</span><br><span class="line">          </span><br><span class="line">        Date zero = <span class="keyword">new</span> Date(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"用0作为构造方法，得到的日期是:"</span>+zero);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis()"></a>System.currentTimeMillis()</h4><p>当前日期的毫秒数<br>new Date().getTime() 和 System.currentTimeMillis() 是一样的<br>不过由于机器性能的原因，可能会相差几十毫秒，毕竟每执行一行代码，都是需要时间的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date now= <span class="keyword">new</span> Date();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//当前日期的毫秒数</span></span><br><span class="line">        System.out.println(<span class="string">"Date.getTime() \t\t\t返回值: "</span>+now.getTime());</span><br><span class="line">        <span class="comment">//通过System.currentTimeMillis()获取当前日期的毫秒数</span></span><br><span class="line">        System.out.println(<span class="string">"System.currentTimeMillis() \t返回值: "</span>+System.currentTimeMillis());      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><p>SimpleDateFormat 日期格式化类</p><h4 id="日期装字符串"><a href="#日期装字符串" class="headerlink" title="日期装字符串"></a>日期装字符串</h4><table><thead><tr><th align="center">字母</th><th align="center">时间单位</th></tr></thead><tbody><tr><td align="center">y</td><td align="center">代表年</td></tr><tr><td align="center">M</td><td align="center">代表月</td></tr><tr><td align="center">d</td><td align="center">代表日</td></tr><tr><td align="center">H</td><td align="center">代表24小时制时间</td></tr><tr><td align="center">h</td><td align="center">代表12小时制时间</td></tr><tr><td align="center">m</td><td align="center">代表分钟</td></tr><tr><td align="center">s</td><td align="center">代表秒</td></tr><tr><td align="center">S</td><td align="center">代表毫秒</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span> );</span><br><span class="line">        Date d= <span class="keyword">new</span> Date();</span><br><span class="line">        String str = sdf.format(d);</span><br><span class="line">        System.out.println(<span class="string">"当前时间通过 yyyy-MM-dd HH:mm:ss SSS 格式化后的输出: "</span>+str);</span><br><span class="line">         </span><br><span class="line">        SimpleDateFormat sdf1 =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span> );</span><br><span class="line">        Date d1= <span class="keyword">new</span> Date();</span><br><span class="line">        String str1 = sdf1.format(d1);</span><br><span class="line">        System.out.println(<span class="string">"当前时间通过 yyyy-MM-dd 格式化后的输出: "</span>+str1);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h4><p>模式（yyyy/MM/dd HH:mm:ss）需要和字符串格式保持一致，如果不一样就会抛出解析异常ParseException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span> );</span><br><span class="line">  </span><br><span class="line">        String str = <span class="string">"2016/1/5 12:12:12"</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date d = sdf.parse(str);</span><br><span class="line">            System.out.printf(<span class="string">"字符串 %s 通过格式  yyyy/MM/dd HH:mm:ss %n转换为日期对象: %s"</span>,str,d.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>Calendar类即日历类，常用于进行“翻日历”，比如<strong>下个月的今天是多久</strong>.</p><h4 id="Calendar与Date进行转换"><a href="#Calendar与Date进行转换" class="headerlink" title="Calendar与Date进行转换"></a>Calendar与Date进行转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//采用单例模式获取日历对象Calendar.getInstance();</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//通过日历对象得到日期对象</span></span><br><span class="line">        Date d = c.getTime();</span><br><span class="line">  </span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">0</span>);</span><br><span class="line">        c.setTime(d2); <span class="comment">//把这个日历，调成日期 : 1970.1.1 08:00:00</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="翻日历"><a href="#翻日历" class="headerlink" title="翻日历"></a>翻日历</h4><p>add方法，在原日期上增加年/月/日<br>set方法，直接设置年/月/日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        Date now = c.getTime();</span><br><span class="line">        <span class="comment">// 当前日期</span></span><br><span class="line">        System.out.println(<span class="string">"当前日期：\t"</span> + format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 下个月的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"下个月的今天:\t"</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 去年的今天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.YEAR, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"去年的今天:\t"</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 上个月的第三天</span></span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.add(Calendar.MONTH, -<span class="number">1</span>);</span><br><span class="line">        c.set(Calendar.DATE, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"上个月的第三天:\t"</span> +format(c.getTime()));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 日期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_数字与字符串</title>
      <link href="/2019/08/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2.md/"/>
      <url>/2019/08/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2.md/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>数字与字符串</center><a id="more"></a><h3 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h3><h4 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h4><p>所有的<strong>基本类型</strong>,都有对应的<strong>类类型</strong>.</p><p>比如int对应的类是Integer</p><p>这种类就叫做封装类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//把一个基本类型的变量,转换为Integer对象</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">        <span class="comment">//把一个Integer对象，转换为一个基本类型的int</span></span><br><span class="line">        <span class="keyword">int</span> i2 = it.intValue();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h4><p>数字封装类有Byte,Short,Integer,Long,Float,Double,这些类都是Number抽象类的子类.</p><h4 id="基本类型装封装类"><a href="#基本类型装封装类" class="headerlink" title="基本类型装封装类"></a>基本类型装封装类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>; </span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装类装基本类型"><a href="#封装类装基本类型" class="headerlink" title="封装类装基本类型"></a>封装类装基本类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">        <span class="keyword">int</span> i2 = it.intValue();       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h4><p>不需要调用构造方法，<strong>通过=符号自动</strong>把 基本类型 转换为 类类型 就叫装箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫装箱</span></span><br><span class="line">        Integer it2 = i;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h4><p>不需要调用Integer的intValue方法，通过=就自动转换成int类型，就叫拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">        <span class="keyword">int</span> i2 = it.intValue();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自动转换就叫拆箱</span></span><br><span class="line">        <span class="keyword">int</span> i3 = it;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="int的最大值和最小值"><a href="#int的最大值和最小值" class="headerlink" title="int的最大值和最小值"></a>int的最大值和最小值</h4><p>int的最大值可以通过其对应的封装类Integer.MAX_VALUE获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer.MAX_VALUE<span class="comment">//最大值</span></span><br><span class="line">Integer.MIN_VALUE<span class="comment">//最小值</span></span><br></pre></td></tr></table></figure><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h4><ul><li>方法一:使用String类的静态方法valueOf</li><li>方法二:先把基本类型封装为对象,然后调用对象的toString</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法1</span></span><br><span class="line">        String str = String.valueOf(i);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法2</span></span><br><span class="line">        Integer it = i;</span><br><span class="line">        String str2 = it.toString();      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h4><p>调用Integer的静态方法parseInt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"999"</span>;</span><br><span class="line">        <span class="keyword">int</span> i= Integer.parseInt(str);</span><br><span class="line">        System.out.println(i);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h3><p>java.lang.Math提供了一些常用的数学运算方法,并且都是以静态方法的形式存在的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">5.4f</span>;</span><br><span class="line">        <span class="keyword">float</span> f2 = <span class="number">5.5f</span>;</span><br><span class="line">        <span class="comment">//5.4四舍五入即5</span></span><br><span class="line">        System.out.println(Math.round(f1));</span><br><span class="line">        <span class="comment">//5.5四舍五入即6</span></span><br><span class="line">        System.out.println(Math.round(f2));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-1之间的随机浮点数（取不到1）</span></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//得到一个0-10之间的随机整数 （取不到10）</span></span><br><span class="line">        System.out.println((<span class="keyword">int</span>)( Math.random()*<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//开方</span></span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">9</span>));</span><br><span class="line">        <span class="comment">//次方（2的4次方）</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//π</span></span><br><span class="line">        System.out.println(Math.PI);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//自然常数</span></span><br><span class="line">        System.out.println(Math.E);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><h4 id="格式化输出-1"><a href="#格式化输出-1" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>  如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用格式化输出，就可以简洁明了</p><p>%s 表示字符串<br>%d 表示数字<br>%n 表示换行  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String name =<span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="keyword">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">"超神"</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差</span></span><br><span class="line">        String sentence = name+ <span class="string">" 在进行了连续 "</span> + kill + <span class="string">" 次击杀后，获得了 "</span> + title +<span class="string">" 的称号"</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(sentence);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//使用格式化输出</span></span><br><span class="line">        <span class="comment">//%s表示字符串，%d表示数字,%n表示换行</span></span><br><span class="line">        String sentenceFormat =<span class="string">"%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n"</span>;</span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="printf和format"><a href="#printf和format" class="headerlink" title="printf和format"></a>printf和format</h4><p>printf和format能够达到一模一样的效果，通过查看java源代码可以看到，在printf中直接调用了format</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String format,Object ... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> format(format,args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String name =<span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="keyword">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        String title=<span class="string">"超神"</span>;</span><br><span class="line">         </span><br><span class="line">        String sentenceFormat =<span class="string">"%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n"</span>;</span><br><span class="line">        <span class="comment">//使用printf格式化输出</span></span><br><span class="line">        System.out.printf(sentenceFormat,name,kill,title);</span><br><span class="line">        <span class="comment">//使用format格式化输出</span></span><br><span class="line">        System.out.format(sentenceFormat,name,kill,title);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p><strong>换行符</strong>就是另起一行 — ‘\n’ 换行（newline）<br><strong>回车符</strong>就是回到一行的开头 — ‘\r’ 回车（return）<br>在eclipse里敲一个回车，实际上是<strong>回车换行符</strong><br>Java是跨平台的编程语言，同样的代码，可以在不同的平台使用，比如Windows,Linux,Mac<br>然而在不同的操作系统，换行符是不一样的<br>（1）在DOS和Windows中，每行结尾是 “\r\n”；<br>（2）Linux系统里，每行结尾只有 “\n”；<br>（3）Mac系统里，每行结尾是只有 “\r”。<br>为了使得同一个java程序的换行符在所有的操作系统中都有一样的表现，使用%n，就可以做到平台无关的换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"这是换行符%n"</span>);</span><br><span class="line">        System.out.printf(<span class="string">"这是换行符%n"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达"><a href="#总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达" class="headerlink" title="总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达"></a>总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> digit;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumber</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = <span class="number">2020</span>;</span><br><span class="line">        <span class="comment">//总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">//直接打印数字</span></span><br><span class="line">        System.out.format(<span class="string">"%d%n"</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,默认右对齐</span></span><br><span class="line">        System.out.format(<span class="string">"%8d%n"</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,左对齐</span></span><br><span class="line">        System.out.format(<span class="string">"%-8d%n"</span>,year);</span><br><span class="line">        <span class="comment">//总长度是8,不够补0</span></span><br><span class="line">        System.out.format(<span class="string">"%08d%n"</span>,year);</span><br><span class="line">        <span class="comment">//千位分隔符</span></span><br><span class="line">        System.out.format(<span class="string">"%,8d%n"</span>,year*<span class="number">10000</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//小数点位数</span></span><br><span class="line">        System.out.format(<span class="string">"%.2f%n"</span>,Math.PI);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//不同国家的千位分隔符</span></span><br><span class="line">        System.out.format(Locale.FRANCE,<span class="string">"%,.2f%n"</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.US,<span class="string">"%,.2f%n"</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        System.out.format(Locale.UK,<span class="string">"%,.2f%n"</span>,Math.PI*<span class="number">10000</span>);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><h4 id="保留一个字符的时候使用char"><a href="#保留一个字符的时候使用char" class="headerlink" title="保留一个字符的时候使用char"></a>保留一个字符的时候使用char</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">'1'</span>;<span class="comment">//字符1,而非数字1</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">'中'</span>;<span class="comment">//汉字字符</span></span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">'ab'</span>; <span class="comment">//只能放一个字符        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="char对应的封装类"><a href="#char对应的封装类" class="headerlink" title="char对应的封装类"></a>char对应的封装类</h4><p>char对应的封装类是Character.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line">        Character c = c1; <span class="comment">//自动装箱</span></span><br><span class="line">        c1 = c;<span class="comment">//自动拆箱   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Character常用方法"><a href="#Character常用方法" class="headerlink" title="Character常用方法"></a>Character常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.isLetter(<span class="string">'a'</span>));<span class="comment">//判断是否为字母</span></span><br><span class="line">        System.out.println(Character.isDigit(<span class="string">'a'</span>)); <span class="comment">//判断是否为数字</span></span><br><span class="line">        System.out.println(Character.isWhitespace(<span class="string">' '</span>)); <span class="comment">//是否是空白</span></span><br><span class="line">        System.out.println(Character.isUpperCase(<span class="string">'a'</span>)); <span class="comment">//是否是大写</span></span><br><span class="line">        System.out.println(Character.isLowerCase(<span class="string">'a'</span>)); <span class="comment">//是否是小写</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(Character.toUpperCase(<span class="string">'a'</span>)); <span class="comment">//转换为大写</span></span><br><span class="line">        System.out.println(Character.toLowerCase(<span class="string">'A'</span>)); <span class="comment">//转换为小写</span></span><br><span class="line"> </span><br><span class="line">        String a = <span class="string">'a'</span>; <span class="comment">//不能够直接把一个字符转换成字符串</span></span><br><span class="line">        String a2 = Character.toString(<span class="string">'a'</span>); <span class="comment">//转换为字符串</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见转义"><a href="#常见转义" class="headerlink" title="常见转义"></a>常见转义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用空格无法达到对齐的效果"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ab def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a def"</span>);</span><br><span class="line">          </span><br><span class="line">        System.out.println(<span class="string">"使用\\t制表符可以达到对齐的效果"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\tdef"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ab\tdef"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a\tdef"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"一个\\t制表符长度是8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"12345678def"</span>);</span><br><span class="line">          </span><br><span class="line">        System.out.println(<span class="string">"换行符 \\n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\ndef"</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"单引号 \\'"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\'def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"双引号 \\\""</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\"def"</span>);</span><br><span class="line">        System.out.println(<span class="string">"反斜杠本身 \\"</span>);</span><br><span class="line">        System.out.println(<span class="string">"abc\\def"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h4><p>字符串即字符的组合，在Java中，字符串是一个类，所以我们见到的字符串都是对象<br>常见创建字符串手段： </p><ol><li><p>每当有一个<strong>字面值</strong>出现的时候，虚拟机就会创建一个字符串 </p></li><li><p>调用String的构造方法创建一个字符串对象 </p></li><li><p>通过+加号进行字符串拼接也会创建新的字符串对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String garen =<span class="string">"盖伦"</span>; <span class="comment">//字面值,虚拟机碰到字面值就会创建一个字符串对象</span></span><br><span class="line">        String teemo = <span class="keyword">new</span> String(<span class="string">"提莫"</span>); <span class="comment">//创建了两个字符串对象 </span></span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'崔'</span>,<span class="string">'斯'</span>,<span class="string">'特'</span>&#125;; </span><br><span class="line">        String hero = <span class="keyword">new</span> String(cs);<span class="comment">//  通过字符数组创建一个字符串对象 </span></span><br><span class="line">        String hero3 = garen + teemo;<span class="comment">//  通过+加号进行字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>String被修饰为final,所以是不能被继承的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyString str = <span class="keyword">new</span> MyString();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/*这里会报错，因为String不能被继承*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyString</span> <span class="keyword">extends</span> <span class="title">String</span></span>&#123;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h4><p>immutable 是指不可改变的<br>比如创建了一个字符串对象<br>String garen =”盖伦”;<br><strong>不可改变</strong>的具体含义是指：</p><ul><li>不能增加长度</li><li>不能减少长度</li><li>不能插入字符</li><li>不能删除字符</li><li>不能修改字符</li><li>一旦创建好这个字符串，里面的内容 <strong>永远</strong> 不能改变</li></ul><p>String 的表现就像是一个<strong>常量</strong>  </p><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>如果不使用字符串格式化，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用<strong>字符串格式化</strong>，就可以<strong>简洁明了</strong> </p><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><p>length方法返回当前字符串的长度<br>可以有长度为0的字符串,即空字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串名.length();</span><br></pre></td></tr></table></figure><h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><table><thead><tr><th align="center">关键字</th><th align="center">简介</th><th align="center">示例代码</th></tr></thead><tbody><tr><td align="center">charAt</td><td align="center">获取指定位置字符</td><td align="center">字符串.charAt(下标);</td></tr><tr><td align="center">toCharArray</td><td align="center">获取对应的字符数组</td><td align="center">字符串.toCharArray();</td></tr><tr><td align="center">subString</td><td align="center">截取子字符串</td><td align="center">字符串.subString(3);//截取从第3个开始的字符串<br>字符串.subString(3,5)////截取从第3个开始,到5-1结束的字符串</td></tr><tr><td align="center">split</td><td align="center">分隔</td><td align="center">字符串.split(“分隔符”);</td></tr><tr><td align="center">trim</td><td align="center">去掉首尾空格</td><td align="center">字符串.trim();</td></tr><tr><td align="center">toLowerCase<br>toUpperCase</td><td align="center">大小写</td><td align="center">字符串.toLowerCase()<br>字符串.toUpperCase()</td></tr><tr><td align="center">indexOf<br>lastIndexOf<br>contains</td><td align="center">定位</td><td align="center">字符串.indexOf(‘8’); //字符第一次出现的位置<br>字符串.lastIndexOf(“了”); //字符串最后出现的位置<br>字符串.indexOf(‘,’,5)); //从位置5开始，出现的第一次,的位置<br>字符串.contains(“击杀”); //是否包含字符串”击杀”</td></tr><tr><td align="center">replaceAll<br>replaceFirst</td><td align="center">替换</td><td align="center">字符串.replaceAll(“击杀”, “被击杀”); //替换所有的<br>字符串.replaceFirst(“,”,””);//只替换第一个</td></tr></tbody></table><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><h4 id="是否是同一个对象"><a href="#是否是同一个对象" class="headerlink" title="是否是同一个对象"></a>是否是同一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        String str1 = <span class="string">"the light"</span>;</span><br><span class="line">        String str3 = <span class="string">"the light"</span>;</span><br><span class="line">        <span class="comment">/*一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象</span></span><br><span class="line"><span class="comment">  所以在str1会创建了一个新的字符串"the light"</span></span><br><span class="line"><span class="comment">  但是在str3，编译器发现已经存在现成的"the light"，那么就直接拿来使用，而没有进行重复创建</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        System.out.println( str1  ==  str3); </span><br><span class="line">        </span><br><span class="line">        String str2 = <span class="keyword">new</span> String(str1);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象,str1和str2的内容是一样的,但并不是同一个字符串对象.</span></span><br><span class="line">        System.out.println( str1  ==  str2);        </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内容是否相同"><a href="#内容是否相同" class="headerlink" title="内容是否相同"></a>内容是否相同</h4><p>使用equals进行字符串内容的比较，必须大小写一致<br>equalsIgnoreCase，忽略大小写判断内容是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"the light"</span>;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(str1);</span><br><span class="line">        String str3 = str1.toUpperCase();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象</span></span><br><span class="line">        System.out.println( str1  ==  str2);</span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//完全一样返回true</span></span><br><span class="line">        System.out.println(str1.equals(str3));<span class="comment">//大小写不一样，返回false</span></span><br><span class="line">        System.out.println(str1.equalsIgnoreCase(str3));<span class="comment">//忽略大小写的比较，返回true    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="是否以子字符串开始或者结束"><a href="#是否以子字符串开始或者结束" class="headerlink" title="是否以子字符串开始或者结束"></a>是否以子字符串开始或者结束</h4><p><code>startsWith //以...开始</code></p><p><code>endsWith //以...结束</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"the light"</span>;       </span><br><span class="line">        String start = <span class="string">"the"</span>;</span><br><span class="line">        String end = <span class="string">"Ight"</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(str1.startsWith(start));<span class="comment">//以...开始</span></span><br><span class="line">        System.out.println(str1.endsWith(end));<span class="comment">//以...结束         </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p>StringBuffer是可变长的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> character;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"let there "</span>;</span><br><span class="line"> </span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(str1); <span class="comment">//根据str1创建一个StringBuffer对象</span></span><br><span class="line">        sb.append(<span class="string">"be light"</span>); <span class="comment">//在最后追加  </span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        sb.delete(<span class="number">4</span>, <span class="number">10</span>);<span class="comment">//删除4-10之间的字符  </span></span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.insert(<span class="number">4</span>, <span class="string">"there "</span>);<span class="comment">//在4这个位置插入 there    </span></span><br><span class="line">        System.out.println(sb);       </span><br><span class="line">        sb.reverse(); <span class="comment">//反转     </span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="长度和容量"><a href="#长度和容量" class="headerlink" title="长度和容量"></a>长度和容量</h4><blockquote><p>为什么StringBuffer可以变长？<br>和String<strong>内部是一个字符数组</strong>一样，StringBuffer也维护了一个字符数组。 但是，这个字符数组，<strong>留有冗余长度</strong><br>比如说new StringBuffer(“the”)，其内部的字符数组的长度，是19，而不是3，这样调用插入和追加，在现成的数组的基础上就可以完成了。<br>如果追加的长度超过了19，就会分配一个新的数组，长度比原来多一些，把原来的数据复制到新的数组中，<strong>看上去</strong> 数组长度就变长了<br>length: “the”的长度 3<br>capacity: 分配的总空间 19</p><p><strong>注：</strong> 19这个数量，不同的JDK数量是不一样的</p></blockquote><p><strong>注：</strong> 19这个数量，不同的JDK数量是不一样的</p><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="String-StringBuffer和StringBuilder的区别是什么-String为什么不可变"><a href="#String-StringBuffer和StringBuilder的区别是什么-String为什么不可变" class="headerlink" title="String StringBuffer和StringBuilder的区别是什么?String为什么不可变?"></a>String StringBuffer和StringBuilder的区别是什么?String为什么不可变?</h4><p><strong>可变性</strong></p><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private　final　char　value[]</code>，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。</p><p>AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。　</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>总结:</strong></p><ol><li>操作少量的数据: 适用String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer</li></ol>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 数字与字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_接口与继承</title>
      <link href="/2019/07/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/07/31/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>接口与继承</center><a id="more"></a><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在设计LOL的时候，进攻类英雄有两种，一种是进行物理系攻击，一种是进行魔法系攻击 </p><p>这时候，就可以使用<strong>接口</strong>来实现这个效果。 </p><p><strong>接口就像是一种约定</strong>，我们约定某些英雄是物理系英雄，那么他们就一定能够进行物理攻击。  </p><h4 id="物理攻击接口"><a href="#物理攻击接口" class="headerlink" title="物理攻击接口"></a>物理攻击接口</h4><p>创建一个接口 File-&gt;New-&gt;Interface<br>AD ，声明一个方法 physicAttack 物理攻击，但是没有方法体，是一个“<strong>空</strong>”方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">        <span class="comment">//物理伤害</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计一类英雄，能够使用物理攻击"><a href="#设计一类英雄，能够使用物理攻击" class="headerlink" title="设计一类英雄，能够使用物理攻击"></a>设计一类英雄，能够使用物理攻击</h4><p>  设计一类英雄，能够使用物理攻击，这类英雄在LOL中被叫做AD<br>类：ADHero<br>继承了Hero 类，所以继承了name,hp,armor等属性</p><p><strong>实现某个接口，就相当于承诺了某种约定</strong></p><p>所以，<strong>实现</strong>了<strong>AD</strong>这个接口，就<strong>必须</strong>提供AD接口中声明的方法<strong>physicAttack()</strong><br><strong>实现</strong>在语法上使用关键字 <strong>implements</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>魔法英雄同理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AP</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计一类英雄，既能进行物理攻击，又能进行魔法攻击"><a href="#设计一类英雄，既能进行物理攻击，又能进行魔法攻击" class="headerlink" title="设计一类英雄，既能进行物理攻击，又能进行魔法攻击"></a>设计一类英雄，既能进行物理攻击，又能进行魔法攻击</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//同时能进行物理和魔法伤害的英雄</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADAPHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span>,<span class="title">AP</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h3><h4 id="明确引用类型与对象类型的概念"><a href="#明确引用类型与对象类型的概念" class="headerlink" title="明确引用类型与对象类型的概念"></a>明确引用类型与对象类型的概念</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">        <span class="comment">/*这里引用(ad)的类型是ADHero,对象(new ADHero())的类型也是ADHero</span></span><br><span class="line"><span class="comment">          通常情况下,引用类型和对象类型一致*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子类转父类-向上转型"><a href="#子类转父类-向上转型" class="headerlink" title="子类转父类(向上转型)"></a>子类转父类(向上转型)</h4><p>所谓的转型，是指当<strong>引用类型</strong>和<strong>对象类型</strong>不一致的时候，才需要进行类型转换<br>类型转换有时候会成功，有时候会失败</p><p>到底能否转换成功？ 教大家一个很简单的判别办法<br><strong>把右边的当做左边来用</strong>，看说得通不</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hero h  = <span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">h = ad;</span><br></pre></td></tr></table></figure><p>左边的引用是<strong>英雄</strong>,右边的引用是<strong>物理英雄</strong></p><p>物理英雄是英雄么?是,所以能转</p><h4 id="父类转子类-向下转型"><a href="#父类转子类-向下转型" class="headerlink" title="父类转子类(向下转型)"></a>父类转子类(向下转型)</h4><p>父类转子类，有的时候行，有的时候不行，所以必须进行强制转换。<br>强制转换的意思就是 转换有风险，风险自担。</p><p><strong>可以强转的情况:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hero h =<span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">h = ad;</span><br><span class="line">ad = (ADHero)h;</span><br></pre></td></tr></table></figure><p>第3行，是子类转父类，一定可以的<br>第4行，就是父类转子类，所以要进行强转。<br>h这个引用，所指向的对象是ADHero, 所以第4行，就会把ADHero转换为ADHero，就能转换成功。</p><p><strong>不能强转的情况:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hero h =<span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">Support s =<span class="keyword">new</span> Support();</span><br><span class="line">h = s;</span><br><span class="line">ad = (ADHero)h;</span><br></pre></td></tr></table></figure><p>第4行，是子类转父类，是可以转换成功的<br>第5行，是把h引用所指向的对象 Support，转换为ad引用的类型ADHero。 从语义上讲，把物理攻击英雄，当成辅助英雄来用，说不通，所以会强制转换失败，并且抛<strong>异常</strong>.</p><h4 id="没有继承关系的两个类-互相转换"><a href="#没有继承关系的两个类-互相转换" class="headerlink" title="没有继承关系的两个类,互相转换"></a>没有继承关系的两个类,互相转换</h4><p>没有继承关系的两个类，互相转换，一定会失败<br>虽然ADHero和APHero都继承了Hero，但是彼此没有互相继承关系<br>“<strong>把魔法英雄当做物理英雄来用</strong>“,在语义上也是说不通的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">        APHero ap = <span class="keyword">new</span> APHero();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 没有继承关系的类型进行互相转换一定会失败，所以会出现编译错误</span></span><br><span class="line">        ad = (ADHero) ap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现了转换成接口-向上转型"><a href="#实现了转换成接口-向上转型" class="headerlink" title="实现了转换成接口(向上转型)"></a><strong>实现了转换成接口</strong>(向上转型)</h4><p>引用ad指向的对象是ADHero类型，这个类型实现了AD接口<br>10行： 把一个ADHero类型转换为AD接口<br>从语义上来讲，把一个ADHero当做AD来使用，而AD接口只有一个physicAttack方法，这就意味着转换后就有可能要调用physicAttack方法，而ADHero一定是有physicAttack方法的，所以转换是能成功的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">          </span><br><span class="line">        AD adi = ad;     </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口转换成实体类-向下转型"><a href="#接口转换成实体类-向下转型" class="headerlink" title="接口转换成实体类(向下转型)"></a>接口转换成实体类(向下转型)</h4><p>10行： ad引用指向ADHero， 而adi引用是接口类型：AD，实现类转换为接口，是向上转型，所以无需强制转换，并且一定能成功<br>12行: adi实际上是指向一个ADHero的，所以能够转换成功<br>14行： adi引用所指向的对象是一个ADHero，要转换为ADAPHero就会失败。 </p><p><strong>假设能够转换成功</strong>，那么就可以使用<strong>magicAttack</strong>方法，而adi引用所指向的对象<strong>ADHero是没有magicAttack</strong>方法的。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">         </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">            </span><br><span class="line">        AD adi = ad;</span><br><span class="line">   </span><br><span class="line">        ADHero adHero = (ADHero) adi;</span><br><span class="line">            </span><br><span class="line">        ADAPHero adapHero = (ADAPHero) adi;</span><br><span class="line">        adapHero.magicAttack();</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instanceof Hero判断一个引用所指的对象,是否是Hero类型,或者Hero的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line">        APHero ap = <span class="keyword">new</span> APHero();</span><br><span class="line">         </span><br><span class="line">        Hero h1= ad;</span><br><span class="line">        Hero h2= ap;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//判断引用h1指向的对象，是否是ADHero类型</span></span><br><span class="line">        System.out.println(h1 <span class="keyword">instanceof</span> ADHero);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//判断引用h2指向的对象，是否是APHero类型</span></span><br><span class="line">        System.out.println(h2 <span class="keyword">instanceof</span> APHero);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//判断引用h1指向的对象，是否是Hero的子类型</span></span><br><span class="line">        System.out.println(h1 <span class="keyword">instanceof</span> Hero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>子类可以继承父类的方法</p><p>在继承后,重复提供该方法,就叫做仓发的重写,又叫覆盖overrride</p><p>写个父类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"购买"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品使用后，可以有效果"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个子类继承上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifePotion</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;<span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">"血瓶使用后，可以回血"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用重写的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Item i = <span class="keyword">new</span> Item();</span><br><span class="line">        i.effect();<span class="comment">//输出"物品使用后，可以有效果"</span></span><br><span class="line">         </span><br><span class="line">        LifePotion lp =<span class="keyword">new</span> LifePotion();</span><br><span class="line">        lp.effect();<span class="comment">//输出"血瓶使用后，可以回血"</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>操作符的多态</strong>:+可以作为算术运算符,也可以作为字符串连接</p><p><strong>类的多态</strong>:父类引用指向子类</p><h4 id="操作符的多态"><a href="#操作符的多态" class="headerlink" title="操作符的多态"></a>操作符的多态</h4><p>同一个操作符在不同情境下，具备不同的作用<br>如果+号两侧都是整型，那么<strong>+代表 数字相加</strong><br>如果+号两侧，任意一个是字符串，那么<strong>+代表字符串连接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> k = i+j; <span class="comment">//如果+号两侧都是整型，那么+代表 数字相加</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(k);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        String b = <span class="string">"5"</span>;</span><br><span class="line">         </span><br><span class="line">        String c = a+b; <span class="comment">//如果+号两侧，任意一个是字符串，那么+代表字符串连接</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">         </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h4><p>要实现类的多态,需要如下条件:</p><ol><li>父类(接口)引用指向子类对象</li><li>调用的方法有重写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"购买"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"物品使用后，可以有效果 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Item i1= <span class="keyword">new</span> LifePotion();</span><br><span class="line">        Item i2 = <span class="keyword">new</span> MagicPotion();</span><br><span class="line">        System.out.print(<span class="string">"i1  是Item类型，执行effect打印:"</span>);</span><br><span class="line">        i1.effect();</span><br><span class="line">        System.out.print(<span class="string">"i2也是Item类型，执行effect打印:"</span>);</span><br><span class="line">        i2.effect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifePotion</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"血瓶使用后，可以回血"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> property;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicPotion</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"蓝瓶使用后，可以回魔法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h4><p>当一个函数的参数为某个类型时,你可以直接将声明好的子类向上转型,传父类进去,而不必为每个子类重写函数.</p><h3 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h3><p>与<strong>重写</strong>类似,方法的重写是子类覆盖父类的<strong>对象方法</strong></p><p><strong>隐藏</strong>是子类覆盖对象的<strong>类方法</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//类方法，静态方法</span></span><br><span class="line">    <span class="comment">//通过类就可以直接调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hero battle win"</span>);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//隐藏父类的battleWin方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ad hero battle win"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero.battleWin();</span><br><span class="line">        ADHero.battleWin();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>super是<strong>指向父类的引用</strong>，如果构造方法没有显示地调用父类的构造方法，那么编译器会自动为它加上一个默认的super()方法调用。如果父类由没有默认的无参构造方法，编译器就会报错，super()语句必须是构造方法的第一个子句。</p><p>构造方法入栈的顺序是:子类–&gt;父类–&gt;父类的父类……</p><p>所以方法的调用是从最初的父类不断向下调用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用父类的有参构造方法</span></span><br><span class="line"><span class="keyword">super</span>(参数);</span><br><span class="line"><span class="comment">//调用父类属性</span></span><br><span class="line"><span class="keyword">super</span>.父类属性</span><br><span class="line"><span class="comment">//调用父类方法</span></span><br><span class="line"><span class="keyword">super</span>.fatherClassMethod()</span><br></pre></td></tr></table></figure><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>所有类的父类……</p><ul><li>声明一个类时默认继承了Object类</li><li><strong>toString()</strong>       转字符串</li><li><strong>finallize()</strong>       垃圾回收方法,不是开发人与主动调用,而是由虚拟机JVM调用.</li><li><strong>equals()</strong>          用于判断<strong>两个对象内容是否相同</strong></li><li><strong>==</strong>                     用于判断<strong>两个对象是否相同</strong>,更准确的讲,用于判断两个引用是否指向同一个对象.</li><li><strong>hashCode()</strong>    用于返回一个对象的额哈希值</li><li><strong>getClass()</strong>       用于获取一个对象的类对象.</li><li>线程同步相关方法<ul><li><strong>wait()</strong></li><li><strong>notify()</strong></li><li><strong>notifyAll()</strong></li></ul></li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final修饰类，方法，基本类型变量，引用的时候分别有不同的意思。</p><h4 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h4><p>当类被final被final修饰时,表示该类不能被继承.</p><p>其子类会出想编译错误.</p><h4 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h4><p>当方法被final修饰后,该方法在其子类中不能被重写.</p><h4 id="final修饰基本类型变量"><a href="#final修饰基本类型变量" class="headerlink" title="final修饰基本类型变量"></a>final修饰基本类型变量</h4><p>当基本变量类型被final修饰时,表示改变了只能被赋值一次.</p><h4 id="final修饰引用"><a href="#final修饰引用" class="headerlink" title="final修饰引用"></a>final修饰引用</h4><p>引用被final修饰表示,该引用只有一次指向对象的机会</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>在类中声明一个方法,这个方法没有实体,是一个”空”方法</p><p>这样的方法叫抽象方法,用修饰符”abstract”</p><p>当一个类有抽象方法时,该类必须被声明为抽象类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;</span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法attack</span></span><br><span class="line">    <span class="comment">// Hero的子类会被要求实现attack方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        physicAttack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注:当父类为抽象类,且有抽象方法时,<strong>子类必须提供</strong>不一样的attack方法实现.</p></blockquote><h4 id="抽象类可以没有抽象方法"><a href="#抽象类可以没有抽象方法" class="headerlink" title="抽象类可以没有抽象方法"></a>抽象类可以没有抽象方法</h4><p>类可以在不提供抽象方法的前提下，声明为抽象类<br>一旦一个类被声明为抽象类，就不能够被直接实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;     </span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//虽然没有抽象方法，但是一旦被声明为了抽象类，就不能够直接被实例化</span></span><br><span class="line">        Hero h= <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。</li><li>接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><p>备注：在JDK8中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类分为四种:</p><ul><li>非静态内部类</li><li>静态内部类</li><li>匿名类</li><li>本地类</li></ul><h4 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h4><blockquote><p><strong>定义:</strong>可以直接在一个类里面定义.</p><p><strong>语法:</strong>new 外部类().new 内部类()</p><p><strong>注意:</strong>非静态内部类,可以直接访问其父类的private属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 姓名 </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span></span><br><span class="line">    <span class="comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BattleScore</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> kill;</span><br><span class="line">        <span class="keyword">int</span> die;</span><br><span class="line">        <span class="keyword">int</span> assit;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">legendary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (kill &gt;= <span class="number">8</span>)</span><br><span class="line">                System.out.println(name + <span class="string">"超神！"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(name + <span class="string">"尚未超神！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen = <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="comment">// 实例化内部类</span></span><br><span class="line">        <span class="comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">        <span class="comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span></span><br><span class="line">        BattleScore score = garen.new BattleScore();</span><br><span class="line">        score.kill = <span class="number">9</span>;</span><br><span class="line">        score.legendary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><blockquote><p><strong>声明:</strong>静态内部类的实例化,不需要外部类的实例为基础.</p><p><strong>语法:</strong>new 外部类.静态内部类()</p><p><strong>注意:</strong>因为没有一个外部类的实例，所以在静态内部类里面<strong>不可以访问外部类的实例属性和方法</strong><br>除了可以访问外部类的<strong>私有静态成员外</strong>，静态内部类和普通类没什么大的区别</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"battle win"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//敌方的水晶</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnemyCrystal</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hp=<span class="number">5000</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果水晶的血量为0，则宣布胜利</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkIfVictory</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(hp==<span class="number">0</span>)&#123;</span><br><span class="line">                Hero.battleWin();</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">//静态内部类不能直接访问外部类的对象属性</span></span><br><span class="line">                System.out.println(name + <span class="string">" win this game"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化静态内部类</span></span><br><span class="line">        Hero.EnemyCrystal crystal = <span class="keyword">new</span> Hero.EnemyCrystal();</span><br><span class="line">        crystal.checkIfVictory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h4><blockquote><p>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练<br>通常情况下，要使用一个接口或者抽象类，都必须创建一个子类</p><p>有的时候，为了快速使用，直接实例化一个抽象类，并“<strong>当场</strong>”实现其抽象方法。<br>既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。<br>这样的类，叫做匿名类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        ADHero adh=<span class="keyword">new</span> ADHero();</span><br><span class="line">        <span class="comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span></span><br><span class="line">        adh.attack();</span><br><span class="line">        System.out.println(adh);</span><br><span class="line">          </span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero()&#123;</span><br><span class="line">            <span class="comment">//当场实现attack方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"新的进攻手段"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        h.attack();</span><br><span class="line">        <span class="comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名     </span></span><br><span class="line">        System.out.println(h);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地类"><a href="#本地类" class="headerlink" title="本地类"></a><strong>本地类</strong></h4><p>本地类可以理解为有名字的匿名类<br>内部类与匿名类不一样的是，内部类必须声明在成员的位置，即与属性和方法平等的位置。<br>本地类和匿名类一样，直接声明在代码块里面，可以是主方法，for循环里等等地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名    </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量  </span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲   </span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//与匿名类的区别在于，本地类有了自定义的类名</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">SomeHero</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println( name+ <span class="string">" 新的进攻手段"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        SomeHero h  =<span class="keyword">new</span> SomeHero();</span><br><span class="line">        h.name =<span class="string">"地卜师"</span>;</span><br><span class="line">        h.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在匿名类中使用外部的局部变量"><a href="#在匿名类中使用外部的局部变量" class="headerlink" title="在匿名类中使用外部的局部变量"></a>在匿名类中使用外部的局部变量</h4><p>在匿名类中使用外部的局部变量，外部的局部变量必须修饰为final</p><p>为什么要声明为final，其机制比较复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//在匿名类中使用外部的局部变量damage 必须修饰为final</span></span><br><span class="line">        <span class="keyword">int</span> damage = <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//这里使用本地类AnonymousHero来模拟匿名类的隐藏属性机制</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//事实上的匿名类，会在匿名类里声明一个damage属性，并且使用构造方法初始化该属性的值</span></span><br><span class="line">        <span class="comment">//在attack中使用的damage，真正使用的是这个内部damage，而非外部damage</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//假设外部属性不需要声明为final</span></span><br><span class="line">        <span class="comment">//那么在attack中修改damage的值，就会被暗示为修改了外部变量damage的值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//但是他们俩是不同的变量，是不可能修改外部变量damage的</span></span><br><span class="line">        <span class="comment">//所以为了避免产生误导，外部的damage必须声明为final,"看上去"就不能修改了</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AnonymousHero</span> <span class="keyword">extends</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> damage;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">AnonymousHero</span><span class="params">(<span class="keyword">int</span> damage)</span></span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.damage = damage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                damage = <span class="number">10</span>;</span><br><span class="line">                System.out.printf(<span class="string">"新的进攻手段，造成%d点伤害"</span>,<span class="keyword">this</span>.damage );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        Hero h = <span class="keyword">new</span> AnonymousHero(damage);       </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>在jdk8中，已经不需要强制修饰成final了，如果没有写final，不会报错，因为编译器<strong>偷偷的</strong>帮你加上了看不见的final  </p><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><h4 id="什么是默认方法"><a href="#什么是默认方法" class="headerlink" title="什么是默认方法"></a>什么是默认方法</h4><p>  默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法</p><p>Mortal 这个接口，增加了一个<strong>默认方法</strong> revive，这个方法有实现体，并且被声明为了<strong>default</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mortal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">die</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"本英雄复活了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么会有默认方法"><a href="#为什么会有默认方法" class="headerlink" title="为什么会有默认方法"></a>为什么会有默认方法</h4><p>假设没有默认方法这种机制，那么如果要为Mortal增加一个新的方法revive,那么所有实现了Mortal接口的类，都需要做改动。</p><p>但是引入了默认方法后，原来的类，不需要做任何改动，并且还能<strong>得到</strong>这个默认方法</p><p>通过这种手段，就能够很好的扩展新的类，并且做到不影响原来的类</p><p>​    </p><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="构造器-Constructor-是否可被-override"><a href="#构造器-Constructor-是否可被-override" class="headerlink" title="构造器 Constructor 是否可被 override?"></a>构造器 Constructor 是否可被 override?</h4><p>​        父类的私有属性和构造方法并不能被继承，所以 Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h4 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h4><ul><li><strong>重载：</strong> 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。 　　</li><li><strong>重写：</strong> 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法。</li></ul><h4 id="在Java中定义一个不做事且没有-参数的构造方法的作用"><a href="#在Java中定义一个不做事且没有-参数的构造方法的作用" class="headerlink" title="在Java中定义一个不做事且没有 参数的构造方法的作用"></a>在Java中定义一个不做事且没有 参数的构造方法的作用</h4><p>​        Java 程序在执行子类的构造方法之前，如果没有用 <code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 <code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h4 id="在调用子类构造方法之前回先调用父类没有参数的构造方法-其目的是"><a href="#在调用子类构造方法之前回先调用父类没有参数的构造方法-其目的是" class="headerlink" title="在调用子类构造方法之前回先调用父类没有参数的构造方法,其目的是?"></a>在调用子类构造方法之前回先调用父类没有参数的构造方法,其目的是?</h4><p>帮助子类做初始化工作.</p><h4 id="和equals"><a href="#和equals" class="headerlink" title="==和equals"></a>==和equals</h4><p>==:它的作用是判断两个对象的地址是不是相等.即,判断两个对象是不是同一个对象(基本数据类型==比较值,引用数据类型==比较的是内存地址).</p><p><strong>equals():</strong>它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li><p>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</p></li><li><p>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p><blockquote><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象</li></ul></blockquote></li></ul><h4 id="hashCode与equals-重要"><a href="#hashCode与equals-重要" class="headerlink" title="hashCode与equals(重要)"></a>hashCode与equals(重要)</h4><p><strong>hashCode（）介绍</strong></p><p>​        hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p><p>​        散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><p><strong>为什么要有 hashCode</strong></p><p>​        <strong>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong> 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals（）</code>方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：<code>hashCode()</code> 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个int整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。<strong><code>hashCode()</code>在散列表中才有用，在其它情况下没用。</strong>在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><p><strong>hashCode（）与equals（）的相关规定</strong></p><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等,对两个对象分别调用equals方法都返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><h4 id="正确使用equal的方法"><a href="#正确使用equal的方法" class="headerlink" title="正确使用equal的方法"></a>正确使用equal的方法</h4><p>Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p><p>错误示范:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</span></span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">"SnailClimb"</span>)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的程序会抛出空指针异常，但是我们把第二行的条件判断语句改为下面这样的话，就不会抛出空指针异常，else 语句块得到执行。：</p><p><code>&quot;SnailClimb&quot;.equals(str);// false</code></p><p>不过更推荐使用 <code>java.util.Objects#equals</code>(JDK7 引入的工具类)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Objects.equals(<span class="keyword">null</span>,<span class="string">"SnailClimb"</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>我们看一下<code>java.util.Objects#equals</code>的源码就知道原因了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可以避免空指针异常。如果a==null的话此时a.equals(b)就不会得到执行，避免出现空指针异常。</span></span><br><span class="line">        <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong></p><ul><li>每种原始类型都有默认值一样，如int默认值为 0，boolean 的默认值为 false，null 是任何引用类型的默认值，不严格的说是所有 Object 类型的默认值。</li><li>可以使用 == 或者 != 操作来比较null值，但是不能使用其他算法或者逻辑操作。在Java中<code>null == null</code>将返回true。</li><li>不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常.</li></ul></blockquote><h5 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充:"></a>知识补充:</h5><blockquote><p><strong>关于null</strong></p><p>1、null是Java中的关键字，像public、static、final。它是大小写敏感的，你不能将null写成Null或NULL，编译器将不能识别它们然后报错。</p><p>2、就像每种原始类型都有默认值一样，如int默认值为0，boolean的默认值为false，null是任何引用类型的默认值，不严格的说是所有object类型的默认值。就像你创建了一个布尔类型的变量，它将false作为自己的默认值，Java中的任何引用变量都将null作为默认值。这对所有变量都是适用的，如成员变量、局部变量、实例变量、静态变量（但当你使用一个没有初始化的局部变量，编译器会警告你）。为了证明这个事实，你可以通过创建一个变量然后打印它的值来观察这个引用变量。</p><p>3、null既不是对象也不是一种类型，它仅是一种特殊的值，你可以将其赋予任何引用类型，你也可以将null转化成任何类型。</p><p>4、null可以赋值给引用变量，你不能将null赋给基本类型变量，例如int、double、float、boolean。如果你那样做了，编译器将会报错。</p><p>5、任何含有null值的包装类在Java拆箱生成基本数据类型时候都会抛出一个空指针异常。（例如Integer拆箱成int时）</p><p>6、如果使用了带有null值的引用类型变量，instanceof操作将会返回false。（instanceof：用来在运行时指出对象是否是特定类的一个实例，例如：Integer num = null，那么，调用 num instanceof Integer时会返回false）</p><p>7、不能调用非静态方法来使用一个值为null的引用类型变量，它将会抛出空指针异常；可以使用静态方法来使用一个值为null的引用类型变量，因为静态方法使用静态绑定，不会抛出空指针异常。</p><p>8、你可以使用==或者!=操作来比较null值，但是不能使用其他算法或者逻辑操作，例如小于或者大于。跟SQL不一样，在Java中null==null将返回true。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 继承与接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_类和对象</title>
      <link href="/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>从基础复习刷一遍<br>类和对象</center><a id="more"></a><p><strong>引用:</strong>如果一个变量类型是类类型,而非基本数据类型,那么该变量又叫做引用.</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="引用和指向"><a href="#引用和指向" class="headerlink" title="引用和指向"></a>引用和指向</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Hero();</span><br></pre></td></tr></table></figure><p>代表<strong>创建</strong>了一个Hero对象<br>但是也仅仅是创建了一个对象，没有办法访问它<br>为了访问这个对象，会使用<strong>引用</strong>来<strong>代表</strong>这个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hero h = <span class="keyword">new</span> Hero();</span><br></pre></td></tr></table></figure><p>h这个变量是Hero类型，又叫做引用<br>=的意思指的h这个引用<strong>代表</strong>右侧创建的对象<br>“<strong>代表</strong>” 在面向对象里，又叫做“<strong>指向</strong>”</p><h4 id="多个引用-一个对象"><a href="#多个引用-一个对象" class="headerlink" title="多个引用,一个对象"></a>多个引用,一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用一个引用来指向这个对象</span></span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        Hero h2 = h1;  <span class="comment">//h2指向h1所指向的对象</span></span><br><span class="line">        Hero h3 = h1;</span><br><span class="line">        Hero h4 = h1;</span><br><span class="line">        Hero h5 = h4;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//h1,h2,h3,h4,h5 五个引用，都指向同一个对象     </span></span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用有多个，但是对象只有一个。<br>在这个例子里，所有引用都指向了同一个对象。<br>对象就像 “房产”， 引用就像”房产证”<br>房产证的复印件可以有多张，但是真正的”房产” 只有这么一处</p><h4 id="一个引用-多个对象"><a href="#一个引用-多个对象" class="headerlink" title="一个引用,多个对象"></a>一个引用,多个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           Hero garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">           garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个引用只能指向一个对象,当这个引用指向其他对象,且没有新的引用指向该对象时,就无法访问该对象,那么该对象就变得没有意义.</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在LOL中，武器是物品的一种，也是有名称和价格的<br>所以在设计类的时候，可以让武器继承物品，从而继承名称和价格属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//物品类(父类)</span></span><br><span class="line"><span class="comment">//物品类Item有属性name,price</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//武器类Weapon(不继承)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">int</span> damage;<span class="comment">//攻击力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承(虽然Weapon1自己没有设计name和price,但是通过继承Item类，也具备了name和price属性</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon1</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> damage; <span class="comment">//攻击力</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weapon infinityEdge = <span class="keyword">new</span> Weapon();</span><br><span class="line">        infinityEdge.damage = <span class="number">65</span>; <span class="comment">//damage属性在类Weapon中新设计的</span></span><br><span class="line">         </span><br><span class="line">        infinityEdge.name = <span class="string">"无尽之刃"</span>;<span class="comment">//name属性，是从Item中继承来的，就不需要重复设计了</span></span><br><span class="line">        infinityEdge.price = <span class="number">3600</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p><strong>方法重载:</strong>指的是方法名一样,但参数类型不一样</p><p>如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 进行了一次攻击 ，但是不确定打中谁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"对"</span> + h1.name + <span class="string">"进行了一次攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"同时对"</span> + h1.name + <span class="string">"和"</span> + h2.name + <span class="string">"进行了攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero bh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        bh.name = <span class="string">"赏金猎人"</span>;</span><br><span class="line"> </span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        Hero h2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h2.name = <span class="string">"提莫"</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法名是一样的，但是参数类型不一样<br>在调用方法attack的时候，会根据传递的参数类型以及数量，自动调用对应的方法</p><h4 id="可变数量的参数"><a href="#可变数量的参数" class="headerlink" title="可变数量的参数"></a>可变数量的参数</h4><p>采用可变数量参数,<strong>只需要设计一个方法</strong>,在方法里,使用操作数组的方式操作参数heros即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 进行了一次攻击 ，但是不确定打中谁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 可变数量的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero... heros)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heros.length; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" 攻击了 "</span> + heros[i].name);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero bh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        bh.name = <span class="string">"赏金猎人"</span>;</span><br><span class="line"> </span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        Hero h2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h2.name = <span class="string">"提莫"</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>通过一个类构造一个对象,这个过程叫做<strong>实例化</strong></p><p>实例化是通过调用<strong>构造方法</strong>(又叫做<strong>构造器</strong>)实现的</p><h4 id="什么是构造方法"><a href="#什么是构造方法" class="headerlink" title="什么是构造方法"></a>什么是构造方法</h4><p>方法名和类名一样（包括大小写）<br><strong>没有返回类型</strong><br>实例化一个对象的时候，必然调用构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> armor;</span><br><span class="line">    <span class="keyword">int</span> moveSpeed;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 方法名和类名一样（包括大小写）</span></span><br><span class="line">    <span class="comment">// 没有返回类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实例化一个对象的时候，必然调用构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实例化一个对象的时候，必然调用构造方法</span></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式构造方法"><a href="#隐式构造方法" class="headerlink" title="隐式构造方法"></a>隐式构造方法</h4><p>如果创建类是不写构造方法,则默认创建一个无参构造方法.</p><h4 id="提供有参构造方法"><a href="#提供有参构造方法" class="headerlink" title="提供有参构造方法"></a>提供有参构造方法</h4><p>一旦提供了一个有参的构造方法<br>同时又<strong>没有显式</strong>的提供一个无参的构造方法<br>那么默认的无参的构造方法，就“木有了“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//有参的构造方法</span></span><br><span class="line">    <span class="comment">//默认的无参的构造方法就失效了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String heroname)</span></span>&#123; </span><br><span class="line">        name = heroname;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>);    </span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(); <span class="comment">//无参的构造方法“木有了”</span></span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造方法重载"><a href="#构造方法重载" class="headerlink" title="构造方法重载"></a>构造方法重载</h4><p>和普通方法一样，构造方法也可以重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲  </span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">       </span><br><span class="line">    <span class="comment">//带一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String heroname)</span></span>&#123; </span><br><span class="line">        name = heroname;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//带两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String heroname,<span class="keyword">float</span> herohp)</span></span>&#123; </span><br><span class="line">        name = heroname;</span><br><span class="line">        hp = herohp;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>); </span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><strong>this</strong>这个关键字，相当于普通话里的“<strong>我</strong>” <strong>this即代表当前对象</strong></p><h4 id="通过this访问属性"><a href="#通过this访问属性" class="headerlink" title="通过this访问属性"></a>通过this访问属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名  </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//参数名和属性名一样</span></span><br><span class="line">    <span class="comment">//在方法体中，只能访问到参数name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName1</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//为了避免setName1中的问题，参数名不得不使用其他变量名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName2</span><span class="params">(String heroName)</span></span>&#123;</span><br><span class="line">        name = heroName;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//通过this访问属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName3</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//name代表的是参数name</span></span><br><span class="line">        <span class="comment">//this.name代表的是属性name</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero  h =<span class="keyword">new</span> Hero();</span><br><span class="line">         </span><br><span class="line">        h.setName1(<span class="string">"teemo"</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">         </span><br><span class="line">        h.setName2(<span class="string">"garen"</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">         </span><br><span class="line">        h.setName3(<span class="string">"死歌"</span>);</span><br><span class="line">        System.out.println(h.name);    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过this调用其他构造方法"><a href="#通过this调用其他构造方法" class="headerlink" title="通过this调用其他构造方法"></a>通过this调用其他构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名  </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量   </span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//带一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个参数的构造方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//带两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">        System.out.println(<span class="string">"两个参数的构造方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">        System.out.println(teemo.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>因为变量分为<strong>基本类型</strong>和<strong>类类型</strong></p><p>参数也是变量，所以传参分为<br><strong>基本类型传参</strong><br><strong>类类型传参</strong></p><h4 id="基本类型传参"><a href="#基本类型传参" class="headerlink" title="基本类型传参"></a>基本类型传参</h4><p>在方法内，无法修改方法外的基本类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;      </span><br><span class="line">    String name; <span class="comment">//姓名    </span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量   </span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲   </span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">huixue</span><span class="params">(<span class="keyword">int</span> xp)</span></span>&#123;</span><br><span class="line">        hp = hp + xp;</span><br><span class="line">        <span class="comment">//回血完毕后，血瓶=0</span></span><br><span class="line">        xp=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">        <span class="comment">//血瓶，其值是100</span></span><br><span class="line">        <span class="keyword">int</span> xueping = <span class="number">100</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//提莫通过这个血瓶回血        </span></span><br><span class="line">        teemo.huixue(xueping);         </span><br><span class="line">        System.out.println(xueping);         </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用与"><a href="#引用与" class="headerlink" title="引用与="></a>引用与=</h4><p>如果一个变量是基本类型,比如 int hp = 50;,我们就直接管hp叫变量,<strong>=表示赋值的意思</strong>。如果一个变量是类类型,比如 Hero h = new Hero();,我们就管h叫做<strong>引用</strong>。<strong>=不再是赋值的意思</strong>,<strong>=表示指向的意思</strong><br>比如 Hero h = new Hero();<br>这句话的意思是:引用h，指向一个Hero对象</p><h4 id="类类型传参"><a href="#类类型传参" class="headerlink" title="类类型传参"></a>类类型传参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">// 血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">// 护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">// 移动速度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">float</span> hp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 攻击一个英雄，并让他掉damage点血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero hero, <span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        hero.hp = hero.hp - damage;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo = <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>, <span class="number">383</span>);</span><br><span class="line">        Hero garen = <span class="keyword">new</span> Hero(<span class="string">"盖伦"</span>, <span class="number">616</span>);</span><br><span class="line">        garen.attack(teemo, <span class="number">100</span>);</span><br><span class="line">        System.out.println(teemo.hp);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包:package</p><p>把比较接近的类,规划在一个包下.</p><h4 id="使用其他包下的类-必须使用import"><a href="#使用其他包下的类-必须使用import" class="headerlink" title="使用其他包下的类,必须使用import"></a>使用其他包下的类,必须使用import</h4><p>使用同一个包下的其他类，直接使用即可<br>但是要使用其他包下的类，必须import</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Weapon类在其他包里，使用必须进行import</span></span><br><span class="line"><span class="keyword">import</span> property.Weapon;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//装备一把武器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equip</span><span class="params">(Weapon w)</span></span>&#123;    </span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>成员变量有四种修饰符:</p><p><strong>private</strong> 私有的<br><strong>package</strong>/friendly/default 不写<br><strong>protected</strong> 受保护的<br><strong>public</strong> 公共的</p><h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><p><strong>自身：</strong>指的是Hero自己<br><strong>同包子类：</strong>ADHero这个类是Hero的子类，并且和Hero处于<strong>同一个包下</strong><br><strong>不同包子类：</strong>Support这个类是Hero的子类，但是在<strong>另一个包下</strong><br><strong>同包类：</strong> GiantDragon 这个类和Hero是<strong>同一个包</strong>，但是彼此<strong>没有继承关系</strong><br><strong>其他类：</strong>Item这个类，<strong>在不同包</strong>，也没有继承关系的类</p><h4 id="访问修饰符修饰后的关系"><a href="#访问修饰符修饰后的关系" class="headerlink" title="访问修饰符修饰后的关系"></a>访问修饰符修饰后的关系</h4><table><thead><tr><th></th><th align="center">自身</th><th align="center">同包子类</th><th align="center">不同包子类</th><th align="center">同包类</th><th align="center">其他类</th></tr></thead><tbody><tr><td><strong>private 私有类</strong></td><td align="center">可访问</td><td align="center">不继承</td><td align="center">不继承</td><td align="center">不可访问</td><td align="center">不可访问</td></tr><tr><td><strong>package/friendly/default 不写</strong></td><td align="center">可访问</td><td align="center">继承</td><td align="center">不继承</td><td align="center">可访问</td><td align="center">不可访问</td></tr><tr><td><strong>protected 受保护的</strong></td><td align="center">可访问</td><td align="center">继承</td><td align="center">继承</td><td align="center">可访问</td><td align="center">不可访问</td></tr><tr><td><strong>public 公共的</strong></td><td align="center">可访问</td><td align="center">继承</td><td align="center">继承</td><td align="center">可访问</td><td align="center">可访问</td></tr></tbody></table><h4 id="什么情况使用修饰符"><a href="#什么情况使用修饰符" class="headerlink" title="什么情况使用修饰符?"></a>什么情况使用修饰符?</h4><p>  从作用域来看，public能够使用所有的情况。 但是大家在工作的时候，又不会真正全部都使用public,那么到底什么情况该用什么修饰符呢？</p><ol><li>属性通常使用private封装起来</li><li>方法一般使用public用于被调用</li><li>会被子类继承的方法，通常使用protected</li><li>package用的不多，一般新手会用package,因为还不知道有修饰符这个东西</li></ol><p>再就是<strong>作用范围最小原则</strong><br>简单说，能用private就用private，不行就放大一级，用package,再不行就用protected，最后用public。 这样就能把数据尽量的封装起来，没有必要<strong>露出来的</strong>，就不用<strong>露出来</strong>了  </p><h3 id="类属型"><a href="#类属型" class="headerlink" title="类属型"></a>类属型</h3><p>当一个属性被<strong>static</strong>修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong><br>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong><br><strong>与对象属性对比：</strong><br>不同对象的 对象属性 的值都可能不一样。<br>但是所有对象的类属性的值，都是一样的</p><h4 id="访问类属型"><a href="#访问类属型" class="headerlink" title="访问类属型"></a>访问类属型</h4><ol><li><p>对象.类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temmo.copyright</span><br></pre></td></tr></table></figure></li><li><p>类.类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hero.copyright</span><br></pre></td></tr></table></figure></li></ol><p>#### </p><h4 id="什么时候使用对象属性-什么时候使用类属型"><a href="#什么时候使用对象属性-什么时候使用类属型" class="headerlink" title="什么时候使用对象属性,什么时候使用类属型"></a>什么时候使用对象属性,什么时候使用类属型</h4><p>  如果一个属性，每个对象都不一样，比如name，这样的属性就应该设计为对象属性，因为它是<strong>跟着对象走的</strong>，每个对象的name都是不同的</p><p>如果一个属性，<strong>所有的对象都共享</strong>，都是一样的，那么就应该设计为类属性。比如血量上限，所有的英雄的血量上限都是 9999，不会因为英雄不同，而取不同的值。 这样的属性，就适合设计为类属性</p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p><strong>类方法：</strong> 又叫做静态方法 </p><p><strong>对象方法：</strong> 又叫实例方法，非静态方法 </p><p>访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上<br>访问类方法，<strong>不需要对象</strong>的存在，直接就访问  </p><h4 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h4><ol><li><p>对象.类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temmo.battleWin();</span><br></pre></td></tr></table></figure></li><li><p>类.类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hero.battleWin();</span><br></pre></td></tr></table></figure></li></ol><h4 id="什么时候设计对象方法-什么时候设计类方法"><a href="#什么时候设计对象方法-什么时候设计类方法" class="headerlink" title="什么时候设计对象方法,什么时候设计类方法"></a>什么时候设计对象方法,什么时候设计类方法</h4><p>如果在某一个方法里，调用了对象属性，比如</p><p>如果一个方法，没有调用任何对象属性，那么就可以考虑设计为类方法，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name属性是对象属性，只有存在一个具体对象的时候，name才有意义。 如果方法里访问了对象属性，那么这个方法，就必须设计为对象方法</p><p>如果一个方法，没有调用任何对象属性，那么就可以考虑设计为类方法，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGameDuration</span><span class="params">()</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"已经玩了10分50秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printGameDuration 打印当前玩了多长时间了，不和某一个具体的英雄关联起来，所有的英雄都是一样的。 这样的方法，更带有色彩就像取随机数一样，random()是一个功能用途的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.random()</span><br></pre></td></tr></table></figure><h3 id="属性初始化"><a href="#属性初始化" class="headerlink" title="属性初始化"></a>属性初始化</h3><h4 id="对象属性初始化"><a href="#对象属性初始化" class="headerlink" title="对象属性初始化"></a>对象属性初始化</h4><p>对象属性初始化有3种</p><ol><li><p>声明该属性的时候初始化 </p></li><li><p>构造方法中初始化</p></li><li><p>初始化块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"some hero"</span>; <span class="comment">//声明该属性的时候初始化</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> maxHP;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        maxHP = <span class="number">200</span>; <span class="comment">//初始化块</span></span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hp = <span class="number">100</span>; <span class="comment">//构造方法中初始化    </span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="类属型初始化"><a href="#类属型初始化" class="headerlink" title="类属型初始化"></a>类属型初始化</h4><p>类属性初始化有2种</p><ol><li>声明该属性的时候初始化</li><li>静态初始化块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> maxHP;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//物品栏的容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> itemCapacity=<span class="number">8</span>; <span class="comment">//声明的时候 初始化</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        itemCapacity = <span class="number">6</span>;<span class="comment">//静态初始化块 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;   </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Hero.itemCapacity);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>当一个类只能被实例化一次时,就要用单例模式.</p><h4 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式又叫做 Singleton模式，指的是一个类，在一个JVM里，只有一个实例存在。</p><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h4><p>大龙应该只有一只，通过私有化其构造方法，使得外部无法通过new得到新的实例。<br>大龙提供了一个public static的getInstance方法，外部调用者通过该方法获取12行定义的对象，而且每一次都是获取同一个对象。 从而达到单例的目的。<br>这种单例模式又叫做<strong>饿汉式</strong>单例模式，无论如何都会创建一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取12行定义的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//GiantDragon g = new GiantDragon();</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象   </span></span><br><span class="line">        GiantDragon g1 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g2 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g3 = GiantDragon.getInstance();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h4><p><strong>懒汉式</strong>单例模式与<strong>饿汉式</strong>单例模式不同，只有在调用getInstance的时候，才会创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//public static 方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回 instance指向的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGiantDragon</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//      GiantDragon g = new GiantDragon();</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象</span></span><br><span class="line">         </span><br><span class="line">        GiantDragon g1 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g2 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g3 = GiantDragon.getInstance();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两种模式的适应情况"><a href="#两种模式的适应情况" class="headerlink" title="两种模式的适应情况"></a>两种模式的适应情况</h4><p>  <strong>饿汉式</strong>是立即加载的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p><strong>懒汉式</strong>，是延迟加载的方式，只有使用的时候才会加载。 并且有线程安全的考量<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式  </p><h4 id="单例模式三元素"><a href="#单例模式三元素" class="headerlink" title="单例模式三元素"></a>单例模式三元素</h4><p><strong>面试考点</strong>:什么是单例模式?</p><p>回答的时候要答到:</p><ol><li>构造方法私有化</li><li>静态属性指向实例</li><li>public static的 getInstance方法，返回第二步的静态属性</li></ol><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><h4 id="预先定义的常量"><a href="#预先定义的常量" class="headerlink" title="预先定义的常量"></a>预先定义的常量</h4><p>枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常量<br>比如设计一个枚举类型 季节，里面有4种常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season&#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用枚举变量的好处"><a href="#使用枚举变量的好处" class="headerlink" title="使用枚举变量的好处"></a>使用枚举变量的好处</h4><p>假设在使用switch的时候，不是使用枚举，而是使用int，而int的取值范围就不只是1-4，有可能取一个超出1-4之间的值，这样判断结果就似是而非了。（因为只有4个季节）</p><p>但是使用枚举，就能把范围死死的限定在这四个当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> season = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"春天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">"夏天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">"秋天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">"冬天"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历枚举"><a href="#遍历枚举" class="headerlink" title="遍历枚举"></a>遍历枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Season s : Season.values()) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="在一个静态放啊内调用一个非静态方法成员为什么是非法的"><a href="#在一个静态放啊内调用一个非静态方法成员为什么是非法的" class="headerlink" title="在一个静态放啊内调用一个非静态方法成员为什么是非法的?"></a>在一个静态放啊内调用一个非静态方法成员为什么是非法的?</h4><p>由于静态方法可以不通过对象进行调用,因此在静态方法里,不能调用其它非静态变量,也不可以访问非静态变量成员.</p><h4 id="创建一个对象用什么运算符-对象实体与对象引用有何不同"><a href="#创建一个对象用什么运算符-对象实体与对象引用有何不同" class="headerlink" title="创建一个对象用什么运算符?对象实体与对象引用有何不同?"></a>创建一个对象用什么运算符?对象实体与对象引用有何不同?</h4><p>new运算符，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向0个或1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）。</p><h4 id="构造方法有哪些特性"><a href="#构造方法有哪些特性" class="headerlink" title="构造方法有哪些特性?"></a>构造方法有哪些特性?</h4><ol><li>名字与类名相同。</li><li>没有返回值，但不能用void声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ol><h4 id="静态方法和实例方法有何不同"><a href="#静态方法和实例方法有何不同" class="headerlink" title="静态方法和实例方法有何不同"></a>静态方法和实例方法有何不同</h4><ol><li>在外部调用静态方法时,可以使用”类名.方法名”的方式,也可以使用”对象名.方法名”的方式.而实例方法只有后面这一种方式.也就是说,调用静态方法可以无需创建对象.</li><li>静态方法在访问本类成员时,只允许访问静态成员(即静态成员变量和静态方法),而不允许访问实例成员变量和实例方法;实例方法则无此限制.</li></ol><h4 id="对象的相等与指向他们的引用相等-两者有什么区别"><a href="#对象的相等与指向他们的引用相等-两者有什么区别" class="headerlink" title="对象的相等与指向他们的引用相等,两者有什么区别?"></a>对象的相等与指向他们的引用相等,两者有什么区别?</h4><p>对象的相等,比的是内存中存放的内容是否相等.而引用相等,闭得是他们指向的内存地址是否相等.</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_数组</title>
      <link href="/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%95%B0%E7%BB%84/"/>
      <url>/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>从基础复习刷一遍<br>数组</center><a id="more"></a><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p><strong>数组</strong>:数组是一个固定长度的,包含了相同类型数据的容器.</p><h4 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>int[] a;</strong>         声明了一个数组变量。<br><strong>[]</strong>                  表示该变量是一个数组<br><strong>int</strong>                表示数组里的每一个元素都是一个整数<br><strong>a</strong>                  是变量名<br>但是，仅仅是这一句<strong>声明，不会创建数组</strong></p><p>有时候也会写成int a[]; 没有任何区别，就是你看哪种顺眼的问题</p><h4 id="创建数组-1"><a href="#创建数组-1" class="headerlink" title="创建数组"></a>创建数组</h4><p>创建数组的时候，要指明数组的长度。<br><strong>new int[5]</strong><br><strong>引用概念：</strong><br>如果变量代表一个数组，比如a,我们把a叫做<strong>引用</strong><br>与基本类型不同<br>int c = 5; 这叫给c<strong>赋值</strong>为5<br>声明一个引用 int[] a;<br>a = new int[5];<br>让a这个引用，<strong>指向</strong>数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明一个引用</span></span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">        <span class="comment">//创建一个长度是5的数组，并且使用引用a指向该数组</span></span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">//声明的同时，指向一个数组        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h4><p>数组下标<strong>基0</strong>    下标0，代表数组里的第一个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">         </span><br><span class="line">        a[<span class="number">0</span>]= <span class="number">1</span>;  <span class="comment">//下标0，代表数组里的第一个数</span></span><br><span class="line">        a[<span class="number">1</span>]= <span class="number">2</span>;</span><br><span class="line">        a[<span class="number">2</span>]= <span class="number">3</span>;</span><br><span class="line">        a[<span class="number">3</span>]= <span class="number">4</span>;</span><br><span class="line">        a[<span class="number">4</span>]= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">         </span><br><span class="line">        System.out.println(a.length); <span class="comment">//打印数组的长度</span></span><br><span class="line">         </span><br><span class="line">        a[<span class="number">4</span>]=<span class="number">100</span>; <span class="comment">//下标4，实质上是“第5个”，即最后一个</span></span><br><span class="line">        a[<span class="number">5</span>]=<span class="number">101</span>; <span class="comment">//下标5，实质上是“第6个”，超出范围 ,产生数组下标越界异常</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>.length属性</strong>用于访问一个数组的长度<br>数组访问下标范围是0到长度-1<br>一旦超过这个范围,就会产生数组下标越界异常</p><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><h4 id="分配空间与赋值分配进行"><a href="#分配空间与赋值分配进行" class="headerlink" title="分配空间与赋值分配进行"></a>分配空间与赋值分配进行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">//分配了长度是5的数组，但是没有赋值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//没有赋值，那么就会使用默认值</span></span><br><span class="line">        <span class="comment">//作为int类型的数组，默认值是0</span></span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//进行赋值</span></span><br><span class="line">     </span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">101</span>;</span><br><span class="line">        a[<span class="number">2</span>] = <span class="number">103</span>;</span><br><span class="line">        a[<span class="number">3</span>] = <span class="number">120</span>;</span><br><span class="line">        a[<span class="number">4</span>] = <span class="number">140</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分配空间-同时赋值"><a href="#分配空间-同时赋值" class="headerlink" title="分配空间,同时赋值"></a>分配空间,同时赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//写法一： 分配空间同时赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写法二： 省略了new int[],效果一样</span></span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//写法三：同时分配空间，和指定内容</span></span><br><span class="line">        <span class="comment">//在这个例子里，长度是3，内容是5个，产生矛盾了</span></span><br><span class="line">        <span class="comment">//所以如果指定了数组的内容，就不能同时设置数组的长度</span></span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><blockquote><p> <strong>选择法排序的思路：</strong> </p><p><strong>把第一位</strong>和其他所有的进行比较，只要比第一位小的，就换到第一个位置来<br>比较完后，<strong>第一位就是最小的</strong><br>然后再从<strong>第二位</strong>和剩余的其他所有进行比较，只要比第二位小，就换到第二个位置来<br>比较完后，<strong>第二位就是第二小的</strong> </p></blockquote><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">//选择法排序</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">//第一步： 把第一位和其他所有位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现其他位置的数据比第一位小，就进行交换</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">0</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[<span class="number">0</span>];</span><br><span class="line">                a[<span class="number">0</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最小的一个数，到了最前面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二步： 把第二位的和剩下的所有位进行比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[<span class="number">1</span>];</span><br><span class="line">                a[<span class="number">1</span>] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二小的数，到了第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//移动的位置是从0 逐渐增加的</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j+<span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;a[j])&#123;  </span><br><span class="line">                    <span class="keyword">int</span> temp = a[j];</span><br><span class="line">                    a[j] = a[i];</span><br><span class="line">                    a[i] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><blockquote><p><strong>冒泡法排序的思路：</strong><br>第一步：从第一位开始，把相邻两位进行比较<br>如果发现前面的比后面的大，就把大的数据交换在后面，循环比较完毕后，<strong>最后一位就是最大的</strong><br>第二步： 再来一次，只不过不用比较最后一位 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//排序前，先把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">//冒泡法排序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//第一步：从第一位开始，把相邻两位进行比较</span></span><br><span class="line">        <span class="comment">//如果发现前面的比后面的大，就把大的数据交换在后面</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，最大的到了最后面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//第二步： 再来一次，只不过不用比较最后一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                a[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="comment">//可以发现，倒数第二大的到了倒数第二个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//可以发现一个规律</span></span><br><span class="line">        <span class="comment">//后边界在收缩</span></span><br><span class="line">        <span class="comment">//所以可以在外面套一层循环</span></span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-j-<span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])&#123;  </span><br><span class="line">                    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                    a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                    a[i+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">" "</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>增强型for循环在遍历一个数组的时候会更加快捷.</p><blockquote><p>注:增强for循环只能用来取值,却不能修改数组里的值.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> values [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//常规遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> each = values[i];</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//增强型for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> each : values) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>数组的长度是不可变的,一旦分配好空间,是多长,就多长,不能增加也不能减少.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(src,srcPos,dest,destPos,length)</span><br></pre></td></tr></table></figure><p>src: 源数组<br>srcPos: 从源数组复制数据的起始位置<br>dest: 目标数组<br>destPos: 复制到目标数组的起始位置<br>length: 复制的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//分配了长度是3的空间，但是没有赋值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//通过数组赋值把，a数组的前3位赋值到b数组</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//方法一： for循环</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二: System.arraycopy(src, srcPos, dest, destPos, length)</span></span><br><span class="line">        <span class="comment">//src: 源数组</span></span><br><span class="line">        <span class="comment">//srcPos: 从源数组复制数据的起始位置</span></span><br><span class="line">        <span class="comment">//dest: 目标数组</span></span><br><span class="line">        <span class="comment">//destPos: 复制到目标数组的启始位置</span></span><br><span class="line">        <span class="comment">//length: 复制的长度       </span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//把内容打印出来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">   &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">   &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">   &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//初始化二维数组，</span></span><br><span class="line">       <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">//有两个一维数组，每个一维数组的长度是3</span></span><br><span class="line">       a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">5</span>;  <span class="comment">//可以直接访问一维数组，因为已经分配了空间</span></span><br><span class="line">          </span><br><span class="line">       <span class="comment">//只分配了二维数组</span></span><br><span class="line">       <span class="keyword">int</span>[][] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][]; <span class="comment">//有两个一维数组，每个一维数组的长度暂未分配</span></span><br><span class="line">       b[<span class="number">0</span>]  =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">//必须事先分配长度，才可以访问</span></span><br><span class="line">       b[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//指定内容的同时，分配空间</span></span><br><span class="line">       <span class="keyword">int</span>[][] c = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">               &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">               &#123;<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">               &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">       &#125;;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>Arrays是针对数组的工具类，可以进行 排序，查找，复制填充等功能。 大大提高了开发人员的工作效率。</p><table><thead><tr><th align="center">关键词</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">copyOfRange</td><td align="center">数组赋值</td></tr><tr><td align="center">toString()</td><td align="center">转为字符串</td></tr><tr><td align="center">sort</td><td align="center">排序</td></tr><tr><td align="center">binarySearch</td><td align="center">搜索</td></tr><tr><td align="center">equals</td><td align="center">判断是否相同</td></tr><tr><td align="center">fill</td><td align="center">填充</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_控制流程</title>
      <link href="/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/07/29/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>从基础复习刷一遍<br>控制流程</center><a id="more"></a><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>条件判断</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式<span class="number">1</span>)&#123;<span class="comment">//如果表达式1的值是true,就执行表达式2</span></span><br><span class="line">表达式<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//如果成立就打印yes</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多表达式与一个表达式"><a href="#多表达式与一个表达式" class="headerlink" title="多表达式与一个表达式"></a>多表达式与一个表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//如果有多个表达式，必须用大括弧包括起来</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes2"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//否则表达式2 3 无论b是否为true都会执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes2"</span>);</span><br><span class="line">System.out.println(<span class="string">"yes3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只有一个表达式可以不用写括弧，看上去会简约一些</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if使用过程中可能遇到的坑"><a href="#if使用过程中可能遇到的坑" class="headerlink" title="if使用过程中可能遇到的坑"></a>if使用过程中可能遇到的坑</h4><p>if后面有一个分号; 而分号也是一个完整的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b);</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);<span class="comment">//输出yes</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p>else代表了不成立的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b)</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="else-if"><a href="#else-if" class="headerlink" title="else if"></a>else if</h4><p>else if 实现了多条件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只使用 if,会执行4次判断</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果使用else if, 一旦在18行，判断成立， 20行和22行的判断就不会执行了，节约了运算资源</span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">3</span>)</span><br><span class="line">System.out.println(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">4</span>)</span><br><span class="line">System.out.println(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch语句相当于if else的另一种表达方式.</p><p>switch可以使用byte,short,int,char,String,enum</p><blockquote><p><strong>注:</strong> 每个表达式结束，都应该有一个break;<br><strong>注:</strong> String在Java1.7之前是不支持的, Java从1.7开始支持switch用String的，编译后是把String转化为hash值，其实还是整数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果使用if else</span></span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (day==<span class="number">1</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">2</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">3</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">4</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">5</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">6</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (day==<span class="number">7</span>)</span><br><span class="line">            System.out.println(<span class="string">"星期天"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"这个是什么鬼？"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//如果使用switch</span></span><br><span class="line">        <span class="keyword">switch</span>(day)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">"星期天"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"这个是什么鬼？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>关键词:</p><table><thead><tr><th align="center">关键词</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">while</td><td align="center">条件为 true时,重复执行</td></tr><tr><td align="center">do-while</td><td align="center">条件为true时,重复执行,至少会执行一次</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//打印0到4    </span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;<span class="comment">//条件为true时,重复执行</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印0到4</span></span><br><span class="line">        <span class="comment">//与while的区别是，无论是否成立，先执行一次，再进行判断</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;           </span><br><span class="line">        &#125; <span class="keyword">while</span>(i&lt;<span class="number">5</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           </span><br><span class="line">        <span class="comment">//使用while打印0到4    </span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"while循环输出的"</span>+i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//使用for打印0到4    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"for  循环输出的"</span>+j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue    继续下一次循环</p><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是双数,后面的代码不执行,直接进行下一次循环.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">//如果是双数，后面的代码不执行，直接进行下一次循环</span></span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 直接结束当前循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//如果是双数，直接结束循环</span></span><br><span class="line">             </span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结束外部循环"><a href="#结束外部循环" class="headerlink" title="结束外部循环"></a>结束外部循环</h3><h4 id="使用boolean变量结束外部循环"><a href="#使用boolean变量结束外部循环" class="headerlink" title="使用boolean变量结束外部循环"></a>使用boolean变量结束外部循环</h4><p>借助boolean变量结束外部循环<br>需要在内部循环中修改这个变量值<br>每次内部循环结束后，都要在外部循环中判断，这个变量的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> breakout = <span class="keyword">false</span>; <span class="comment">//是否终止外部循环的标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">":"</span> + j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == j % <span class="number">2</span>) &#123;</span><br><span class="line">                    breakout = <span class="keyword">true</span>; <span class="comment">//终止外部循环的标记设置为true</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (breakout) <span class="comment">//判断是否终止外部循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用标签结束外部循环"><a href="#使用标签结束外部循环" class="headerlink" title="使用标签结束外部循环"></a>使用标签结束外部循环</h4><p>在外部循环的前一行，加上标签<br>在break的时候使用该标签<br>即能达到结束外部循环的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        outloop: <span class="comment">//outloop这个标示是可以自定义的比如outloop1,ol2,out5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.println(i+<span class="string">":"</span>+j);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                    <span class="keyword">break</span> outloop; <span class="comment">//如果是双数，结束外部循环</span></span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 控制流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_操作符</title>
      <link href="/2019/07/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2019/07/25/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>从基础复习刷一遍<br>操作符</center><a id="more"></a><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符:"></a><strong>算数操作符:</strong></h3><p> <strong>基本操作符:</strong>+-*/%</p><p><strong>自增自减:</strong>++–</p><h4 id="任意运算单元的长度超过int"><a href="#任意运算单元的长度超过int" class="headerlink" title="任意运算单元的长度超过int"></a>任意运算单元的长度超过int</h4><p>如果有任何运算单元的长度超过int,那么运算结果就按照最长的长度计算<br>比如<br>int a = 5;<br>long b = 6;<br>a+b -&gt; 结果类型是long</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">long</span> b = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> c = (<span class="keyword">int</span>) (a+b); <span class="comment">//a+b的运算结果是long型，所以要进行强制转换</span></span><br><span class="line">        <span class="keyword">long</span> d = a+b;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任意运算单元的长度超过int-1"><a href="#任意运算单元的长度超过int-1" class="headerlink" title="任意运算单元的长度超过int"></a>任意运算单元的长度超过int</h4><p>如果任何运算单元的长度都不超过int,那么运算结果就按照int来计算<br>byte a = 1;<br>byte b= 2;<br>a+b -&gt; int 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> b= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">byte</span> c = (<span class="keyword">byte</span>) (a+b); <span class="comment">//虽然a b都是byte类型，但是运算结果是int类型，需要进行强制转换</span></span><br><span class="line">        <span class="keyword">int</span> d = a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取模"><a href="#取模" class="headerlink" title="%取模"></a>%取模</h4><p>%取余数,又叫取模</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">        System.out.println(i%j); <span class="comment">//输出为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h4><p>++</p><p>–</p><p><strong>自增自减操作符前置后置的区别</strong></p><p>i++;    <strong>先取值,在运算</strong></p><p>++i;    <strong>先运算,再取值.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        System.out.println(i++); <span class="comment">//输出5</span></span><br><span class="line">        System.out.println(i);   <span class="comment">//输出6</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">        System.out.println(++j); <span class="comment">//输出6</span></span><br><span class="line">        System.out.println(j);   <span class="comment">//输出6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><blockquote><p>&gt; 大于<br>&gt;= 大于或等于<br>&lt; 小于<br>&lt;= 小于或等于<br>== 是否相等<br>!= 是否不等 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">6</span>;</span><br><span class="line">       <span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">       System.out.println(a&gt;b);  <span class="comment">//返回 false</span></span><br><span class="line">       System.out.println(a&gt;=c);  <span class="comment">//返回 true</span></span><br><span class="line">        </span><br><span class="line">       System.out.println(a==b); <span class="comment">//返回false</span></span><br><span class="line">       System.out.println(a!=b);<span class="comment">//返回true</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th align="center">关键词</th><th align="center">简介</th><th align="center">逻辑</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">长路与</td><td align="center">两边的运算单元都是布尔值<br>都为真时，才为真<br>任意为假，就为假<br>两侧，都会被运算</td></tr><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">两边的运算单元都是布尔值<br>都为真时，才为真<br>任意为假，就为假<br>只要第一个是false，第二个就不进行运算了</td></tr><tr><td align="center">|</td><td align="center">长路或</td><td align="center">两边的运算单元都是布尔值<br>都为假时，才为假<br>任意为真，就为真<br>两侧都会被运算</td></tr><tr><td align="center">||</td><td align="center">短路或</td><td align="center">两边的运算单元都是布尔值<br>都为假时，才为假<br>任意为真，就为真<br>只要第一个是true的，第二个就不进行运算了</td></tr><tr><td align="center">!</td><td align="center">取反</td><td align="center">真变为假 <br>假变为真</td></tr><tr><td align="center">^</td><td align="center">异或</td><td align="center">不同，返回真 <br>相同，返回假</td></tr></tbody></table><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>听说用处不大,暂时不补,有需要以后更新.</p><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><pre><code>&gt; =                    赋值操作                                顺序从右到左</code></pre><blockquote><p>+=                  对本身进行运算,并赋值        自加,下面类似 i+=2;  ===   i=i+2;</p><p>-=</p><p>*=</p><p>/=</p><p>%=</p><p>&amp;=</p><p>|=</p><p>^=</p><p>&lt;&lt;=</p><p>&gt;&gt;=</p><p>&gt;&gt;&gt;=</p></blockquote><h3 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h3><p>?:</p><p>表达式1?值1:值2</p><p>如果表达式为真    返回值1</p><p>如果表达式为假    返回值2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> k = i &lt; j ? <span class="number">99</span> : <span class="number">88</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 相当于</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            k = <span class="number">99</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            k = <span class="number">88</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.out.println(k);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>Scanner类用于读取数据.</p><p>在使用Scanner类时,需要在最前面加上:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><h4 id="使用Scanner读取整数"><a href="#使用Scanner读取整数" class="headerlink" title="使用Scanner读取整数"></a>使用Scanner读取整数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第一个整数："</span>+a);</span><br><span class="line">        <span class="keyword">int</span> b = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"第二个整数："</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Scanner读取浮点数"><a href="#使用Scanner读取浮点数" class="headerlink" title="使用Scanner读取浮点数"></a>使用Scanner读取浮点数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">float</span> a = s.nextFloat();</span><br><span class="line">        System.out.println(<span class="string">"读取的浮点数的值是："</span>+a);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Scanner读取字符串"><a href="#使用Scanner读取字符串" class="headerlink" title="使用Scanner读取字符串"></a>使用Scanner读取字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String a = s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"读取的字符串是："</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取了整数后-接着读取字符串"><a href="#读取了整数后-接着读取字符串" class="headerlink" title="读取了整数后,接着读取字符串"></a>读取了整数后,接着读取字符串</h4><p>  需要注意的是，如果在通过nextInt()读取了整数后，再接着读取字符串，读出来的是回车换行:”\r\n”,因为nextInt仅仅读取数字信息，而不会<strong>读取</strong>回车换行”\r\n”.</p><p>所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该连续执行两次nextLine()，第一次是取走回车换行，第二次才是读取真正的字符串  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i = s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"读取的整数是"</span>+ i);</span><br><span class="line">        String rn = s.nextLine();</span><br><span class="line">        String a = s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"读取的字符串是："</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_变量</title>
      <link href="/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E5%8F%98%E9%87%8F/"/>
      <url>/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<center>Javaの笔记<br>从基础复习刷一遍<br>变量</center><a id="more"></a><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p><strong>变量的定义:</strong>用来命名的一个数据标识符.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year  = <span class="number">1849</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>int</strong> 是数据类型，表示是整数<br><strong>year</strong> 是一个标识符<br><strong>=</strong> 是赋值操作符<br><strong>1949</strong> 是一个数字类型的值<br><strong>;</strong> 表示该行结束</p><p>year 这个标识符就是一个变量，它代表1949这个值  </p></blockquote><h3 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h3><p>Java中有八种基本类型，都是Java语言预先定义好的，并且是关键字。 </p><blockquote><p>分别是:</p><p>​    整型 （4种）<br>​    字符型 （1种）<br>​    浮点型 （2种）<br>​    布尔型（1种）</p></blockquote><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>整型变量用于存放整数</p><ul><li><p>byte</p></li><li><p>short</p></li><li><p>int</p></li><li><p>long</p></li></ul><p>区别在于不同类型的整型，最大值，最小值不一样<br>如果试图给byte类型的变量赋予超出其范围的值，就会产生编译错误，这个时候就需要进行<strong>类型转换</strong>.</p><p>整型数据类型长度</p><table><thead><tr><th align="center">类型</th><th align="center">缺省值</th><th align="center">长度</th><th align="center">数值范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">0</td><td align="center">8位</td><td align="center">-128~127</td></tr><tr><td align="center">short</td><td align="center">0</td><td align="center">16位</td><td align="center">-32,768~32,767</td></tr><tr><td align="center">int</td><td align="center">0</td><td align="center">32位</td><td align="center">-2,147,483,648~2,147,483,647</td></tr><tr><td align="center">long</td><td align="center">0</td><td align="center">64位</td><td align="center">-9,223,372,036,854,775,808~9,223,372,036,854,775,807</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">short</span> s = <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">300</span>;</span><br><span class="line">  <span class="keyword">long</span> l = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*如果试图给byte类型的变量赋予超出其范围的值，就会产生编译错误*/</span></span><br><span class="line">  <span class="keyword">byte</span> b2 = <span class="number">200</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>char类型用于存放一个字符，值用单引号’表示 (双引号表示字符串)<br>其长度和short一样，也是16位的<br><strong>只能存放一个字符</strong>，超过一个字符就会产生编译错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c = <span class="string">'中'</span>;</span><br><span class="line">  <span class="comment">//char 只能存放一个字符，超过一个字符就会产生编译错误</span></span><br><span class="line">  <span class="keyword">char</span> c2 = <span class="string">'中国'</span>; <span class="comment">//报错</span></span><br><span class="line">  <span class="keyword">char</span> c3 = <span class="string">'ab'</span>; <span class="comment">//报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><blockquote><ul><li>float    长度32位</li><li>double   长度64位</li></ul></blockquote><p><strong>注意： 默认的小数值是double类型的</strong><br>所以 float f = 54.321会出现编译错误，因为54.321的默认类型是 double，其类型 长度为64，超过了float的长度32<br>在数字后面<strong>加一个字母f</strong>，直接把该数字声明成float类型<br>float f2 = 54.321<strong>f</strong>, 这样就不会出错了</p><p>浮点型数据类型</p><table><thead><tr><th align="center">类型</th><th align="center">缺省值</th><th align="center">长度</th><th align="center">数的范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">0.0</td><td align="center">32位</td><td align="center">3.4E-038~3.4E+038</td></tr><tr><td align="center">double</td><td align="center">0.0</td><td align="center">64位</td><td align="center">1.7E-308~1.7E+308</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">double</span> d = <span class="number">123.45</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//该行会出现编译错误，因为54.321是double型的</span></span><br><span class="line">      <span class="keyword">float</span> f = <span class="number">54.321</span>;      </span><br><span class="line">      <span class="keyword">float</span> f2 = <span class="number">54.321f</span>;     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>用于表示真假,长度为1</p><blockquote><p>虽然布尔型真正存放的数据是0(false) 1(true)<br>但是，不能直接使用0 1 进行赋值</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">缺省值</th><th align="center">长度</th><th align="center">数的范围</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">false</td><td align="center">1位</td><td align="center">false,true</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然布尔型真正存放的数据是0(false) 1(true)</span></span><br><span class="line"><span class="comment">// 但是，不能直接使用0 1 进行赋值</span></span><br><span class="line"><span class="keyword">boolean</span> b3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>String类型其实<strong>并不是基本类型</strong>，但是它是如此广泛的被使用，常常被误以为是一种基本类型。<br>String类型是Immutable的，一旦创建就不能够被改变.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello Java"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><p>创建一个Hero对象会用到new关键字，但是给一个基本类型变量赋值却不是用new. 因为基本类型是Java语言里的一种内置的特殊数据类型，并不是某个类的对象。<br>给基本类型的变量赋值的方式叫做<strong>字面值</strong> .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> hp = <span class="number">3.2f</span>;</span><br></pre></td></tr></table></figure><h4 id="整数字面值"><a href="#整数字面值" class="headerlink" title="整数字面值"></a>整数字面值</h4><p>当以l或者L结尾的时候，一个整数字面值是long类型，否则就是int类型。 建议使用大写的L而非小写的l，因为容易和1混淆。<br>byte,short,int和long的值都可以通过int类型的字面值来创建。整数的字面值可以用如下四种进制来表示：<br>十进制: 基 10, 包含从0-9的数字，平常用的就是这种<br>十六进制: 基 16, 包含从0-9的数字，和从A-F的字母。<br>八进制: 基 8, 包含从0-7的数字<br>二进制: 基 2, 包含0和1。（从 JAVA7开始就可以创建 二进制的字面值了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> val = <span class="number">26L</span>; <span class="comment">//以L结尾的字面值表示long型</span></span><br><span class="line">        <span class="keyword">int</span> decVal = <span class="number">26</span>; <span class="comment">//默认就是int型</span></span><br><span class="line">        <span class="keyword">int</span> hexVal = <span class="number">0x1a</span>; <span class="comment">//16进制</span></span><br><span class="line">        <span class="keyword">int</span> oxVal = <span class="number">032</span>; <span class="comment">//8进制</span></span><br><span class="line">        <span class="keyword">int</span> binVal = <span class="number">0b11010</span>; <span class="comment">//2进制</span></span><br><span class="line">        System.out.println(oxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浮点数字面值"><a href="#浮点数字面值" class="headerlink" title="浮点数字面值"></a>浮点数字面值</h4><p>当以f或者F结尾的时候，就表示一个float类型的浮点数，否则就是double类型（以d或者D结尾，写不写都可以）。<br>浮点数还可以用E或者e表示（科学计数法）<br>e2表示10的二次方，即100<br>1.234e2 = 1.234x100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">123.4F</span>;<span class="comment">// 以F结尾的字面值表示float类型</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.4</span>;<span class="comment">// 默认就是double类型</span></span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">1.234e2</span>;<span class="comment">// 科学计数法表示double</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符和字符串字面值"><a href="#字符和字符串字面值" class="headerlink" title="字符和字符串字面值"></a>字符和字符串字面值</h4><p>字符的字面值放在单引号中<br>字符串的字面值放在双引号中<br>需要注意的是，<strong>\表示转义</strong>，比如需要表示制表符，回车换行，双引号等就需要用 \t \r \n &quot; 的方式进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">"盖伦"</span>;</span><br><span class="line">        <span class="keyword">char</span> a= <span class="string">'c'</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//以下是转义字符</span></span><br><span class="line">        <span class="keyword">char</span> tab = <span class="string">'\t'</span>; <span class="comment">//制表符</span></span><br><span class="line">        <span class="keyword">char</span> carriageReturn = <span class="string">'\r'</span>; <span class="comment">//回车</span></span><br><span class="line">        <span class="keyword">char</span> newLine = <span class="string">'\n'</span>; <span class="comment">//换行</span></span><br><span class="line">        <span class="keyword">char</span> doubleQuote = <span class="string">'\"'</span>; <span class="comment">//双引号</span></span><br><span class="line">        <span class="keyword">char</span> singleQuote = <span class="string">'\''</span>; <span class="comment">//单引号</span></span><br><span class="line">        <span class="keyword">char</span> backslash = <span class="string">'\\'</span>; <span class="comment">//反斜杠</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><p><strong>规则</strong>:从小到大自动转,从大到小强制转.</p><p>强制转可能会造成数据<strong>溢出</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte b = 5;</span><br><span class="line">int i1 = 10;</span><br><span class="line">int i2 = 300;</span><br><span class="line">b = i1;//i1的值在byte的范围内,所以强转不会有数据损失.</span><br><span class="line">b = i2; //i2的值超出了byte的范围,编译器会提示错误,会损失数据.</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:</strong>虽然short和char都是16位的，长度是一样的 但是彼此之间，依然需要进行强制转换</p></blockquote><p>byte -&gt; short(char) -&gt; int -&gt; long -&gt; float -&gt; double</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><h4 id="命名规则-1"><a href="#命名规则-1" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li><p>变量命名只能使用<strong>字母 数字 $ _</strong></p></li><li><p>变量第一个字符 只能使用 字母 $ _</p></li><li><p>变量第一个字符 不能使用数字</p></li></ul><blockquote><p>注：_ 是下划线，不是-减号或者—— 破折号</p></blockquote><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a_12= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> $a43= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a434= <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//第一个是数字，是不行的</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">34</span>a= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="使用完整的单词命名-而非缩写"><a href="#使用完整的单词命名-而非缩写" class="headerlink" title="使用完整的单词命名,而非缩写"></a>使用完整的单词命名,而非缩写</h4><p>​    在命名的时候，尽量使用完整的单词进行命名，比如name,moveSpeed，而不是使用缩写 n,m,这样有助于理解.</p><h4 id="不能只使用关键字，但是可以包含关键字"><a href="#不能只使用关键字，但是可以包含关键字" class="headerlink" title="不能只使用关键字，但是可以包含关键字"></a>不能只使用关键字，但是可以包含关键字</h4><p>​    <strong>什么是关键词:</strong>比如int, short, class 这些单词已经被java 赋予了特殊的含义，这些就是关键字。</p><p>​    关键词不能直接用来作为变量名,但可以包含关键字,比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> class5 = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="中文也可以用来命名"><a href="#中文也可以用来命名" class="headerlink" title="中文也可以用来命名"></a>中文也可以用来命名</h4><p>但是……别用.</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>变量处于不同位置时,有不同的名称:</p><blockquote><p>字段,属性</p><p>参数</p><p>局部变量</p></blockquote><p>不同名称的变量,其作用有也有所不同.</p><h4 id="字段-属性-Field"><a href="#字段-属性-Field" class="headerlink" title="字段,属性,Field"></a>字段,属性,Field</h4><p>当一个变量被声明在类下面<br>变量就叫做<strong>字段</strong> 或者<strong>属性</strong>、<strong>成员变量</strong>、<strong>Field</strong><br>比如变量i,就是一个属性。<br>那么从第2行这个变量声明的位置开始，整个类都可以访问得到<br>所以其作用域就是从其声明的位置开始的整个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = i;  <span class="comment">//其他的属性可以访问i</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(i); <span class="comment">//方法1里可以访问i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(i); <span class="comment">//方法2里可以访问i</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>如果一个变量，是声明在一个方法上的，就叫做<strong>参数</strong><br>参数的作用域即为该方法内的所有代码<br>其他方法不能访问该参数<br>类里面也不能访问该参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; <span class="comment">//参数i的作用域即方法method1</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123; </span><br><span class="line">System.out.println(i); <span class="comment">//method2 不能访问参数i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = i;  <span class="comment">//类里面也不能访问参数i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>声明在方法内的变量，叫做<strong>局部变量</strong><br>其作用域在声明开始的位置，到其所处于的块结束位置</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p> 当一个变量被final修饰的时候，该变量<strong>只有一次赋值的机会</strong></p><p>final 除了修饰变量，还可以修饰类，修饰方法</p><p>也就是Java中的常量定义.</p><h4 id="在声明的时候赋值"><a href="#在声明的时候赋值" class="headerlink" title="在声明的时候赋值"></a>在声明的时候赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        i = <span class="number">10</span>; <span class="comment">//i在第4行已经被赋值过了，所以这里会出现编译错误    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在声明的时候没有赋值"><a href="#在声明的时候没有赋值" class="headerlink" title="在声明的时候没有赋值"></a>在声明的时候没有赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i;        </span><br><span class="line">        i = <span class="number">10</span>; <span class="comment">//i在第4行，只是被声明，但是没有被赋值，所以在这里可以进行第一次赋值       </span></span><br><span class="line">        i = <span class="number">11</span>; <span class="comment">//i在第6行已经被赋值过了，所以这里会出现编译错误         </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        j = <span class="number">5</span>; <span class="comment">//这个能否执行？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>答:不能执行<br>是语法错误，过不了编译。所以不能执行。<br>受final修饰的变量仅能被赋值一次。<br>public void method1(final int j)的代码块中，j（调用前仅可被赋值一次的int类型变量j）代表实际参数，已经赋值了。<br>而j=5;是赋值操作。存在语法错误。<br>与new没有关系。与是否调用也没有关系。</p></blockquote><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>以;结尾的的一段代码,即为一个表达式.</p><p>一个;也是一个表达式.</p><h3 id="块"><a href="#块" class="headerlink" title="块"></a>块</h3><p>从{开始 到对应的}结束,即一个块.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; <span class="comment">//类对应的块</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">//主方法对应的块</span></span><br><span class="line">        System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h4><ul><li><strong>装箱:</strong> 将基本类型用它们对应的引用类型包装起来;</li><li><strong>拆箱:</strong>将包装类型转换为基本数据类型;</li></ul><h4 id="成员变量和局部变量的区别有哪些"><a href="#成员变量和局部变量的区别有哪些" class="headerlink" title="成员变量和局部变量的区别有哪些?"></a>成员变量和局部变量的区别有哪些?</h4><ol><li>从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li>从变量在内存中的存储方式来看:如果成员变量是使用<code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用<code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ol><h4 id="关于final关键字的一些总结"><a href="#关于final关键字的一些总结" class="headerlink" title="关于final关键字的一些总结"></a>关于final关键字的一些总结</h4><p>final关键字主要用在三个地方:变量,方法,类.</p><ol><li><p>对于一个final变量,如果是基本数据类型的变量,则其数值一旦在初始化之后便不能更改;如果是引用类型的变量,则在对其初始化之后便不能再让其指向另一个对象.</p></li><li><p>当用final修饰一个类时,表明这个类不能被继承.final类中的所有成员方法都会被隐式地指定为final方法.</p></li><li><p>使用final方法的原因有两个</p><ol><li>把方法锁定,以防任何继承了修改它的含义;</li><li>效率.在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的Java版本已经不需要使用final方法进行这些优化了）。</li></ol><blockquote><p>类中所有的private方法都隐式地指定为final。</p></blockquote></li></ol><h4 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h4><p><strong>用处:</strong>解决浮点数计算精度丢失的问题.</p><blockquote><p>《阿里巴巴Java开发手册》中提到：<strong>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals 来判断。</strong></p></blockquote><p><strong>使用 BigDecimal 来定义浮点数的值，再进行浮点数的运算操作。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0"</span>);</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"0.9"</span>);</span><br><span class="line">BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"0.8"</span>);</span><br><span class="line">BigDecimal x = a.subtract(b);<span class="comment">// 0.1</span></span><br><span class="line">BigDecimal y = b.subtract(c);<span class="comment">// 0.1</span></span><br><span class="line">System.out.println(x.equals(y));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="BigDecimal的大小比较"><a href="#BigDecimal的大小比较" class="headerlink" title="BigDecimal的大小比较"></a>BigDecimal的大小比较</h5><p><code>a.compareTo(b)</code>:返回-1表示小于,0表示等于,1表示大于.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0"</span>);</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"0.9"</span>);</span><br><span class="line">System.out.println(a.compareTo(b));<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h5 id="BigDecimal保留几位小数"><a href="#BigDecimal保留几位小数" class="headerlink" title="BigDecimal保留几位小数"></a>BigDecimal保留几位小数</h5><p>通过<code>setScale</code>方法设置保留几位小数以及保留规则.保留规则有多种,不需要记忆,IDEA会提示.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal m = <span class="keyword">new</span> BigDecimal(<span class="string">"1.255433"</span>);</span><br><span class="line">BigDecimal n = m.setScale(<span class="number">3</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">System.out.println(n);<span class="comment">// 1.255</span></span><br></pre></td></tr></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h5><p><strong>注意：</strong>我们在使用BigDecimal时，为了防止精度丢失，推荐使用它的 <strong>BigDecimal(String)</strong> 构造方法来创建对象。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><p>BigDecimal 主要用来操作（大）浮点数，BigInteger 主要用来操作大整数（超过 long 类型）。</p><p>BigDecimal 的实现利用到了 BigInteger, 所不同的是 BigDecimal 加入了小数位的概念.</p><h4 id="关于final关键字的一些总结-1"><a href="#关于final关键字的一些总结-1" class="headerlink" title="关于final关键字的一些总结"></a>关于final关键字的一些总结</h4><p>Reference:《阿里巴巴Java开发手册》</p><ul><li>【强制】所有的 POJO 类属性必须使用包装数据类型。</li><li>【强制】RPC 方法的返回值和参数必须使用包装数据类型。</li><li>【推荐】所有的局部变量使用基本数据类型。</li></ul><p>比如我们如果自定义了一个Student类,其中有一个属性是成绩score,如果用Integer而不用int定义,一次考试,学生可能没考,值是null,也可能考了,但考了0分,值是0,这两个表达的状态明显不一样.</p><p><strong>说明</strong> :POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</p><p><strong>正例</strong> : 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p><p><strong>反例</strong> : 比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如:远程调用失败，异常退出。</p><blockquote><p><strong>备注:</strong>(真就啥也不知道啊)</p><p>简单的Java对象（Plain Ordinary Java Objects）实际就是普通JavaBeans,使用POJO名称是为了避免和EJB混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,有时可以作为value object或dto(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,<strong>但不允许有业务方法,也不能携带有connection之类的方法</strong>。</p><p>​    POJO是Plain Ordinary Java Objects的缩写不错，但是它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。</p><p>​    POJO有一些private的参数作为对象的属性。然后针对每个参数定义了get和set方法作为访问的接口。</p><p>POJO对象有时也被称为Data对象，大量应用于表现现实中的对象。</p><p><strong>RPC:</strong>RPC 即Remote Procedure Call 是一种进程间通信方式。 RPC的作用主要有三个方面：进程间通讯、提供和本地方法调用一样的调用机制、屏蔽程序员对远程调用的细节实现。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_java基础_面向对象</title>
      <link href="/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java%E5%9F%BA%E7%A1%80_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<center>javaの笔记<br>java是一门面向对象的编程语言<br>引入面向对象概念(但不深入讲解)</center><a id="more"></a><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>以LOL为例了解面向对象编程.</p><p>英雄有很多共通的属性,如血量,姓名等等.</p><p>所以我们可以定义一种东西代表”英雄”这种事物.</p><p>这种东西叫做类.</p><h4 id="如何定义一个类"><a href="#如何定义一个类" class="headerlink" title="如何定义一个类?"></a>如何定义一个类?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">String name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">float</span> hp;<span class="comment">//血量</span></span><br><span class="line"><span class="keyword">float</span> armor:<span class="comment">//护甲</span></span><br><span class="line"><span class="keyword">float</span> moveSpeed;<span class="comment">//移动速度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就定义好了一个类.</p><p>有了类,就像有了英雄模板,这样就可以创建一个具体的英雄了:</p><h4 id="如何定义一个具体的英雄"><a href="#如何定义一个具体的英雄" class="headerlink" title="如何定义一个具体的英雄:"></a>如何定义一个具体的英雄:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero();<span class="comment">//定义一个新英雄</span></span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        garen.hp = <span class="number">616.28f</span>;</span><br><span class="line">        garen.armor = <span class="number">27.536f</span>;</span><br><span class="line">        garen.moveSpeed = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">"提莫"</span>;</span><br><span class="line">        teemo.hp = <span class="number">383f</span>;</span><br><span class="line">        teemo.armor = <span class="number">14f</span>;</span><br><span class="line">        teemo.moveSpeed = <span class="number">330</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要定义一个具体的英雄,我们需要用定义好的类去创建一个叫做<strong>对象</strong>的东西.</p><blockquote><p><strong>注意:类的第一个字母大写</strong></p><p>这样可以让代码看上去更已读,容易维护.</p></blockquote><h2 id="Java类的属性"><a href="#Java类的属性" class="headerlink" title="Java类的属性"></a>Java类的属性</h2><p>在英雄类里声明的血量,护甲等等状态</p><p>这些状态就叫做类的<strong>属性</strong></p><h4 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h4><p>属性的类型可以是<strong>基本类型</strong>，比如int整数，float 浮点数<br>也可以是<strong>类类型</strong>，比如String 字符串</p><h4 id="属性名称"><a href="#属性名称" class="headerlink" title="属性名称"></a>属性名称</h4><p>属性名称一般来说，都是小写<br>比如name<br>如果有多个单词组成，后面的单词的第一个字母大写<br>比如 moveSpeed<br>属性也是变量，所以需要满足变量的命名规则</p><h3 id="Java类的方法"><a href="#Java类的方法" class="headerlink" title="Java类的方法"></a>Java类的方法</h3><h4 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法?"></a>什么是方法?</h4><p>方法就是函数,就像你在LOL中的一个移动,一个平A.</p><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">   String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//坑队友</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keng</span><span class="params">()</span></span>&#123;<span class="comment">//这就是一个方法</span></span><br><span class="line">        System.out.println(<span class="string">"坑队友！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h4><p>方法是一个类的动作行为，所以一般都是<strong>以动词开头</strong>的，比如 <strong>keng …</strong><br>如果有多个单词，后面的每个单词的第一个字母使用大写<br>比如 addSpeed</p><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="面向过程和面向对象的区别"><a href="#面向过程和面向对象的区别" class="headerlink" title="面向过程和面向对象的区别:"></a>面向过程和面向对象的区别:</h4><ul><li><p><strong>面向过程:效率高于面向对象.</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></p><blockquote><p>Java效率低的根本原因:并不是因为上述原因,根本原因在于Java是半编译语言,最终的执行代码并不是CPU可执行的二进制机器码.所以一些面向过程的语言也会出现不如Java的情况.</p></blockquote></li><li><p><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</p></li></ul><h4 id="Java面向对象编程的三大特点-封装-继承-多态"><a href="#Java面向对象编程的三大特点-封装-继承-多态" class="headerlink" title="Java面向对象编程的三大特点:封装 继承 多态"></a>Java面向对象编程的三大特点:封装 继承 多态</h4><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>封装是把一个对象的属性私有化,同是提供一些可也被外部访问的属性的方法,如果属性不想被外部访问,大可不必提供方法给外界.但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法.</li></ol><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：<strong>继承</strong>（多个子类对同一方法的重写）和<strong>接口</strong>（实现接口并覆盖接口中同一方法）。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记_Java基础_HelloWorld</title>
      <link href="/2019/07/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_HelloWorld/"/>
      <url>/2019/07/23/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_java_HelloWorld/</url>
      
        <content type="html"><![CDATA[<center>运行第一个程序HelloWorld</center><a id="more"></a><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><h4 id="首先看配置成功后的效果"><a href="#首先看配置成功后的效果" class="headerlink" title="首先看配置成功后的效果"></a>首先看配置成功后的效果</h4><p>点WIN键-&gt;运行（或者使用win+r)<br>输入cmd命令<br>输入java -version</p><blockquote><p> <strong>注：</strong> -version是小写，不能使用大写，java后面有一个空格</p></blockquote><p>配置成功后，会出现版本信息 <strong>java version “1.8.0_65”</strong></p><p><strong>注:</strong> <strong>这是配置完成后的效果</strong>，在配置完成之前是看不到这个效果的</p><p><img src="https://i.loli.net/2019/07/23/5d36e557153e219556.jpg" alt="QQ截图20190723184341.jpg"></p><h4 id="下载安装JDK"><a href="#下载安装JDK" class="headerlink" title="下载安装JDK"></a>下载安装JDK</h4><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p>右键我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统变量</p><blockquote><p><strong>注意</strong>：是下面的<strong>系统变量</strong>，不是上面的用户变量  </p></blockquote><p> 新建变量名** JAVA_HOME<strong>，变量值 **E:\JDK</strong><br> 修改变量 Path ，在最前面加上 <strong>%JAVA_HOME%\bin;</strong></p><blockquote><p><strong>注意</strong>：”Path”是<strong>首字母大写</strong>，<strong>不要改成”PATH”</strong> bin后面要有<strong>分号</strong>;<strong>注意</strong>：系统变量上面的用户变量里，不要有这两个，如果有应该去掉，以避免被干扰。<br><strong>注意</strong>：Win10 下PATH的配置有所不同，按照下个步骤配置即可</p></blockquote><h4 id="WIN10下环境变量Path的配置"><a href="#WIN10下环境变量Path的配置" class="headerlink" title="WIN10下环境变量Path的配置"></a>WIN10下环境变量Path的配置</h4><p>右键我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统变量</p><p>新建一个环境变量,内容和上面一样</p><p>然后,放在最上面,即可</p><h4 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h4><p>点击确认关闭刚才的配置页面，这一步一定要做，否则刚才的配置不能生效</p><p>点WIN键-&gt;运行（或者使用win+r)<br>输入cmd命令<br>输入java -version<br>如果出现版本信息，表明配置成功<br>如果失败了，调整前面的配置，然后要<strong>重新启动cmd命令</strong>，而不是在原有的cmd里面输入 java -version  </p><h3 id="命令行运行HelloWorld"><a href="#命令行运行HelloWorld" class="headerlink" title="命令行运行HelloWorld"></a>命令行运行HelloWorld</h3><p><strong>创建第一个java源文件</strong></p><p>虽然一般都用编译器来写,但是,还是有必要了解一下命令行执行java.</p><p>创建第一个java 源文件<br>在屏幕空白位置，点击鼠标右键-&gt;新建-&gt;文本文件 得到一个文件”新建 文本文档.txt“<br>右键该文件-&gt;重命名为 HelloWorld.java<br>在该文件中敲入如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;<span class="comment">//表示类的名字是HelloWorld</span></span><br><span class="line"><span class="comment">//这是主方法，所有代码的入口,如果你学过c语言 ，相当于 _main 程序入口</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);表示在控制台（黑屏幕）**输出一个字符串**“hello world”</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为java 是<strong>面向对象</strong>的编程语言，所以我们实际上是在<strong>创建一个个的类</strong></p><p><strong>显示扩展名</strong></p><p>有时候系统会默认把扩展名隐藏掉，可以通过如下方式显示扩展名，以便于把.txt修改为.java<br>打开我的电脑-&gt; F10显示菜单栏-&gt;工具-&gt;文件夹选项-&gt;查看-&gt; 去掉 <strong>隐藏已知文件类型的扩展名</strong> 上的勾选</p><p><strong>编译</strong></p><p>.java 文件是java的源文件，但是<strong>不能直接运行</strong>，必须先被编译成为.class文件 才能够执行<br>java 使用 javac命令进行编译</p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac filename.java</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong>必须跟上.java 后缀名</p></blockquote><p> 执行如下命令：<br> 运行 win+r,输入 cmd 进入控制台界面<br> e: 切换盘符为e盘(这里选你的java文件所在的盘)<br> cd e:\project\j2se\src 切换目录到源文件目录<br> javac HelloWorld.java 编译命令 javac 文件名大小写必须一致<br> <strong>如果得到一行空白，就表示成功了</strong>，并且得到一个class文件： HelloWorld.class<br> <strong>注：</strong> 第一行切换盘符的<strong>e:</strong>不要忘记了</p><p><strong>运行</strong><br>java的运行命令:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java classname</span><br></pre></td></tr></table></figure><p>运行 win+r,输入 cmd 进入<strong>控制台界面</strong></p><p><strong>e: 切换盘符为e盘</strong><br><strong>cd e:\project\j2se\src 切换目录到源文件目录***java HelloWorld</strong><br>注意大小写需要一致，并且<strong>没有后缀名.class</strong><br>运行成功后会看到字符串 “hello world”</p><p><strong>关于类</strong></p><p>java所有的代码都是运行在类里面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br></pre></td></tr></table></figure><p><strong>public</strong> 表示这是一个可以公开访问的类</p><p> <strong>class</strong>表示这是一个类</p><p><strong>HelloWorld</strong>表示类的名字，每个单词的首字母大写</p><p><strong>主方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>你会写很多代码，总有第一行执行的代码，这就是主方法<br><strong>args</strong> 表示运行参数，在本例中没有使用到。</p><p><strong>控制台输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><p>会在控制台输出字符串<br><strong>println</strong> 表示打印数据到控制台，并且换行</p><h3 id="Eclipse快捷键"><a href="#Eclipse快捷键" class="headerlink" title="Eclipse快捷键"></a>Eclipse快捷键</h3><p><strong>批量修改</strong><br>ALT+SHIFT+R</p><p><strong>快速输入主方法</strong></p><ol><li><p>敲入main </p></li><li><p>alt+/</p></li></ol><p><strong>快速输入System.out.println</strong></p><ol><li><p>敲入syso </p></li><li><p>alt+/</p></li></ol><p><strong>快速输入for</strong></p><ol><li><p>敲入for </p></li><li><p>alt+/</p></li></ol><p><strong>查看java源代码</strong><br>JDK里提供的类，比如String,Integer,System都是开源的，免费提供其源代码<br>可以很简便的通过eclipse就查看源码</p><ol><li><p>先选中想要查看的方法，比如System.out.println()的 println</p></li><li><p>敲键F3</p></li></ol><p><strong>代码格式化</strong><br>ctrl+shift+f<br><strong>注意：</strong> 这个快捷键和搜狗输入法的切换简繁冲突。 所以最好把搜狗的切换简繁取消掉。</p><p><strong>快速助手</strong><br>ctrl+shift+o<br>import 类<br>去掉未使用的类 等等都可以使用</p><p><strong>快速注释</strong><br>选中一行或者多行代码 ctrl+shift+c</p><p><strong>大小写转换</strong><br>ctrl+shift+x 选中的转换为大写<br>ctrl+shift+y 选中的转换为小写</p><p><strong>快速解决办法提示</strong><br>在出错误的行，使用ctrl+1。 比如忘记导入类了，就可以用这个解决</p><p><strong>toString getter setter 构造方法的快速生成</strong></p><ol><li>通过菜单-&gt; Source 就可以看到快速生成的选项</li><li>直接使用快捷键 shift+alt+s也可以弹出这个选项</li></ol><h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><h4 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点:"></a>Java语言的特点:</h4><ol><li>简单易学(雾)</li><li>面向对象(封装,继承,多态)</li><li>平台无关性(Java虚拟机实现)</li><li>可靠性</li><li>安全性</li><li>支持多线程(C++没有内置的多线程,需要调用操作系统的多线程来进行多线程程序设计)</li><li>支持网络编程并且很方便(Java 语言诞生本身就是为简化网络编程设计的)</li><li>编译与解释并存</li></ol><h3 id="Java和C-的区别"><a href="#Java和C-的区别" class="headerlink" title="Java和C++的区别"></a>Java和C++的区别</h3><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li></ul>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> java </tag>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora食用指南</title>
      <link href="/2019/07/23/Typora%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97_%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/23/Typora%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97_%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<center>之前写markdow一直在用vsc<br>但是由于神奇的问题解决不掉<br>我弃坑了!<br>就这么干脆!<br>听说这个不错<br>学着用用<br>markdown里有的这里就不写了</center><a id="more"></a><p><strong>这里是下载地址~</strong></p><p><a href="https://www.typora.io/#download" target="_blank" rel="noopener">https://www.typora.io/#download</a></p><p><strong><em>开始</em></strong></p><p>神说:天大地大,快捷键最大.</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>加粗： <code>Ctrl/Cmd + B</code></li><li>标题： <code>Ctrl/Cmd + H</code></li><li>插入链接： <code>Ctrl/Cmd + K</code></li><li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li><li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li><li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li><li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li><li>撤销： <code>Ctrl/Cmd + Z</code></li><li>一级标题：快捷键为Crtl + 1，以此类推</li></ul><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p>在markdown中，段落由多个空格分隔。在Typora中，只需回车即可创建新段落。</p><h4 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h4><blockquote><p># 一级标题， 快捷键为Crtl + 1<br>## 二级标题，快捷键为Crtl + 2<br>###### 六级标题，快捷键为Crtl + 6</p></blockquote><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>输入<code>| 表头1 | 表头2 |</code>并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下：</p><table><thead><tr><th align="left">First Header</th><th align="left">Second Header</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td></tr></tbody></table><hr><h4 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h4><p>Typora支持<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="noopener">YAML Front Matter</a>， 在文章开头输入<code>---</code>，然后按回车即可。</p><h4 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h4><p>输入<code>[toc]</code>然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><h3 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h3><p>跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。</p><p><a href="https://www.simon96.online/2018/10/18/Typora入门（中文版）/" target="_blank" rel="noopener">https://www.simon96.online/2018/10/18/Typora入门（中文版）/</a>)</p><hr><p><strong>总结:</strong></p><ol><li>建议打开大纲视图（快捷键ctrl + shift + 1）。</li><li>插入表格需要顶格写，不然显示不出来。</li><li>以上语法不用刻意记，在Typora中的右键菜单都有， 常用功能基本上都有快捷键。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Typora食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typora </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度云编程资源(过期无补)</title>
      <link href="/2019/07/18/%E7%99%BE%E5%BA%A6%E4%BA%91_%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90(%E8%BF%87%E6%9C%9F%E6%97%A0%E8%A1%A5)/"/>
      <url>/2019/07/18/%E7%99%BE%E5%BA%A6%E4%BA%91_%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BC%96%E7%A8%8B%E8%B5%84%E6%BA%90(%E8%BF%87%E6%9C%9F%E6%97%A0%E8%A1%A5)/</url>
      
        <content type="html"><![CDATA[<center><p>喵~<br><br>发一些学习的资源,需要自提,过期无补<br><br>我只是个么的感情的搬运工<br><br>不包邮<br><br>就是这样</p></center><a id="more"></a><p><strong>进入大数据 Spark SQL 的世界</strong></p><p>链接：<a href="https://pan.baidu.com/s/1_AINgCN8KaQEbnJRkWnKdw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_AINgCN8KaQEbnJRkWnKdw</a> </p><p>提取码：7j85</p><p><strong>Java深入微服务原理改造房产销售平台</strong></p><p>链接：<a href="https://pan.baidu.com/s/1O7VE9AOB8AKaYYp0d1HOrw" target="_blank" rel="noopener">https://pan.baidu.com/s/1O7VE9AOB8AKaYYp0d1HOrw</a> </p><p>提取码：2f9i </p><p><strong>表白神器链接：</strong></p><p><a href="https://pan.baidu.com/s/1EXK0BYqX-gXuhZGOWWB8zg" target="_blank" rel="noopener">https://pan.baidu.com/s/1EXK0BYqX-gXuhZGOWWB8zg</a></p><p> 密码：m3ih</p><p><strong>超实用前端资料链接</strong>：</p><p><a href="https://pan.baidu.com/s/1dzMNAgTWpmCDezHptpg_ig" target="_blank" rel="noopener">https://pan.baidu.com/s/1dzMNAgTWpmCDezHptpg_ig</a>  </p><p>提取码：7hcj </p><p><strong>JS设计模式全解链接</strong>：</p><p><a href="https://pan.baidu.com/s/1G4jMHzWmVG_AioqN7I0rFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1G4jMHzWmVG_AioqN7I0rFQ</a> </p><p>提取码：uti9 </p><p><strong>疑难问题解决方案链接：</strong></p><p><a href="https://pan.baidu.com/s/1cHivqaloYo0l4UL6ZHEP2w" target="_blank" rel="noopener">https://pan.baidu.com/s/1cHivqaloYo0l4UL6ZHEP2w</a> </p><p>提取码：2lof</p><p><strong>玩转算法</strong></p><p>链接：<a href="https://pan.baidu.com/s/1gTGwVegBWmMntr7TJZMbyw" target="_blank" rel="noopener">https://pan.baidu.com/s/1gTGwVegBWmMntr7TJZMbyw</a> </p><p>提取码：pywv </p><p><strong>大数据视频和资料：</strong>       </p><p>链接: <a href="https://pan.baidu.com/s/1bqUXYKf" target="_blank" rel="noopener">https://pan.baidu.com/s/1bqUXYKf</a> </p><p>密码: k38w</p><p><strong>React Native项目实战</strong></p><p>链接：<a href="https://pan.baidu.com/s/15-hC110OoVTQOiBczsb_WA" target="_blank" rel="noopener">https://pan.baidu.com/s/15-hC110OoVTQOiBczsb_WA</a> </p><p>提取码：8mk7 </p><p><strong>React 贯穿全栈开发APP</strong></p><p>链接：<a href="https://pan.baidu.com/s/1JgcdhfguEvYhlVFsgkzIEA" target="_blank" rel="noopener">https://pan.baidu.com/s/1JgcdhfguEvYhlVFsgkzIEA</a> </p><p>提取码：a3yf</p><p><strong>Java并发编程</strong></p><p>链接：<a href="https://pan.baidu.com/s/1VKAN7wTnpKo7PN3QXywa5A" target="_blank" rel="noopener">https://pan.baidu.com/s/1VKAN7wTnpKo7PN3QXywa5A</a> </p><p>提取码：hznr </p><p><strong>前端视频和资料：</strong></p><p> 链接: <a href="https://pan.baidu.com/s/1gfjxHL5" target="_blank" rel="noopener">https://pan.baidu.com/s/1gfjxHL5</a> </p><p>密码: hjua</p><p><strong>Python高级编程技巧</strong></p><p>链接：<a href="https://pan.baidu.com/s/1adz1uuxBOdelVeXAN0SC5g" target="_blank" rel="noopener">https://pan.baidu.com/s/1adz1uuxBOdelVeXAN0SC5g</a> </p><p>提取码：evxr </p><p><strong>bootstrap视频和资料：</strong>     </p><p>链接：<a href="https://pan.baidu.com/s/1luqC5W0GBsqBfgRG2LuOMQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1luqC5W0GBsqBfgRG2LuOMQ</a> </p><p>密码：48w3</p><p><strong>面试经验指导链接：</strong></p><p><a href="https://pan.baidu.com/s/1DSDLCWW5T_PQ8zsf5LMkCQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1DSDLCWW5T_PQ8zsf5LMkCQ</a> </p><p>提取码：r7qv </p><p><strong>基础入门安卓</strong></p><p>链接：<a href="https://pan.baidu.com/s/1VcuZ8im8p5lDSw1izaQBIw" target="_blank" rel="noopener">https://pan.baidu.com/s/1VcuZ8im8p5lDSw1izaQBIw</a> </p><p>提取码：a38m </p><p><strong>第一套软件测试教程</strong></p><p>链接：<a href="https://pan.baidu.com/s/1igq6HbJYK_11eG1XiSoIBQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1igq6HbJYK_11eG1XiSoIBQ</a> </p><p>提取码：7d6b  </p><p><strong>软件测试指导</strong></p><p>链接：<a href="https://pan.baidu.com/s/1uqSzKXVuAgg8JET0aoN3Nw" target="_blank" rel="noopener">https://pan.baidu.com/s/1uqSzKXVuAgg8JET0aoN3Nw</a> </p><p>提取码：t1qo</p><p><strong>高级架构师进阶</strong></p><p>链接：<a href="https://pan.baidu.com/s/19r5i1FdXW6glSy2ZQ71eFA" target="_blank" rel="noopener">https://pan.baidu.com/s/19r5i1FdXW6glSy2ZQ71eFA</a> </p><p>提取码：czb4 </p><p><strong>python视频和资料</strong>：                          </p><p>链接: <a href="https://pan.baidu.com/s/1jJQaagA" target="_blank" rel="noopener">https://pan.baidu.com/s/1jJQaagA</a> </p><p>密码: e1gm</p><p><strong>Java开发人工智能远程监控</strong></p><p>链接：<a href="https://pan.baidu.com/s/1x2uzAHscTLf8t-G_3LrXLw" target="_blank" rel="noopener">https://pan.baidu.com/s/1x2uzAHscTLf8t-G_3LrXLw</a> </p><p>提取码：b0hn</p><p><strong>SSH个人理财系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1-BybATsIfRR4TU7Z-PlAaQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1-BybATsIfRR4TU7Z-PlAaQ</a> </p><p>提取码：5a99</p><p><strong>Python全套（内有爬虫）</strong></p><p>链接：<a href="https://pan.baidu.com/s/1GdOxS1nqNv2t33C6dS6tmA" target="_blank" rel="noopener">https://pan.baidu.com/s/1GdOxS1nqNv2t33C6dS6tmA</a> </p><p>提取码：g19z </p><p><strong>CMR系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1NfKOLfudJqbE-gTd8SUuzQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1NfKOLfudJqbE-gTd8SUuzQ</a> </p><p>提取码：fjq3 </p><p><strong>Spring源码解析</strong></p><p>链接：<a href="https://pan.baidu.com/s/1zOHWBUyVsLfn4NGmN6etvw" target="_blank" rel="noopener">https://pan.baidu.com/s/1zOHWBUyVsLfn4NGmN6etvw</a> </p><p>提取码：i8gd </p><p><strong>Hadoop视频和资料：</strong>        </p><p> 链接：<a href="https://pan.baidu.com/s/1wjhXxD3-ZuoRHv0tRLsP8w" target="_blank" rel="noopener">https://pan.baidu.com/s/1wjhXxD3-ZuoRHv0tRLsP8w</a> </p><p>密码：y075</p><p><strong>软件方法论</strong></p><p>链接：<a href="https://pan.baidu.com/s/1JcqLQS4jIDNHwcZ8rlv95g" target="_blank" rel="noopener">https://pan.baidu.com/s/1JcqLQS4jIDNHwcZ8rlv95g</a> </p><p>提取码：9p8h</p><p><strong>基于Spring团购项目链接：</strong></p><p><a href="https://pan.baidu.com/s/12oqsuKtR46etIWYs2KpH8A" target="_blank" rel="noopener">https://pan.baidu.com/s/12oqsuKtR46etIWYs2KpH8A</a> </p><p>提取码：8yzq</p><p><strong>Linux指导</strong></p><p>链接：<a href="https://pan.baidu.com/s/1RfFQWLu_VmkSYHp4Aj2RVg" target="_blank" rel="noopener">https://pan.baidu.com/s/1RfFQWLu_VmkSYHp4Aj2RVg</a> </p><p>提取码：9t8i</p><p><strong>JavaEE实战</strong></p><p>链接：<a href="https://pan.baidu.com/s/1Fk8JM8gzNBamvbxLnJ-2ow" target="_blank" rel="noopener">https://pan.baidu.com/s/1Fk8JM8gzNBamvbxLnJ-2ow</a> </p><p>提取码：semf </p><p><strong>mysql视频和资料：</strong>             </p><p>链接：<a href="https://pan.baidu.com/s/14EoVSlWFwAEzsa8-XC61-A" target="_blank" rel="noopener">https://pan.baidu.com/s/14EoVSlWFwAEzsa8-XC61-A</a> </p><p>密码：6cde</p><p><strong>宅急送项目</strong></p><p>链接：<a href="https://pan.baidu.com/s/1UQbC8H0B5QqOimfOq2W2Kg" target="_blank" rel="noopener">https://pan.baidu.com/s/1UQbC8H0B5QqOimfOq2W2Kg</a> </p><p>提取码：oz3h</p><p><strong>Java开发二维码</strong></p><p>链接：<a href="https://pan.baidu.com/s/1MeERyivNIJOaFznLUATEBA" target="_blank" rel="noopener">https://pan.baidu.com/s/1MeERyivNIJOaFznLUATEBA</a> </p><p>提取码：yd6d</p><p><strong>开发云盘</strong></p><p>链接：<a href="https://pan.baidu.com/s/1yq5BbW-Hu19XCYyxnJZHHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1yq5BbW-Hu19XCYyxnJZHHg</a> </p><p>提取码：di81 </p><p><strong>Java开发音频播放器</strong></p><p>链接：<a href="https://pan.baidu.com/s/1LD4WajbwkGajDRmYAdqX7A" target="_blank" rel="noopener">https://pan.baidu.com/s/1LD4WajbwkGajDRmYAdqX7A</a> </p><p>提取码：lxx5</p><p><strong>高并发程序设计</strong></p><p>链接：<a href="https://pan.baidu.com/s/1HpWceif04YiUVd_LvQCFiA" target="_blank" rel="noopener">https://pan.baidu.com/s/1HpWceif04YiUVd_LvQCFiA</a> </p><p>提取码：bj3u</p><p><strong>银行项目</strong></p><p>链接：<a href="https://pan.baidu.com/s/1KpEv23uOf0lPtFe_p3nenQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1KpEv23uOf0lPtFe_p3nenQ</a> </p><p>提取码：8z5i </p><p><strong>数据分析视频和资料：</strong>       </p><p> 链接：<a href="https://pan.baidu.com/s/19t389HP0bx2RJdK6GlTQOA" target="_blank" rel="noopener">https://pan.baidu.com/s/19t389HP0bx2RJdK6GlTQOA</a> </p><p>密码：gezo</p><p><strong>高并发商城</strong></p><p>链接：<a href="https://pan.baidu.com/s/1_TBNzl3uBxIFYfwzPZEPrw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_TBNzl3uBxIFYfwzPZEPrw</a> </p><p>提取码：6cmm</p><p><strong>自动化测试Selenium</strong></p><p>链接：<a href="https://pan.baidu.com/s/1gW2FcR5mcgguVg4w05S2vQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gW2FcR5mcgguVg4w05S2vQ</a> </p><p>提取码：ksxo </p><p><strong>让你的页面性能飞起来</strong></p><p>链接：<a href="https://pan.baidu.com/s/1Lx4mhEK3bygVGWzjMequCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1Lx4mhEK3bygVGWzjMequCg</a> </p><p>提取码：1w12</p><p><strong>Netty开发聊天系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1IbkUVZ82HvRZLFfoP0eYlQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1IbkUVZ82HvRZLFfoP0eYlQ</a> </p><p>提取码：lbno</p><p><strong>报名系统</strong></p><p>链接：<a href="https://pan.baidu.com/s/1m1L4shEaGHi_aaRuwHlUeQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1m1L4shEaGHi_aaRuwHlUeQ</a> </p><p>提取码：36o3 </p><p><strong>go语言视频和资料：</strong>         </p><p>链接：<a href="https://pan.baidu.com/s/1bIqDCXld1oHxHTqfhx6Acw" target="_blank" rel="noopener">https://pan.baidu.com/s/1bIqDCXld1oHxHTqfhx6Acw</a> </p><p>密码：xp6v</p><p><strong>手机端开发视频和资料：</strong>      </p><p>链接：<a href="https://pan.baidu.com/s/1z8Q2bZ_ZYzLbjIHRqVjrvQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1z8Q2bZ_ZYzLbjIHRqVjrvQ</a> </p><p>密码：1xgt</p><p><strong>scale视频和资料：</strong>  </p><p>链接：<a href="https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ</a> </p><p>密码：euql</p><p><strong>微服务气象实战：</strong></p><p>链接：<a href="https://pan.baidu.com/s/1A-9DPRPK7D3d2KcocZwRig" target="_blank" rel="noopener">https://pan.baidu.com/s/1A-9DPRPK7D3d2KcocZwRig</a> </p><p>提取码：qz2f </p><p><strong>spark视频和资料：</strong>    </p><p>链接：<a href="https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1IOX-gjWJtWam3XYZk9l6BQ</a> </p><p>密码：euql</p><p><strong>响应式一招开发制胜</strong></p><p>链接：<a href="https://pan.baidu.com/s/1yLxWwW2Ql0fo0R-p8mt_qw" target="_blank" rel="noopener">https://pan.baidu.com/s/1yLxWwW2Ql0fo0R-p8mt_qw</a> </p><p>提取码：r52v </p><p><strong>vue.js高仿饿了么</strong></p><p>链接：<a href="https://pan.baidu.com/s/1uqBpqttmP_jCZoao57Gz9g" target="_blank" rel="noopener">https://pan.baidu.com/s/1uqBpqttmP_jCZoao57Gz9g</a> </p><p>提取码：km8w</p><p><strong>大型SpringMVC，Mybatis，Redis，Solr，Nginx，SSM分布式电商项目视频教程</strong></p><p>链接：<a href="https://pan.baidu.com/s/1m71jc-K-0xfJ3zC6Au_byQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1m71jc-K-0xfJ3zC6Au_byQ</a> </p><p>提取码：tjpx </p><p><strong>Spring Cloud</strong></p><p>链接：<a href="https://pan.baidu.com/s/1EkZwDVcqLY8OZ42NxHEuPA" target="_blank" rel="noopener">https://pan.baidu.com/s/1EkZwDVcqLY8OZ42NxHEuPA</a> </p><p>提取码：18nj</p><p><strong>第一套前端全套视频和源码：</strong>       </p><p>链接：<a href="https://pan.baidu.com/s/1-eTjKfe1Ozge0YccblhY4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1-eTjKfe1Ozge0YccblhY4w</a> </p><p>密码：eyxs</p><p><strong>第二套前端全套视频和源码：</strong>           </p><p>链接：<a href="https://pan.baidu.com/s/1e6OC7fBWWQuzU6sGDj0Spw" target="_blank" rel="noopener">https://pan.baidu.com/s/1e6OC7fBWWQuzU6sGDj0Spw</a> </p><p>密码：p8qm</p><p><strong>第三套前端全套视频和源码：</strong>      </p><p>链接：<a href="https://pan.baidu.com/s/1rd6gB64fS17ylqi3A9IA-w" target="_blank" rel="noopener">https://pan.baidu.com/s/1rd6gB64fS17ylqi3A9IA-w</a> </p><p>密码：egy5</p><p><strong>PHP全套第一套视频和资料：</strong>    </p><p>链接：<a href="https://pan.baidu.com/s/13DCQxHpLos6VcB6gY5LZSw" target="_blank" rel="noopener">https://pan.baidu.com/s/13DCQxHpLos6VcB6gY5LZSw</a> </p><p>密码：tmqq</p><p><strong>PHP全套第二套视频和资料：</strong>             </p><p>链接：<a href="https://pan.baidu.com/s/18GF5u8Z4PploD2lYFgs_Ww" target="_blank" rel="noopener">https://pan.baidu.com/s/18GF5u8Z4PploD2lYFgs_Ww</a> </p><p>密码：l84u</p><p><strong>京东手机端制作视频和源码</strong>：             </p><p>链接：<a href="https://pan.baidu.com/s/1GcCgnuYoZoOUadA8IpiywA" target="_blank" rel="noopener">https://pan.baidu.com/s/1GcCgnuYoZoOUadA8IpiywA</a> </p><p>密码：o7z9</p><p><strong>基于Laravel，AngularJS全栈开发知乎</strong></p><p>链接：<a href="https://pan.baidu.com/s/1MKwxwY6GmHJIdT2d3s_F2Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1MKwxwY6GmHJIdT2d3s_F2Q</a> </p><p>提取码：uvv7 </p><p><strong>强力django+杀手级xadmin 打造上线标准的在线教育平台</strong></p><p>链接：<a href="https://pan.baidu.com/s/1enDpWa6jmRh5FR5cMvTFJQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1enDpWa6jmRh5FR5cMvTFJQ</a> </p><p>提取码：bfwy </p><p><strong>前端 Vue+Node+MongoDB高级全栈开发</strong></p><p>链接：<a href="https://pan.baidu.com/s/1EpuXIb7kpVc_7VrstTMWRg" target="_blank" rel="noopener">https://pan.baidu.com/s/1EpuXIb7kpVc_7VrstTMWRg</a> </p><p>提取码：8vcp </p><p><strong>电商秒杀活动视频和源码</strong>               </p><p>链接：<a href="https://pan.baidu.com/s/1RHHV8SOC7Q9BnPRTSVWYNg" target="_blank" rel="noopener">https://pan.baidu.com/s/1RHHV8SOC7Q9BnPRTSVWYNg</a> </p><p>密码：ze4h</p><p><strong>Nginx</strong></p><p>链接：<a href="https://pan.baidu.com/s/1fRjIbk-rsL0HBo1WWaM-OQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1fRjIbk-rsL0HBo1WWaM-OQ</a> </p><p>提取码：5z3a </p><p><strong>前端到后台ThinkPHP开发整站</strong></p><p>链接：<a href="https://pan.baidu.com/s/1FZa8O03NLEOdSeqqb_HgEw" target="_blank" rel="noopener">https://pan.baidu.com/s/1FZa8O03NLEOdSeqqb_HgEw</a> </p><p>提取码：3km2</p><p><strong>快速上手Linux 玩转典型应用</strong></p><p>链接：<a href="https://pan.baidu.com/s/1dPZA47vku2eYQY_PhfCOtg" target="_blank" rel="noopener">https://pan.baidu.com/s/1dPZA47vku2eYQY_PhfCOtg</a> </p><p>提取码：2rdm</p><p><strong>Vue核心技术 vue实战精讲</strong></p><p> 链接：<a href="https://pan.baidu.com/s/1sHStCWy4XJWflft6H_qAKA" target="_blank" rel="noopener">https://pan.baidu.com/s/1sHStCWy4XJWflft6H_qAKA</a> </p><p>提取码：0ybr </p><p><strong>天猫商城购物车实战视频资料：</strong> </p><p>链接：<a href="https://pan.baidu.com/s/1UxtMqsszcAKpZ_2a41raSQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1UxtMqsszcAKpZ_2a41raSQ</a> </p><p>密码：c1rd</p><p><strong>移动端混合APP视频和资料：</strong>             </p><p>链接：<a href="https://pan.baidu.com/s/1bwDYjR8UMk5pgpvPcxWBfA" target="_blank" rel="noopener">https://pan.baidu.com/s/1bwDYjR8UMk5pgpvPcxWBfA</a> </p><p>密码：tkyj</p><p><strong>未知：</strong><br>链接：<a href="https://pan.baidu.com/s/1YqRWtnWJZAFNNCf_Z2SLtA" target="_blank" rel="noopener">https://pan.baidu.com/s/1YqRWtnWJZAFNNCf_Z2SLtA</a> 密码：ccj9<br>链接：<a href="https://pan.baidu.com/s/1I-OJSE-VXbX9dm8aN0QP4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1I-OJSE-VXbX9dm8aN0QP4w</a> 密码：o1vv<br>链接：<a href="https://pan.baidu.com/s/1VFJ7TTwApFUZsQQnogjr-A" target="_blank" rel="noopener">https://pan.baidu.com/s/1VFJ7TTwApFUZsQQnogjr-A</a> 密码：phtf<br>链接：<a href="https://pan.baidu.com/s/14ysuXBUbIw0LLgGoZanclA" target="_blank" rel="noopener">https://pan.baidu.com/s/14ysuXBUbIw0LLgGoZanclA</a> 密码：ar4v<br>链接：<a href="https://pan.baidu.com/s/1H4nUEtw3-WKVN78b6TuklA" target="_blank" rel="noopener">https://pan.baidu.com/s/1H4nUEtw3-WKVN78b6TuklA</a> 密码：87gc<br>链接：<a href="https://pan.baidu.com/s/1ZpLoacAYhk4v8_PzyGzxIg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZpLoacAYhk4v8_PzyGzxIg</a> 密码：yzsb<br>链接：<a href="https://pan.baidu.com/s/1t3DjD7Fa7Vv66wyTND2ddQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1t3DjD7Fa7Vv66wyTND2ddQ</a> 密码：3q1o<br>链接：<a href="https://pan.baidu.com/s/1_qXE5PpkEA3h2BX9dz64Bw" target="_blank" rel="noopener">https://pan.baidu.com/s/1_qXE5PpkEA3h2BX9dz64Bw</a> 密码：jat1<br>链接：<a href="https://pan.baidu.com/s/1JGv7l0dZzq2F9uX7Pr-1kQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1JGv7l0dZzq2F9uX7Pr-1kQ</a> 密码：or26<br>链接：<a href="https://pan.baidu.com/s/18cZZ22va495qjlAAU4jFzA" target="_blank" rel="noopener">https://pan.baidu.com/s/18cZZ22va495qjlAAU4jFzA</a> 密码：w6ri<br>链接：<a href="https://pan.baidu.com/s/1TfV2dfrLnUAYlCVG8ppOlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1TfV2dfrLnUAYlCVG8ppOlA</a> 密码：hpz8<br>链接：<a href="https://pan.baidu.com/s/1nHpOCPTinMDOhi07YFRR4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1nHpOCPTinMDOhi07YFRR4w</a> 密码：xrz0<br>链接：<a href="https://pan.baidu.com/s/1i4xffBJjF-dwFC-QhrZA0g" target="_blank" rel="noopener">https://pan.baidu.com/s/1i4xffBJjF-dwFC-QhrZA0g</a> 密码：mwtw<br>链接：<a href="https://pan.baidu.com/s/1m0EmptzKd7WDpYQ_i5fa4Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1m0EmptzKd7WDpYQ_i5fa4Q</a> 密码：yukp<br>链接：<a href="https://pan.baidu.com/s/1VkFTRv4DfKShN4VrlZyxdA" target="_blank" rel="noopener">https://pan.baidu.com/s/1VkFTRv4DfKShN4VrlZyxdA</a> 密码：runc<br>链接：<a href="https://pan.baidu.com/s/1qKyQEzRABYDXAOK7Mx8XDQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1qKyQEzRABYDXAOK7Mx8XDQ</a> 密码：evf5<br>链接：<a href="https://pan.baidu.com/s/1Ya2NhTvoSNWthhCAvHUnSw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Ya2NhTvoSNWthhCAvHUnSw</a> 密码：82od<br>链接：<a href="https://pan.baidu.com/s/1SgZnAA_OhOZEjlB4Tr5GRA" target="_blank" rel="noopener">https://pan.baidu.com/s/1SgZnAA_OhOZEjlB4Tr5GRA</a> 密码：lbng<br>链接：<a href="https://pan.baidu.com/s/1G1CX_GerVYMYWI3y7bbJRQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1G1CX_GerVYMYWI3y7bbJRQ</a> 密码：yvbn<br>链接：<a href="https://pan.baidu.com/s/1o67q1933TIv0oX3p1_-D9g" target="_blank" rel="noopener">https://pan.baidu.com/s/1o67q1933TIv0oX3p1_-D9g</a> 密码：j5sp<br>链接：<a href="https://pan.baidu.com/s/1iQD04fXlCqrSG1Ezna_iqg" target="_blank" rel="noopener">https://pan.baidu.com/s/1iQD04fXlCqrSG1Ezna_iqg</a> 密码：fjtv<br>链接：<a href="https://pan.baidu.com/s/1Nwau0LZyWxAWp6Yqmsz0fw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Nwau0LZyWxAWp6Yqmsz0fw</a> 密码：pw1l<br>链接：<a href="https://pan.baidu.com/s/1bpJwXzysEgiOfLmULBMBOQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1bpJwXzysEgiOfLmULBMBOQ</a> 密码：vm11<br>链接：<a href="https://pan.baidu.com/s/1YBoNDKUmmRg-ycTMKxeMNg" target="_blank" rel="noopener">https://pan.baidu.com/s/1YBoNDKUmmRg-ycTMKxeMNg</a> 密码：kr6t<br>链接：<a href="https://pan.baidu.com/s/1-LO1aDSdC0Kxy0c7ZNU_Bg" target="_blank" rel="noopener">https://pan.baidu.com/s/1-LO1aDSdC0Kxy0c7ZNU_Bg</a> 密码：2wlf<br>链接：<a href="https://pan.baidu.com/s/1tjmhDwGAn3Mdsof0Iu-efA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tjmhDwGAn3Mdsof0Iu-efA</a> 密码：k3sx<br>链接：<a href="https://pan.baidu.com/s/1n3DuWFFIyyRzGI2RxR7jsw" target="_blank" rel="noopener">https://pan.baidu.com/s/1n3DuWFFIyyRzGI2RxR7jsw</a> 密码：q8zt<br>链接：<a href="https://pan.baidu.com/s/12b_V2LxoBoEP7EWK4Kc_Ew" target="_blank" rel="noopener">https://pan.baidu.com/s/12b_V2LxoBoEP7EWK4Kc_Ew</a> 密码：20sd<br>链接：<a href="https://pan.baidu.com/s/1xGTxVPr-tijhyZPup54Euw" target="_blank" rel="noopener">https://pan.baidu.com/s/1xGTxVPr-tijhyZPup54Euw</a> 密码：4em4<br>链接：<a href="https://pan.baidu.com/s/1Xr3S8Q4DKPoYQkNaW6oOuA" target="_blank" rel="noopener">https://pan.baidu.com/s/1Xr3S8Q4DKPoYQkNaW6oOuA</a> 密码：aw9z<br>链接：<a href="https://pan.baidu.com/s/1ilvozGK8oB_-j5bhlvcB7w" target="_blank" rel="noopener">https://pan.baidu.com/s/1ilvozGK8oB_-j5bhlvcB7w</a> 密码：l4v2<br>链接：<a href="https://pan.baidu.com/s/1uBY0ym-8jrNTn9ues_a-aw" target="_blank" rel="noopener">https://pan.baidu.com/s/1uBY0ym-8jrNTn9ues_a-aw</a> 密码：lbpc<br>链接：<a href="https://pan.baidu.com/s/1wCNWOG-xaLb1yAvsIdK5Og" target="_blank" rel="noopener">https://pan.baidu.com/s/1wCNWOG-xaLb1yAvsIdK5Og</a> 密码：3ayb<br>链接：<a href="https://pan.baidu.com/s/1tZdSrIIYH4bnZrMBOBqGHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1tZdSrIIYH4bnZrMBOBqGHg</a> 密码：0su2</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 资源 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(七)_报错填坑</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%83)_%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%83)_%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<center>我走过坑.....不,是黑洞.</center><a id="more"></a><h1 id="报错填坑"><a href="#报错填坑" class="headerlink" title="报错填坑"></a>报错填坑</h1><h2 id="出现-hexo-g-d-报错"><a href="#出现-hexo-g-d-报错" class="headerlink" title="出现 hexo g -d 报错"></a>出现 hexo g -d 报错</h2><p>在将博客推送到Github上的时候在git bash 下运行hexo g -d命令出现错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> fatal: HttpRequestException encountered.</span><br><span class="line">   ▒▒▒▒▒▒▒▒ʱ▒▒▒▒</span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/do                                                                     </span><br><span class="line">cs/troubleshooting.html</span><br><span class="line">Error: fatal: HttpRequestException encountered.</span><br><span class="line">           ʱ   </span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (F:\blog\huahua462.github.io\node_modules\hexo-u                                                                    </span><br><span class="line"> til\lib\spawn.js:37:17)</span><br><span class="line">    at emitTwo (events.js:126:13)</span><br><span class="line">    at ChildProcess.emit (events.js:214:7)</span><br><span class="line">    at ChildProcess.cp.emit (F:\blog\huahua462.github.io\node_modules\cross-spaw                                                                     </span><br><span class="line">n\lib\enoent.js:40:29)</span><br><span class="line">    at maybeClose (internal/child_process.js:925:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:209:5)</span><br></pre></td></tr></table></figure><p>解决方案:<br>&emsp;首先在“你GitHub注册用户名.github.io”本地文件夹下有一个名为“_config.yml”的配置文件，这个称为站点配置文件，使用NotePad++打开并拉到文件最后，将：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: https://github.com/你GitHub注册用户名/你GitHub注册用户名.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: git@github.com:你GitHub注册用户名/你GitHub注册用户名.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>即可；</p><hr><h2 id="出现-error-deployer-not-found-git-或者-error-deployer-not-found-github-的错误"><a href="#出现-error-deployer-not-found-git-或者-error-deployer-not-found-github-的错误" class="headerlink" title="出现 error deployer not found:git 或者 error deployer not found:github 的错误"></a>出现 error deployer not found:git 或者 error deployer not found:github 的错误</h2><p>解决办法：执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr><h2 id="出现类似-FATAL-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-70-column-1-…-错误"><a href="#出现类似-FATAL-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-70-column-1-…-错误" class="headerlink" title="出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误"></a>出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误</h2><p> 解决办法：_config.yml中配置项的冒号后面要用空格隔开，再跟内容</p><hr><h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><p>解决办法：将文件的内容编码改为UTF8格式</p><hr><h2 id="‘hexo-sever’能够成功运行，但是localhost-4000无法访问"><a href="#‘hexo-sever’能够成功运行，但是localhost-4000无法访问" class="headerlink" title="‘hexo sever’能够成功运行，但是localhost:4000无法访问"></a>‘hexo sever’能够成功运行，但是localhost:4000无法访问</h2><p>解决办法：执行hexo s -p 5000，改用其他端口启动</p><hr>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(六)_网站配置</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%85%AD)_%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%85%AD)_%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<center>给网站起个名儿吧!</center><a id="more"></a># 配一下相关信息* 网站配置文件的存储位置：hexo_blog/_config.yml。* 配置文件中，冒号后面一定要加空格。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"># 网站信息</span><br><span class="line">#标题</span><br><span class="line">title: 但行好事,莫问前程.</span><br><span class="line">#副标题</span><br><span class="line">subtitle: 记录学习的技能和遇到的问题</span><br><span class="line">#网站描述</span><br><span class="line">description: 上课睡觉觉的个人博客</span><br><span class="line">#作者昵称</span><br><span class="line">author: 上课睡觉觉</span><br><span class="line">#网站语言，默认英语，设置简体汉语</span><br><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line">#时区，默认电脑时区</span><br><span class="line">#timezone: </span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 网址设置</span><br><span class="line">#如果网站是放在子目录中，将url设置成&apos;http://yoursite.com/child&apos;，将root设置成&apos;/child/&apos;</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">#网址</span><br><span class="line">url: http://yoursite.com</span><br><span class="line">#网站根目录。如果网站是放在子目录中，将root设置成&apos;子目录名&apos;</span><br><span class="line">root: /</span><br><span class="line">#文章链接地址格式 。即文章存放的目录。</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 目录设置</span><br><span class="line">#资源文件夹，放在里面的文件会上传到github中</span><br><span class="line">source_dir: source</span><br><span class="line">#公共文件夹，存放生成的静态文件</span><br><span class="line">public_dir: public</span><br><span class="line">#标签文件夹，默认是tags。实际存放在source/tags中。</span><br><span class="line">tag_dir: tags</span><br><span class="line">rss_dir: rss</span><br><span class="line">#档案文件夹，默认是archives。</span><br><span class="line">archive_dir: archives</span><br><span class="line">#分类文件夹，默认是categories。实际存放在source/categories中。</span><br><span class="line">category_dir: categories</span><br><span class="line">#代码文件夹，默认是downloads/code</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">#国际化文件夹，默认跟language相同</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">#不需要渲染的文件夹或文件夹,放在[]中</span><br><span class="line"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span><br><span class="line">skip_render: [baidu_verify_R9MZjdMkXT.html, google0f8fac7da2b48ef8.html, README.md, 模板.md]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写作选项</span><br><span class="line"># 新建博文（帖子）的默认名称</span><br><span class="line"># File name of new posts</span><br><span class="line">new_post_name: :title.md </span><br><span class="line">#默认布局模板是post，而不是draft和page</span><br><span class="line">default_layout: post</span><br><span class="line">#是否将标题转换成标题形式（首字母大写）</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">#在新标签页面中打开网页</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">#是否渲染草稿</span><br><span class="line">render_drafts: false</span><br><span class="line">#启动 Asset 文件夹</span><br><span class="line">post_asset_folder: false</span><br><span class="line">#把链接改为与根目录的相对位址</span><br><span class="line">relative_link: false</span><br><span class="line">#显示未来的文章</span><br><span class="line">future: true</span><br><span class="line">#代码块的设置</span><br><span class="line">highlight:</span><br><span class="line">  enable: true          #  使用代码高亮</span><br><span class="line">  line_number: true # 显示行号</span><br><span class="line">  auto_detect: true  # 自动检测语言</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分类和标签</span><br><span class="line"># 默认分类</span><br><span class="line">default_category: uncategorized</span><br><span class="line">#分类别名</span><br><span class="line">category_map:</span><br><span class="line">#标签别名</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 日期和时间格式</span><br><span class="line">#Hexo 使用 Moment.js 来解析和显示时间。</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分页配置</span><br><span class="line"># ---------------下面选项需要对应插件的支持---------------</span><br><span class="line"># npm install hexo-generator-index --save</span><br><span class="line"># npm install hexo-generator-archive --save</span><br><span class="line"># npm install hexo-generator-category --save</span><br><span class="line"># npm install hexo-generator-tag --save</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">#每页显示的文章量 </span><br><span class="line">#per_page: 20</span><br><span class="line">#首页的分页设置</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line">#归档页的分页设置</span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 30</span><br><span class="line">  yearly: true</span><br><span class="line">  monthly: true</span><br><span class="line">#标签页的分页设置</span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line"></span><br><span class="line">#分页路径，在public中可以看到</span><br><span class="line">#pagination_dir: page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Extensions 拓展插件配置</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">plugins: </span><br><span class="line">baidusitemap: </span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置RSS</span><br><span class="line">feed: </span><br><span class="line">  #feed 类型 (atom/rss2)</span><br><span class="line">  type: atom   </span><br><span class="line">  #rss 路径</span><br><span class="line">  path: atom.xml  </span><br><span class="line">  #在 rss 中最多生成的文章数(0显示所有)</span><br><span class="line">  limit: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自定义站点内容搜索</span><br><span class="line"># 需要先安装插件：</span><br><span class="line"># npm install hexo-generator-search --save</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  # 如只想索引文章，可设置为post</span><br><span class="line">  field: all </span><br><span class="line"></span><br><span class="line"># 主题配置</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">#theme: false #禁用主题</span><br><span class="line">#theme: landscape</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 部署配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #repo: https://github.com/xuezhisd/xuezhisd.github.io.git</span><br><span class="line">  repo: </span><br><span class="line">    # 部署到github</span><br><span class="line">    github: git@github.com:xuezhisd/xuezhisd.github.io.git,master</span><br><span class="line">    # 部署到coding.net。取消注释，可同时部署</span><br><span class="line">    #coding: git@git.coding.net:xuezhisd/blog.git,coding-pages</span><br><span class="line">  #type: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>主题的配置文件<br>默认主题是landscape<br>hexo官方主题页面。从中选择喜欢的主题，下载并放到themes文件中。<br>我使用的主题是NexT。</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(五)_nexT美化</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%94)_nexT%E7%BE%8E%E5%8C%96/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%94)_nexT%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<center>我也要美美的博客!!!!</center><a id="more"></a><h1 id="next美化"><a href="#next美化" class="headerlink" title="next美化"></a>next美化</h1><h2 id="HexoNext主题如何设置社交侧边栏"><a href="#HexoNext主题如何设置社交侧边栏" class="headerlink" title="HexoNext主题如何设置社交侧边栏"></a>HexoNext主题如何设置社交侧边栏</h2><p>首先在主题配置文件_config.yml里找到social</p><p>一开始，social和下面的那些东西都是有#号的，想启用哪个就启用哪个，</p><p>|| 后面的就是在图标库里对应的图标名</p><p>以前我一设置侧边栏图标网站就崩溃不能上了，有一个主要的原因：</p><p>&emsp;<strong>social前面的#号必须去掉，注意，是social！！！</strong>  </p><p>至于那些yourname就是你在哪个社交软件的名称，也可以加上去别的社交账号.</p><h2 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h2><p>在 themes/*/source/css/_custom/custom.styl 中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background:url(/images/bg.jpg);</span><br><span class="line">    background-size:cover;</span><br><span class="line">    background-repeat:no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h2><p>打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.site-meta &#123;</span><br><span class="line">  background: $blue; //修改为自己喜欢的颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h2><p>在/themes/*/source/js/src下新建文件click.js，接着把以下粘贴到clicklove.js文件中。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>在\themes*\layout_layout.swig文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h2><p>选择样式<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>,</p><p>修改图片跳转链接,将&lt;a href=”<a href="https://github.com/you&quot;&gt;中的链接换为自己Github链接：" target="_blank" rel="noopener">https://github.com/you&quot;&gt;中的链接换为自己Github链接：</a></p><p>打开 themes/next/layout/_layout.swig 文件，把代码复制到<div class="headband"></div>下面。</p><h2 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h2><p>打开 themes/*/source/css/_custom/custom.styl ,向里面加代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 0px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>修改themes/*/_config.yml，把 false 改为 true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入到 hexo 的根目录，在 package.json 中添加依赖: “hexo-tag-cloud”: “2.0.*” 操作如下：</p><p>使用命令行进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-cloud@^2.0.* --save</span><br></pre></td></tr></table></figure><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>插件的配置需要对应的环境，可以在主题文件夹里找一下，有没有对应的渲染文件，然后根据渲染文件的类型，选择对应的插件配置方法。</p><p>swig 用户 (Next主题在列)<br>在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">    &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如图:<br><img src="https://i.loli.net/2019/06/06/5cf884209152a85270.png" alt="QQ图片20190606111000.png"></p><p>对于ejs的用户 (默认主题landscape在列)<br>在主题文件夹找到文件hexo/themes/landscape/layout/_widget/tagcloud.ejs,将这个文件修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (site.tags.length) &#123; %&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">        &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">            &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">                &lt;%- tagcloud() %&gt;</span><br><span class="line">            &lt;/canvas&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>在博客根目录，找到 _config.yml配置文件然后在最后添加如下的配置项，可以自定义标签云的字体和颜色，还有突出高亮:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># hexo-tag-cloud</span><br><span class="line">tag_cloud:</span><br><span class="line">    textFont: Trebuchet MS, Helvetica</span><br><span class="line">    textColor: &apos;#333&apos;</span><br><span class="line">    textHeight: 25</span><br><span class="line">    outlineColor: &apos;#E2E1D1&apos;</span><br><span class="line">    maxSpeed: 0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(四)_优化</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%9B%9B)_%E4%BC%98%E5%8C%96/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E5%9B%9B)_%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<center><p>博客不好看…..怎么办怎么办?</p></center><a id="more"></a><h1 id="hexo优化"><a href="#hexo优化" class="headerlink" title="hexo优化"></a>hexo优化</h1><h2 id="文章的置顶功能的实现"><a href="#文章的置顶功能的实现" class="headerlink" title="文章的置顶功能的实现"></a>文章的置顶功能的实现</h2><h3 id="实现置顶"><a href="#实现置顶" class="headerlink" title="实现置顶"></a>实现置顶</h3><p>用以下命令安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章：</p><pre><code>---  title: hexo+GitHub博客搭建实战  date: 2017-09-08 12:00:25categories: 博客搭建系列top: true---</code></pre><p>到目前为止，置顶功能已经可以实现了。</p><p>不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？</p><h3 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h3><p>打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class=”post-meta”&gt;标签下，插入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p><p>这里我们可以通过在文章使用<!-- more -->标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。<br><strong>强烈推荐</strong>使用该<!-- more -->标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p><h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>打开 themes/*/layout/_partials/head.swig文件,在 之前插入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">            if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">                alert(&apos;密码错误&apos;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>写文章时加上password: *：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h2><p>在站点目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure><p>安装gulp插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 站点下新建 gulpfile.js文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line"></span><br><span class="line">//Plugins模块获取</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">//压缩css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function () &#123;</span><br><span class="line">return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">.pipe(minifycss())</span><br><span class="line">.pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">//压缩html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function () &#123;</span><br><span class="line">return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">.pipe(htmlclean())</span><br><span class="line">.pipe(htmlmin(&#123;</span><br><span class="line">removeComments: true,</span><br><span class="line">minifyJS: true,</span><br><span class="line">minifyCSS: true,</span><br><span class="line">minifyURLs: true,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">.pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">//压缩js 不压缩min.js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function () &#123;</span><br><span class="line">return gulp.src([&apos;./public/**/*.js&apos;, &apos;!./public/**/*.min.js&apos;])</span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//4.0以前的写法 </span><br><span class="line">//gulp.task(&apos;default&apos;, [</span><br><span class="line">  //  &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;</span><br><span class="line">//]);</span><br><span class="line">//4.0以后的写法</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, function() &#123;</span><br><span class="line">  // Do something after a, b, and c are finished.</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>好像有点问题，不过不影响使用</p><h2 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h2><p>在终端窗口下，定位到 Hexo 站点目录下，新建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;站点目录&gt;  </span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/java_1996/article/details/86499625" target="_blank" rel="noopener">https://blog.csdn.net/java_1996/article/details/86499625</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(三)_本地博客的转移</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%89)_%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BD%AC%E7%A7%BB/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%89)_%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BD%AC%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<center>C盘放不下怎么办.....QAQ</center><a id="more"></a># 本地博客的转移<p>怎么转移本地的博客呢?</p><h2 id="1-赋值配置文件"><a href="#1-赋值配置文件" class="headerlink" title="1.赋值配置文件"></a>1.赋值配置文件</h2><p>将原来的配置文件进行备份，只需要将文件夹 source、themes和配置文件_config.yml备份即可。</p><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h2><p>&emsp;这个……</p><p>&emsp;&emsp;百度一下,你就知道</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="4-新建文件夹，cd进入"><a href="#4-新建文件夹，cd进入" class="headerlink" title="4. 新建文件夹，cd进入"></a>4. 新建文件夹，cd进入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>使用hexo s查看是否能使用</p><h2 id="5-将备份的文件覆盖到现在的文件夹"><a href="#5-将备份的文件覆盖到现在的文件夹" class="headerlink" title="5. 将备份的文件覆盖到现在的文件夹"></a>5. 将备份的文件覆盖到现在的文件夹</h2><p>现在使用hexo s查看是否已经成功。</p><p>此时，所有工作已经完成。</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(二)_分类和标签</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%8C)_%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%BA%8C)_%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<center><p>看完”markdown食用指南”(也可能没看),不知道各位会不会写博文了呢? </p><p>有人说,我写了好多但是该怎么分类呢?  </p><p>接下来我就写写如何分类和贴标签~</p></center><a id="more"></a><br><br># 分类和标签<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="创建”分类”选项"><a href="#创建”分类”选项" class="headerlink" title="创建”分类”选项"></a>创建”分类”选项</h3><h4 id="生成“分类”页并添加tpye属性"><a href="#生成“分类”页并添加tpye属性" class="headerlink" title="生成“分类”页并添加tpye属性"></a>生成“分类”页并添加tpye属性</h4><p>打开命令行，进入<strong>博客</strong>(之前提到的blog)所在文件夹。执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>成果后会提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “categories”到内容中，添加后是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: hexo食用指南表示添加这篇文章到“hexo食用指南”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- hexo食用指南”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- hexo食用指南”下的 “-xxx ”分类）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo食用指南(二)</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- hexo食用指南</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h3><h4 id="生成“标签”页并添加tpye属性"><a href="#生成“标签”页并添加tpye属性" class="headerlink" title="生成“标签”页并添加tpye属性"></a>生成“标签”页并添加tpye属性</h4><p>打开命令行，进入<strong>博客</strong>(之前提到的blog)所在文件夹。执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>成果后会提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加type: “tags”到内容中，添加后是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。<br>下方的tags:  </p><ul><li>hexo</li><li>教程<br>就是这篇文章的标签了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo食用指南(二)</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- hexo食用指南</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- 教程 </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown食用指南</title>
      <link href="/2019/06/05/markdown_markdown%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/06/05/markdown_markdown%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<center><p>看完”hexo食用指南(一)”的朋友一定满头问号.</p><p>.md文件是个什么鬼东西?怎么打开?怎么写?</p><p>本片就教大家怎么写.md文件</p><p>(PS:会写的就可跳过这篇啦!)</p></center><a id="more"></a><h1 id="Markdown的今世前生以及食用指南"><a href="#Markdown的今世前生以及食用指南" class="headerlink" title="Markdown的今世前生以及食用指南"></a>Markdown的今世前生以及食用指南</h1><h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown?"></a>什么是Markdown?</h2><p>Markdwon 是一种轻量级 标记语言，它以纯文本形式（易读、易写、易更改）编写文档，并最终以HTLM格式发布。Markdown也可以理解为将以 MARKDOWN语法编写的语言转换成HTML内容的工具。</p><p>Emmmm,好官方</p><p>简单的来说就是,操作简单的word!(大概可以这么理解吧~)</p><hr><h2 id="那它有什么优缺点呢"><a href="#那它有什么优缺点呢" class="headerlink" title="那它有什么优缺点呢?"></a>那它有什么优缺点呢?</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.它是易读（看起来舒服😌）、易写（语法简单）、易更改（纯文本）。处处体现着极简主义的影子。</p><p>2.兼容HTML,可以转换为HTML格式发布。</p><p>3.跨平台使用。</p><p>4.越来越多的网站支持Markdown.</p><p>5.更方便清晰的组织你的电子邮件。（Markdown-here,Airmail）。</p><p>6.摆脱Word,txt！！！</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1、需要记一些语法（当然，是很简单。五分钟学会）。</p><p>2、有些平台不支持Markdown编辑模式。</p><hr><h2 id="那么Markdown是谁创造的呢"><a href="#那么Markdown是谁创造的呢" class="headerlink" title="那么Markdown是谁创造的呢?"></a>那么Markdown是谁创造的呢?</h2><p>它是由 <em>Aaron Swartz</em> 和 <em>John Gruber</em> 共同设计的.</p><p><em>Aaron Swartz</em> 就是那位（2013年1月11日）自杀，有着开挂一般人生经历的程序员。</p><p>维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。</p><p>他有着足以让你跪拜的人生经历:</p><pre><code>14岁参与RSS 1.0规格标准制订。2004年入读斯坦福大学，之后退学。2005年创建 Infogami,之后与Reddit合并成为其合伙人。2010年创立示进会（Demand Preogress）,积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。2011年7月19日,因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。2013年1月自杀身亡。</code></pre><p>(膜拜前辈,可惜…)</p><hr><p><strong>书归正传</strong></p><h2 id="接下来我们讲讲Markdown的规则"><a href="#接下来我们讲讲Markdown的规则" class="headerlink" title="接下来我们讲讲Markdown的规则:"></a>接下来我们讲讲Markdown的规则:</h2><hr><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>markdown以#来设置标题,并且支持6级标题,#与标题之间用空格隔开,如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>写好之后就是这个样子:</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>要加粗的文字左右分别用两个*号包起来,如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><p>结果:<br><strong>加粗</strong></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>要倾斜的文字左右分别用一个*号包起来,如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*倾斜*</span><br></pre></td></tr></table></figure><p>结果:<em>倾斜</em></p><h4 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h4><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***斜体加粗***</span><br></pre></td></tr></table></figure><p>结果:<strong><em>斜体加粗</em></strong></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>要加删除线的文字左右分别用两个~~号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~斜体加粗~~</span><br></pre></td></tr></table></figure><p>结果:<del>斜体加粗</del></p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…</p><p>貌似可以一直加下去，但没神马卵用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>显示出来:</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>Emmmmm,层层叠叠</p><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个或者三个以上的 - 或者 * 都可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>这是分割线:</p><hr><hr><hr><hr><p>————–我是区别分割线的分割线—————————————————–</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>显示出来……有点大<br><img src="/image/headPic.png" alt="图片" title="看什么看,讨厌(ノω&lt;。)ノ))☆.。"></p><hr><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.bilibili.com&gt;</span><br></pre></td></tr></table></figure><p>效果:</p><p><a href="http://www.bilibili.com" target="_blank" rel="noopener">http://www.bilibili.com</a></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>举个栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度一下](http://www.baidu.com)</span><br></pre></td></tr></table></figure><p>效果:</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度一下</a></p><hr><h3 id="超链列表"><a href="#超链列表" class="headerlink" title="超链列表"></a>超链列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下:</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下:</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p><strong>上一级和下一级之间敲三个空格即可</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">   * 二级无序列表内容</span><br><span class="line">*一级无序列表内容</span><br><span class="line">   1. 二级有序列表内容</span><br><span class="line">   2. 二级有序列表内容</span><br><span class="line">   3. 二级有序列表内容</span><br></pre></td></tr></table></figure><p>效果如下:</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">-|:-:|-:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">-|:-:|-:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下:</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><blockquote><p><strong>注:表格和正文之间要空两行,否则表格会显示异常</strong></p></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>语法：</p><h4 id="单行代码："><a href="#单行代码：" class="headerlink" title="单行代码："></a>单行代码：</h4><p>代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`单行代码`</span><br></pre></td></tr></table></figure><p>效果:</p><p><code>单行代码</code></p><h4 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h4><p>代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">     function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br><span class="line">    没有括号</span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">        echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">   fun();</span><br></pre></td></tr></table></figure><hr><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>这是个坑,虽然markdown本身支持流程图,但是hexo好像并不愿意,所以我们需要先安装一个插件</p><p><code>npm install --save hexo-filter-flowchart</code></p><p>安装好之后就可以食用了!</p><p>首先我们需要了解一些基础的东西:</p><p><strong>操作模块语法:</strong></p><table><thead><tr><th align="center">操作模块</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">start</td><td align="center">开始</td></tr><tr><td align="center">end</td><td align="center">结束</td></tr><tr><td align="center">opration</td><td align="center">普通操作块</td></tr><tr><td align="center">condition</td><td align="center">判断块</td></tr><tr><td align="center">subroutine</td><td align="center">子任务块</td></tr><tr><td align="center">inputoutput</td><td align="center">输入输出块</td></tr></tbody></table><p><strong>判断和位置控制</strong></p><p><strong>流程控制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p>-&gt; 作为控制流程的操作符，就是指向下一步要操作的。</p><p>每一条都算是一条流程</p><p>你也可以断开写，怎么方便怎么来，如：下面两个是一样的。</p><p>分着写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;op1</span><br><span class="line">op1-&gt;e</span><br></pre></td></tr></table></figure><p>合着写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st-&gt;op1-&gt;e</span><br></pre></td></tr></table></figure><p><strong>判断</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond(yes)-&gt;io-&gt;e</span><br></pre></td></tr></table></figure><p>yes的时候到io，再到e</p><p><strong>位置指定</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><p>no的时候到到 sub1，再从sub1的右侧到op1<br>还可以这样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond1(no,right)</span><br></pre></td></tr></table></figure><p><strong>框架</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;flow</span><br><span class="line">    内容</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">注:为了显示```换成&apos;&apos;&apos;,用的时候换回去</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;flow</span><br><span class="line">//定义部分</span><br><span class="line">st 是变量名， start 是指操作模块名，冒号后面就是内容了。需要注意的是，冒号后要加空格才能识别</span><br><span class="line"></span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>效果:</p><div id="flowchart-0" class="flow-chart"></div><hr><h3 id="假如你还会HTML"><a href="#假如你还会HTML" class="headerlink" title="假如你还会HTML"></a>假如你还会HTML</h3><p>markdown支持内嵌html代码,你可以通过html代码来修饰你的文章~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;居中&lt;/center&gt;  </span><br><span class="line"></span><br><span class="line">没有空格  </span><br><span class="line">&amp;ensp;半角空格  </span><br><span class="line">&amp;ensp;&amp;ensp;半角空格两个  </span><br><span class="line">&amp;emsp;全角空格  </span><br><span class="line">&amp;emsp;&amp;emsp;全角空格两个，以后就是用这个做为缩进</span><br><span class="line">&lt;/br&gt;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;华文行楷&quot;&gt;华文行楷&lt;/font&gt;  </span><br><span class="line">&lt;center&gt;&lt;font face=&quot;华文行楷&quot;&gt;华文行楷居中&lt;/font&gt;&lt;/center&gt;  </span><br><span class="line">&lt;font Size=1&gt;我是几号字来着1&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果:</p><center>居中</center>  <p>没有空格<br>&ensp;半角空格<br>&ensp;&ensp;半角空格两个<br>&emsp;全角空格<br>&emsp;&emsp;全角空格两个，以后就是用这个做为缩进<br><br></p><p><font face="黑体">我是华文彩云</font></p><p><font color="#0099ff" size="3" face="黑体">color=#0099ff size=72 face=”黑体”</font></p><center><font face="华文行楷">华文行楷居中</font></center>  <font size="1">我是几号字来着1</font>  <hr><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>方法1: 连续两个以上空格+回车<br>方法2：使用html语言换行标签：</p><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p>1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p><h4 id="锚点-不能用"><a href="#锚点-不能用" class="headerlink" title="锚点(不能用)"></a>锚点(不能用)</h4><p>锚点其实就是页内超链接。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。<br>语法说明： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">目录&#123;#index&#125;</span><br><span class="line"></span><br><span class="line">在你准备跳转到的指定标题后插入锚点&#123;#标记&#125;，然后在文档的其它地方写上连接到锚点的链接。</span><br><span class="line"></span><br><span class="line">跳转到[目录](#index)</span><br><span class="line"></span><br><span class="line">由于&#123;#是保留字段,所以不能用</span><br></pre></td></tr></table></figure><h4 id="注脚-不能用"><a href="#注脚-不能用" class="headerlink" title="注脚(不能用)"></a>注脚(不能用)</h4><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文章作者[^1]</span><br><span class="line">[^1]:上课睡觉觉</span><br></pre></td></tr></table></figure><h4 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h4><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。<br>举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;背景色是：orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">//定义部分st 是变量名， start 是指操作模块名，冒号后面就是内容了。需要注意的是，冒号后要加空格才能识别st=>start: 开始e=>end: 结束op=>operation: 我的操作cond=>condition: 确认？st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> markdown食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> markdown </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo食用指南(一)_新建文章</title>
      <link href="/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%80)_%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/2019/06/05/hexo%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97(%E4%B8%80)_%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<center>怎么写一个博客</center><a id="more"></a><h1 id="怎么写第一篇博客"><a href="#怎么写第一篇博客" class="headerlink" title="怎么写第一篇博客?"></a>怎么写第一篇博客?</h1><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>在你的blog文件夹下运行命令行窗口(在文件夹下shift+鼠标右键yi可以找到啦!)</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"文章名称"</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">"文章名称"</span></span><br></pre></td></tr></table></figure><p>这样你的第一篇文章就创建好了!</p><hr><h3 id="在哪儿看呢"><a href="#在哪儿看呢" class="headerlink" title="在哪儿看呢~"></a>在哪儿看呢~</h3><p>打开blog目录下的<em>source</em>文件夹下的<em>_posts</em>就可以看到了!</p><p>博客文章是以<em>md</em>结尾的文件,即markdown文本</p><p>以后在这个目录下创建.md文件就可以了</p><p>打开你会发现这样的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo食用指南</span><br><span class="line">date: 2019-06-05 10:25:13</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>第一行是你的文章名</p><p>第二行创建时间</p><p>这就是你的博文啦,开始你的创作吧!</p><p>(建议接下来去看”markdown使用指南”)</p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/06/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/06/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<center><p>   首先感谢<strong>CodeSheep</strong>大佬录制的教程</p><p>   这个教程帮我几乎零基础搭建好了一个简单的博客,十分感谢</p></center>   <a id="more"></a><h1 id="怎么搭建一个hexo博客"><a href="#怎么搭建一个hexo博客" class="headerlink" title="怎么搭建一个hexo博客"></a>怎么搭建一个hexo博客</h1><p>   这里我就不写文字教程了~</p><p>   大佬的教程在参考文献里~</p><p>   在评论区有很多大佬写的文字教程,还有好看的博课,可以去看看</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">www.bilibili.com/video/av44544186</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo食用指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100天从新手到大师_函数和模块</title>
      <link href="/2019/01/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_%E5%87%BD%E6%95%B0/"/>
      <url>/2019/01/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<center>   函数和模块的使用</center><a id="more"></a><h2 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><h4 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h4><ul><li>减少代码中<strong>最坏的味道</strong>–重复代码.</li></ul><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><ul><li><p>用<code>def</code>来定义函数</p></li><li><p>命名规则和变量一致</p></li><li><p>函数名后面的圆括号中可以放置传递给函数的参数</p></li><li><p>函数执行完成之后可以通过<code>return</code>返回一个值.</p><p>举个栗子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def functionModel(value)&#123;</span><br><span class="line">    ......</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><ul><li><p>在python中,函数与其他语言不同,其中不同的地方在于<strong>:python函数的参数可以有默认值,也支持使用可变的参数.</strong>所以python并不需要像其他语言一样支持函数的重载,如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">a</span>+<span class="title">b</span>+<span class="title">c</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">#一个参数,没有传参的值用默认值进行计算</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#两个参数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#三个参数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#传参时也可以不按顺序传,如</span></span><br><span class="line">add(c=<span class="number">100</span>,a=<span class="number">80</span>,b=<span class="number">70</span>)</span><br></pre></td></tr></table></figure><p>如果参数数量上限不固定咋整?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不定参add方法</span></span><br><span class="line"><span class="comment">#在参数名前面的*表示args为一个可变参数</span></span><br><span class="line">def add(*args)&#123;</span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> args:</span><br><span class="line">    total +=val</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h4><p>由于python没有重载这一概念,所以会有函数,变量的命名冲突问题,即定义两个同名元素后者会覆盖前者,也就意味着两个函数同名的话,实际只有一个是存在的.</p><p>如何解决?</p><p>答案就是用模块管理函数:Python中的每一个文件就代表一个模块(module),我们在不同的模块中可以有同名的函数,在使用函数的时候,<strong>通过<code>import</code>关键字导入指定的模块</strong>就可以区分到底是要使用哪个模块中的函数了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># goodbye.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"goodbye world"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> world</span><br><span class="line"><span class="comment"># 输出 hello world</span></span><br><span class="line">world()</span><br><span class="line"><span class="comment"># 输出 goodbye world</span></span><br><span class="line">world()</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">as</span> hello</span><br><span class="line"><span class="keyword">import</span> goodbye <span class="keyword">as</span> goodbye</span><br><span class="line">hello.world()</span><br><span class="line">goodbye.world()</span><br></pre></td></tr></table></figure><p>但不能写成:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> world</span><br><span class="line"><span class="keyword">from</span> goodbye <span class="keyword">import</span> world</span><br><span class="line"><span class="comment">#这样会输出goodbye world,因为第二次引用覆盖了第一次引用</span></span><br><span class="line">world()</span><br></pre></td></tr></table></figure><blockquote><p>需要说明<strong>:如果我们导入的模块除了定义函数之外还有可以执行代码,那么Python解释器在导入这个模块时就会执行这些代码</strong>.所以在编写时,<strong>最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是”<strong>main</strong>“。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># module3.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span><br><span class="line"><span class="comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'call foo()'</span>)</span><br><span class="line">    foo()</span><br><span class="line">    print(<span class="string">'call bar()'</span>)</span><br><span class="line">    bar()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module3</span><br><span class="line"><span class="comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100天从新手到大师_基础</title>
      <link href="/2019/01/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/01/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<center>   变量,运算符,循环,判断......</center><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><ul><li><p>Python中可以处理任意大小的整数.</p><blockquote><p>Python2.x中有<code>int</code>和<code>long</code>两种类型的整数.但是这种区分对Python来说意义不大,因此,<strong>在Python3.x中整型只有<code>int</code>这一种</strong>了</p></blockquote></li><li><p>支持</p><ul><li>二进制</li><li>八进制</li><li>十进制</li><li>十六进制</li></ul></li></ul><h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><ul><li>支持数学写法和科学计数法</li></ul><h5 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h5><ul><li>字符串是以<strong>单引号</strong>或<strong>双引号</strong>括起来的任意文本.</li><li>表示方法<ul><li>原始字符串表示法</li><li>字节字符串表示法</li><li>Unicode字符串表示法</li></ul></li><li>可以写成多行,用三个单引号或三个双引号开头,三个单引号或三个双引号结尾.</li></ul><h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><ul><li>在Python中可以直接用<code>true</code>和<code>False</code>表示布尔值(<strong>注意大小写</strong>)</li></ul><h5 id="复数型"><a href="#复数型" class="headerlink" title="复数型"></a>复数型</h5><ul><li>如<code>3+5j</code>,和数学上的复数表示一样,唯一不同的就是<code>i</code>换成了<code>j</code>.</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><h5 id="硬性规则"><a href="#硬性规则" class="headerlink" title="硬性规则"></a>硬性规则</h5><ul><li>变量名由字母(广义的Unicode字符,不包括特殊字符),数字和下划线构成,数字不能开头.</li><li>大小写敏感</li><li>不要跟关键字和系统保留字冲突.</li></ul><h5 id="PEP8要求"><a href="#PEP8要求" class="headerlink" title="PEP8要求:"></a>PEP8要求:</h5><ul><li>用小写字母拼写,多个单词用下划线连接.</li><li>受保护的实例属性用单个下划线开头.</li><li>私有的实例属性用两个下划线开头</li></ul><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><ol><li><p>使用变量保存数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br></pre></td></tr></table></figure></li><li><p>算数运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a+b</span><br><span class="line">a-b</span><br><span class="line">a*b</span><br><span class="line">a/b</span><br><span class="line">a//b</span><br><span class="line">a%b</span><br><span class="line">a**b</span><br></pre></td></tr></table></figure></li><li><p>变量类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'在Python中可以用type函数查看属性的类型'</span></span><br><span class="line">type()</span><br><span class="line"></span><br><span class="line"><span class="string">'转换'</span></span><br><span class="line">int()<span class="string">'将一个数字或字符串转换成整型,可以指定进制'</span></span><br><span class="line">float()<span class="string">'将一个字符串转换成浮点数'</span></span><br><span class="line">str()<span class="string">'将指定的对象转换成字符串形式,可以指定编码'</span></span><br><span class="line">chr()<span class="string">'将整数转换成改编码对应的字符串(一个字符)'</span></span><br><span class="line">ord()<span class="string">'将字符串(一个字符)转换成对应的编码(整数)'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>运算符(优先级从高到低)</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> `</td><td>`</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code> <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code></code>^=<code></code>&gt;&gt;=<code></code>&lt;&lt;=`</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序</p></blockquote><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><ul><li><p>在pyhton中可以使用<code>if</code>,<code>elif</code>和<code>else</code>关键字构成分支结构.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件):</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span>(条件):</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>嵌套判断:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件):</span><br><span class="line">    <span class="keyword">if</span>(条件):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>python提倡”Flat is better than nested”,所以,能使用扁平化的结构九不要使用嵌套.</p></blockquote><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h4><ul><li><p>如果明确的知道循环执行的次数或要对一个容器进行迭代,推荐<code>for-in</code>循环.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'求十位数之和'</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong></p><ul><li><code>range(11)</code>可以产生一个0到10的整数序列.</li><li>range(1,10)可以产生一个1到9的整数序列.</li><li>range(1,10,2)可以产生一个1到9的奇数序列,其中<code>2</code>是步长(数值序列的增量)</li></ul></blockquote></li></ul><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><ul><li>如果构建不知道具体循环次数的循环结构,推荐使用while循环.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>  <span class="number">2</span>&gt;<span class="number">1</span>:</span><br><span class="line">    i = i+i</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>这里用到了<code>break</code>关键字来终止循环,值得注意的是:<strong><code>break</code>只能终止它所在的哪个循环</strong>,另外还有,另外还有<code>continue</code>,用于放弃本次循环,直接进行下一次循环.</p></blockquote><blockquote><p>循环同样可以嵌套</p></blockquote><p><strong>补充:</strong>在python中,<code>end=</code>向末尾添加一个字符串,这样在使用<code>print</code>时,末尾九不换行了.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-100天从新手到大师_begin</title>
      <link href="/2019/01/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_begin/"/>
      <url>/2019/01/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Python-100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88_begin/</url>
      
        <content type="html"><![CDATA[<center>   Pyhton是最好的语言.jpg(滑稽)</center><a id="more"></a><h2 id="什么是Python"><a href="#什么是Python" class="headerlink" title="什么是Python?"></a>什么是Python?</h2><h3 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><p>简单和明确,做一件事只有一种方法.</p></li><li><p>学习曲线低,跟其他很多语言相比,Python更容易上手.</p></li><li><p>开放源代码,拥有强大的社区和生态圈.</p></li><li><p>解释型语言,天生具有平台可移植性.</p></li><li><p>对两种主流的编程范式(面向对象编程和函数式编程)都提供了支持.</p></li><li><p>可扩展性和可嵌入性,例如在Python中可以调用C/C++代码.</p></li><li><p>代码规范程度高,可读性强,适合有代码洁癖和强迫症的人群.</p></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>执行效率稍低,因此计算密集型任务可以由C/C++编写.</li><li>代码无法加密,但是现在很多公司都不销售软件,而是销售服务,这个问题会被弱化.</li><li>在开发时可以选择的框架太多(如Web框架就有100多个),由选择的地方就有错误.</li></ol><h3 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h3><ul><li>Web应用开发</li><li>云基础设施</li><li>DevOps</li><li>网络数据采集(爬虫)</li><li>数据分析挖掘</li><li>机器学习</li></ul><p>从而产生的职位:</p><ul><li>Web后端开发</li><li>数据接口开发</li><li>自动化运维</li><li>自动化测试</li><li>科学计算和可视化</li><li>数据分析</li><li>量化交易</li><li>机器人开发</li><li>自然语言处理</li><li>图像识别</li><li>等</li></ul><h3 id="安装Python解释器"><a href="#安装Python解释器" class="headerlink" title="安装Python解释器"></a>安装Python解释器</h3><p>windows:到官网下载即可.</p><p>Linux:</p><blockquote><p>linux环境自带可Python 2.x版本,如果需要3.x版本,可以到Python官网下载.</p></blockquote><ol><li><p>安装依赖库(因为没有这些依赖库可能在源码构件安装时因为缺失底层依赖库而失败)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure></li><li><p>下载Python源代码并解压缩到指定目录.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</span><br><span class="line">xz -d Python-3.7.6.tar.xz</span><br><span class="line">tar -xvf Python-3.7.6.tar</span><br></pre></td></tr></table></figure></li><li><p>切换至Python源代码并执行下面的命令进行配置和安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.7.6</span><br><span class="line">./configure --prefix=/usr/local/python37 --enable-optimizations</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>修改用户主目录下名为.bash_profile的文件,配置PATH环境变量并使其生效.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ... 此处省略上面的代码 ...</span></span><br><span class="line">export PATH=$PATH:/usr/local/python37/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> ... 此处省略下面的代码 ...</span></span><br></pre></td></tr></table></figure></li><li><p>激活环境变量.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></li></ol><h3 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h3><h4 id="确认Python版本"><a href="#确认Python版本" class="headerlink" title="确认Python版本"></a>确认Python版本</h4><p>windows:<code>python --version</code></p><p>Linux或macOS:<code>python3 --version</code></p><p>在交互环境中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.version_info)</span><br><span class="line">print(sys.version)</span><br></pre></td></tr></table></figure><h4 id="编写Python源代码"><a href="#编写Python源代码" class="headerlink" title="编写Python源代码"></a>编写Python源代码</h4><p>编写Python源代码并用py作为后缀名保存该文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hello.py</span></span><br><span class="line">print(<span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>切换到源码所在目录并执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py</span><br></pre></td></tr></table></figure><h4 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h4><p><strong>单行注释</strong>:以#个空格开发=头的部分</p><p><strong>多行注释</strong>:三个引号开头,三个引号结尾</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><blockquote><p><strong>注:</strong>输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的“Python之禅”，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。</p></blockquote><blockquote><p><strong>python之禅</strong>:</p><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do<br>it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p></blockquote><p><strong>用python画图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment">#定义画笔大小</span></span><br><span class="line">turtle.pensize(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#定义画笔颜色</span></span><br><span class="line">turtle.pencolor(<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画一条100的线</span></span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line"><span class="comment">#将画笔方向旋转90度</span></span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数入口</span></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
